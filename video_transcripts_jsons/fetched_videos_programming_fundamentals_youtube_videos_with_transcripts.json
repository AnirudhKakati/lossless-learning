[
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Syntax and Data Structures",
        "Video Title":"Data Structures Explained for Beginners - How I Wish I was Taught",
        "URL":"https:\/\/www.youtube.com\/watch?v=SFEROgwxicA",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/SFEROgwxicA\/hqdefault.jpg",
        "ID":"SFEROgwxicA",
        "Publish Time":"2022-09-10T12:00:27Z",
        "Channel":"Internet Made Coder",
        "Channel ID":"UCcJQ96WlEhJ0Ve0SLmU310Q",
        "Transcript":"for most people studying data structures and algorithms is not the most exciting part of programming and trust me this is exactly the feeling that i used to have when i first started learning about data structures and algorithms to me they just seemed so boring and i just couldn't quite understand why they are even important and this seemed like something that i just sort of have to learn to get my foot through the door and after that i can just forget about them and focus on what i'm actually excited about like coding tinderbots but now that i've actually properly learned about these topics and taking the time to actually understand not only what they are but why they are important i've actually completely changed my mind i think data reaction algorithms is one of the most beautiful parts of programming and computer science and in this video i want to give you a glimpse of this beauty by giving you literally the dumbest most simple explanation of what data structures are to give you sort of an intuitive understanding that you can then take into your actual study of each particular data structure so you can have this sort of framework in your mind going into it and hopefully hopefully you may even start to appreciate the beauty that implementing data structures can actually have and believe me i remember exactly what it was like to not understand anything about data structures this video is completely language agnostic so whichever programming language you've learned in the past you can watch this video and then at the end as always i will give you the exact resources that i use in a step-by-step way to go from this conceptual high-level understanding into mastering all of these topics i'm really passionate about this reaction algorithms so if you enjoyed this video there will be a very similar video coming on algorithms as well so if you do enjoy this video leave a like down below because how many people like this video will then sort of tell me whether i should make it or not okay so what are data structures at an extremely high level all a data structure is is a way of organizing data so whenever you're writing a program the purpose why computers exist in the first place is that we have some data which can be like numbers or maybe it's a string and then we have something that we want to do with that data to produce some useful result it turns out that it really matters how we actually organize data in a computer's memory and i know that right now now this makes any sense and that is why i have organized a couple of very specific examples which will allow you to actually understand it again in the dumbest way possible in a way that even a literal dumbass like me could understand how this work but first let's just briefly talk about why this idea of organizing data is actually so important to the point where if you want to get a job studying data structures and algorithms is literally the most important thing that you need to know if you're good at data structures and algorithms you will be good at writing programs in a logical way in a way that makes sense in a way that is efficient and what companies want to see is that you have that fundamental knowledge and those principles that you can apply in their production code to make the gold really good and therefore that you as the programmer are worth the money that the company is spending on you so data structure is a way of organizing data in the computer's memory the way the computer's memory works in again a really dumb sort of simplified way you have these memory blocks which are called like memory registers all these registers hold some kind of value maybe this is a two this is a five this is a seven and whenever you're writing a program you're probably not just doing something with one piece of data like these two here often you'll have something like a collection of data that's sort of related to each other in some way maybe it's a list of numbers like a list of transactions that you want to add together or something like that so it makes sense to actually organize this data close to each other in the computer's memory so that it's easy for you to access all these different pieces of data rather than having to define separate variables like a equals two or b equals five you can just define one variable one data structure called a list and this is the first data structure that we learned the most basic one and then you put all of these numbers into this one variable so then in the future if you want to access the middle element of this list you can just go list one from the computer's perspective when all of these variables are stored close together to each other accessing them together and maybe looping over them or something is a lot easier this is sort of the computer equivalent of let's say like when i'm making these youtube videos right there's multiple pieces of gear that i always sort of need and so whenever i want to start filming a video it makes sense if i've sort of placed all my camera gear in the same part of the room so all i have to do is go to that part of the room grab the gear and start filming and storing values in something like a list is just a computer equivalent of this same principle let's talk about a limitation that a very simple data structure like a list could have the way lists or arrays are usually defined in a programming language is there a certain amount of memory in this case we've just allocated three registers of memory to our list here but what happens if we now want to add a fourth element to the list well you might say that well that's easy we just sort of added here but what if this register in the memory was already taken up by a different piece of data maybe we already had a string like hello in here now we put the eight on top of it so this hello gets replaced and maybe we had a different part of the programmer we'll be using that piece of string and now instead of hello it's certainly an eight and just everything crashes right so the way lists are usually actually defined under the hood in the language is that if you add an element to a list it will actually take this list and move it to a completely different part of the memory and then allocate more memory to it even if you don't understand anything about low level programming you might see that this is sort of very inefficient if you know that you'll be constantly adding data to a list every time moving into a different location in the memory can become very slow so that is why you can see that actually if we know that the thing we want to do with our data is to keep adding stuff to it and we know that in the future we'll be adding a lot of stuff to it it actually doesn't make sense to use a list and there might be a better way to organize that data again for this purpose that we have here and in particular for something like this we might use something called a linked list and what a linked list is instead of storing your items just sequentially after each other in the memory what we're doing is we're defining this node structure so we just have two places in memory where the first one is a piece of data like r2 here and the next one is a pointer to a different node somewhere else in the memory it doesn't matter where it is essentially this second item of this node will be pointing to the next element which will again just be a node and the way this actually works is that these memory registers are numbered in the computer's memory let's say this is a number five is number six and then somewhere randomly in the memory we have a memory register i don't know like 102 and here as the second element of this first node we just have the memory address where we know that the second element will be and again for the next one we would have maybe a pointer to register 463 and this one will then know that okay the next element of our link deletion will be in memory location 463 and again using our camera example here let's say i'm using all my camera gear in this part of the room here but now there's no space anymore what i could do is include like a post-it note in that area to see that okay the next batch of my gear is going to be in this area of my room maybe there's a note there that says i don't know under the bed or something so that i know where to go to find the next part of the gears and this way you can essentially just keep increasing this chain of values or chain of camera gear almost indefinitely as long as you actually have a space in your memory or space in your room all you have to do is just know where the very last element of the list is and then users have to find an empty location anywhere in your memory and then add another node into your linked list and so you can see how we already with this very simple requirements we already sort of have a need for a slightly more complex data structure and from the programmer's perspective when you want to add something to the list you just call the linked list sort of a method that's defined inside of the data structure to append an element in the list and under the hood all of this stuff is happening all this sort of drama is happening but the programming doesn't even need to know anything about it but crucially if the designer of this program hadn't designed this in the correct way it could be causing problems like this and causing the whole hardware to essentially crash or explode or whatever horrible things would happen but again obviously even the linked list also has downsides let's say what's really important in the specific application we're developing is for example accessing elements in the middle of the list like accessing this one right here now this specific operation is actually a lot easier to do in an array or a list like data structure we just call list one like this here whereas with a link to this we just sort of have to loop over the list until we arrive at the item that we're looking for which is a lot more expensive so as you can see again which data structure we're using always depends on the specific thing we're trying to do and sort of the specific things that you can see the user of that program needing to do a lot of the time and the way all of this like the linked list would be implemented in an actual programming language or python is that you would do something like create a class called linked list then you would create method inside that do all of this magic and then there will be a client where all they would have to do is call this append method and it would simply just do all of this magic behind the scenes and that is really the beauty of data structures and i know that all the details of this might be a bit fuzzy for you again the point of this video is not so that you can understand all these details it's just to give you an idea of why different data structures even exist if my sort of weird way of explaining data structures is making sense to you at all i would appreciate it if you could tap the like button down below in the description so let's now move on to a couple of slightly more complex examples to really drill this in and to make sure that you really understand what's going on here but first a word from our sponsor if you have a business or you're working on a project that requires e-signature you want to make sure that your documents are signed securely fast and in a legally binding way so if that's you you need to listen the sign now api is a powerful e-signature tool that allows you to embed e-signature on your website it's free to test fast to deploy and will allow you to not worry about document approval cycles and instead focus your time on growing your business developers particularly love site now's easy to use and detailed documentation with clear coding examples as well as great video tutorials on how to get started which makes implementing the api extremely easy in any programming language the synonym api is available through straightforward sdks and allows you to complete entire document approval cycles from uploading documents to tracking signature progress and not only that design now api make sure that your apps keep running with 99.99 uptime and in accordance with all the required compliance and security requirements so if that is something that sounds useful for your app you are in luck because they currently have a unique offer on the market which gives you 250 legally binding e-signatures for free so if you don't want to miss out on that click the link down below in the description to create your free sandbox account and start building dynamic e-signature workflows today thank you for sign now for sponsoring this video and now back to the tutorial so in practice we obviously have a lot more even more complicated requirements for things we want to do with data let's say you are an airline and you want to sort of structure the data about all the people who have bought tickets to some flights what makes sense for you is probably not just to group stuff together randomly in the computer's memory like for example in the order that they bought the tickets because what you probably really want to do is order them in some sort of priority where the people who have bought first class tickets are first but then when they want to do something with it they can see the first class passengers first and then the business class passengers and then the peasant economy passengers like me so it would be very useful for these airline operators to have a data structure that would allow them to group data in a way like this and it turns out this is a very common requirement in many different computer programs that is why a very common data structure that is used is something called a priority queue for this you would define essentially a linked list just like this but essentially every time when you're adding something to the list but the add method wouldn't just be doing this it wouldn't just be adding it to the end of the list but rather every time we're adding a person it would do some sort of operations which automatically sort of orders the list in the way that the airline wants so it orders it in a priority order so here what we would probably have is instead of just a piece of data and the link to the next node in the list we would have also a field for the priority class of the passenger so we would have a node that looks something like this where there's three values there's the actual person probably this would already be something like a dictionary with like their name and their birthday the price they paid or whatever we would just have a value that indicates that this is a business class passenger and here again we would have the pointers or the memory address of the next person on the list and then every time we're adding a person we would have defined inside the data structures of app operations that automatically perhaps it calls a different function to reorder all the passengers in such a way that this passenger will entity do the correct location of the list so as you can see a lot of the time even though you might think about data structures it's just about the structure so where we put the data a lot of the time especially these more complex data structures are a lot more about the operations that we want to do with that data and that is really the other thing that you should keep in mind that when you're defining data structures is really not just the organization of the data but also the operations that we define on that data and again the point here is that the airline operators or the person who's like going through the ticket doesn't need to know anything about any of this drama that's happening down there in the computer memory because the programmer the programmer who understands data structures has been able to program it is in an intelligent way from the airline operator's perspective all this is just happening like magic when they add a new ticket into the pool of ticket holders the list is automatically organized in the exact priority that they want and that is again the magic of data structures and this whole principle is also something that we often refer to as abstraction the most beautiful thing about computers and computer science is that there's like a million different levels of abstraction where at the very low level you just have zeros and ones inside the computers or even lower these teran sisters where electricity is going through these logic gates but you don't need to know about any of these because there are low level programmers who have designed these higher level programming languages that allow us to do stuff with the low level computer without understanding all the drama that's happening down below and the same thing here when as a programmer as a high-level program and your most important task is to understand the language and to understand programming concepts like data structures in such a way that you can design programs so that the people who use these programs don't need to know anything about how they work thinking just use them you just tell them click this button or run this function and it will do exactly what they want and in reality the relationships with pieces of data and the things we want to do are even more complicated than this where for example if you're organizing web page like the way google actually organizes their web page they have these like very deep complicated relationships with like all the different web pages so they need structures to deal with it again for the purposes that they need the data for so at the end of the day the reason why companies care about all of this the reason why you need to know all of this as a programmer it's like the equivalent of someone who organizes their room like a complete mess no one wants to hire someone who doesn't know how to organize their work effectively and to do stuff in an efficient way and so this is the analogy of the programmer who just does stuff in a way that maybe works but it's not the most efficient way to do it and for companies especially these large enterprises where all these details really matter because they're dealing with like billions of pieces of data they want to hire programmers who can organize their code effectively and that is really what data structures are all about if you want to actually now learn these details obviously this video is not enough first of all i would recommend subscribing to this channel because again if enough of you like this video i want to make a similar video about the other side of these virtual algorithms which is algorithms but really to learn all of this is not easy and to learn it effectively you need a good step-by-step plan and a path to make sure that you're learning everything that you need to know in the most efficient way if possible and for that i can be for you i mean this video where i talk about exactly that i describe exactly an exact step-by-step plan that you can take from a high level overview into all the theoretical details if you want to master all these topics and learn to pass coding interviews you should absolutely watch this video right here"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Syntax and Data Structures",
        "Video Title":"Python Syntax - Everything you need to know!",
        "URL":"https:\/\/www.youtube.com\/watch?v=A2NnIWCYnMQ",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/A2NnIWCYnMQ\/hqdefault.jpg",
        "ID":"A2NnIWCYnMQ",
        "Publish Time":"2022-09-01T13:15:00Z",
        "Channel":"Stefan Rows",
        "Channel ID":"UCDqZyVCTwg9UyRWKgQ7Gizg",
        "Transcript":"hey guys what's up everyone in today's video i will show you everything that you need to know about the python syntax as you know we have a bunch of new python tutorials on our website cosec.com and this is one of the first tutorials you should look at if you are interested in learning the python programming language i'm going to show you all of this in a replied repository which you can go and fork and play around with yourself this is the best way to practice python i'll leave a link to that in the video description and you can also find a link in the written article for that you can just fork it you can create a free account and then directly code along so i recommend you to do that before we get started so in python we use white spaces or indentation for code structuring if you have been coding in other languages such as javascript before you probably have seen that certain statements are ended with a semicolon like so this is not the case in python in python everything is structured using white space it is up to you if you want to use spaces or tabs which kind of is a ongoing discussion between people who prefer tabs over spaces or vice versa but it's really personal preference we like to use tabs because it keeps everything more uniform but do note if you use spaces according to the official pep8 style guide you should use four spaces for indentation and if you use tabs just one tab is fine you should never mix spaces and tabs always stick with one so if you use a one tab here that's one tab but if you actually look at four spaces one two three four that's a bit further and then indented um but that's fine if you use tabs which we do recommend you for ease of use uh then one tab is just fine so let's look at an actual python code snippet now don't worry about any of the things that i'm writing here don't need to understand it it's simply about indentation if you create a function in python we use the dev keyword and then we do the name of our function and then we do parentheses on the end and a colon and then we do a print statement here and you can see while i was pressing enter here it already automatically indented our code which means that we are now working inside of this function so we do hello from our function this is a simple print statement you will learn more about this later again this is only about the structure of the code and now if i hit enter once more then i'm still inside of this code block and if i hit enter once more at least here in replied every editor is different but most of them have some form of auto indentation and that's how you can work and if you want to actually get back into the function you can just go back one step up and then press the tab key and you will be in the exact same line here and this is exactly what we are talking about so this is the indentation now if we actually want to call the function we do our function and parentheses on the end and then if we run our code our code will run and print the statement that's coming from our function but again don't focus on what is all of that here just focus on the indentation part and you can see that this is clearly indented one tab in you may also recognize that we don't need any kind of semicolon at the end of our function statement or of our print function here we don't need any of that so this not only allows us to write less code but also makes it more of a human readable language that actually reads a little bit like english to summarize here why or what are some advantages of using this approach there is better readability clearly defined functions by using indentation indentation is required which makes reading other developers code easier so if you jump into code of some other developer that you haven't been working with before and it's all correctly indented you can directly see that this is part of the function and if it would be indented that way you would see that it's actually not in the function and the function is empty so once you develop a little bit of an eye for that then you can better understand why we indent code there is also a lower barrier of entry it makes learning python syntax easier compared to other languages so all of that green syntax you see up here is a comment and comments are essential in programming let's write another comment down below here so this is a single line comment in python and it won't run if you execute your code comments and programming languages are an essential tool to describe your code not only if you work together with other developers as previously mentioned but also for yourself if you have a project that you haven't been working on for longer periods of time you will forget parts or sometimes all of it all of its functionality comments help us to remember what we have written and with pointing out key elements of our codes functionality writing comments is required in most programming related jobs since you almost always collaborate with other developers on different projects commenting in python is straightforward to write a comment you simply put a hashtag in front of your comment like so and this indicates a comment to the compiler and it won't run this piece of text when you run your code another essential part of the python syntax or understanding the python syntax are strings or so called string literals so if you're declaring strings in python you have a bunch of options here you can declare a string let's first create a variable here let's call it our string this is how you declare a variable in python if you haven't seen that before and we can go and we can declare a string by using single quotes we can call that our string but we can also use double quotes instead of single quotes and it doesn't really make a difference we just have to make sure to not use too many quotes so we only use double quotes for this and this will work just the same and to prove that to you let's just print that out here print our string and we quickly comment out that function call here and that's also a way how you can just comment out code that you don't want to run when you're testing something so this is printing out our string let's put that back to single quotes to demonstrate that it's actually working and then if you print that out that prints out exactly the same we can also use triple single quotes or triple double quotes but it's crucial that you always start and end a string by using the same type of quotes for example if you start your string with a double quote you can't end it with a single quote so let's look at some examples below to better understand that whole concept let's create a single line string here and give that single quotes and then we say this is a single line string using single quotes okay so this is our single line now we print it all out in the end let's create a bunch of strings that we can look at the output all together then we create another single line string and we equal that to this is another single line string using double quotes okay this is our second string and then we create a multi-line string so to create multi-line strings we are going to use triple single quotes or triple double quotes we do multi line string equals and then we do triple quotes and if you just hit the button three times it will automatically create triple quotes here so you can see we have six quotes all together and now we can go ahead and we can do this is a multi line string using triple quotes now let's create a final one that we call another multi line string and equal that to three double quotes uh triple quotes yeah two okay now i'm getting confused it's six triple six double quotes and uh then we do this is a multi-line string using triple double oh my god triple double quotes okay there we go now if you want to print out all of that we can simply do that by using a print statement so we do print single line string and then we just copy that a bunch of times so we don't always need to reprint it or retype it we do that four times and we do it's the other one called another single line string and then we do multi-line string multi line string and then we do another multi-line string another multi-line string there we go so if you print all of that out we get the result and you immediately can see that there's actually a space between these and there is no space in here so why do we actually use multi-line strings we use multi-line strings if we want to have some space in between the lines that we are printing and this is exactly what we are seeing here now if we go to the triple single quotes uh line of code and we say this is a multi-line string using triple quotes and we just hit enter and we gifted some space in between and then we run the code then you can actually see that those lines have actually been separated so this is not the case if we do that in a single line string so if we would do that here it would already give us an error because it recognizes that it's only single quotes or single double quotes in that case and it doesn't allow us to hit the enter button but the same is true for the triple double quotes here we can also use the enter key here to create some space between the print statements and if we look at that again you can see that that is actually printing out with space in between so to summarize that we use multi-line strings to print out spaces between our lines and we use usually single single line strings using single quotes or double quotes when we just want to print out a single line with any space in between so this is also an essential part of python syntax so the next thing we want to take a brief look at are so called long statements in the python programming language it is sometimes required to use longer statements that need to be separated for better readability and we can utilize a backslash to achieve that so what i'm talking about here is if you write a very long statement that would exceed the line here and in your code editor you maybe would not see the line anymore because it got too long then we can utilize a backslash to separate that line much like in those multi-line strings so to do that i create a simple if statement here to demonstrate that for you don't worry about the logic here it doesn't it's not necessary it's just about the syntax so if we do a simple uh statement here where we check if some numbers are equal to another or bigger or smaller than the other one we can just do that by creating a simple number game here and then we do another end statement and now let's say if we want to continue this logic on the next line we can do a backslash here and then we press enter now we need to indent our code here a little bit for that to work and then we do another condition down here and then we do a colon at the end and then we want to print out something if that all if all these conditions are true so we do multi line statement is running and let's actually check if that works and it is working the multiline statement is running so this is good to know because if you run a very long statement or if you write very long statements here then you might run out of space and it gets hard to read so separating them in different lines makes it a lot easier the last thing i want to quickly talk about when it comes to understanding a basic python syntax is casing so by casing i mean how do we actually write our variable names and so on and so forth so we do casing and then we look at some examples so while sticking to casing isn't mandatory for your code to work it is highly recommended to stick with the recommended casing standards for python according to pep8 and those standards are variables functions methods and modules are written in snake case classes are written in pascal case and constants are written in capitalized snake case we highly recommend sticking to these guidelines which helps tremendously with making your code better readable both for you and anyone who works with you let's take a quick look at some of the examples below then you better understand what i'm actually talking about so camel case means capitalizing the first letter of each word except the first one and removing all spaces we do python syntax and equal that to a string that's camel case so this is how camel case looks like that's actually not used in python a lot very rarely i see that and it's not recommended in the style guide so this is just for you to understand what camel case is the next one is important that's pascal case capitalizing all first letters and removing all spaces so we do python syntax it would look like this and then we say it's pascal case okay so pascal case is only used for class names in python for class names okay so we got that the next one is snake case snake case is written like this python syntax and then we equal that to snake snake case is used for variables functions methods and modules is used for variables functions methods and modules okay and the last one is capitalized snake case so we do python syntax and capitalized is used for constants is used for constants now you don't need to worry about what constants are we have another article and video when you want to learn more about constants i'll link it in the video description below and you will learn everything you need to know about pyson if you just check out our python category on cosec.com so to summarize what you have learned today python code is indented with spaces or tabs that was the first thing we were talking about in python we use snake case for variables functions methods and modules we use pascal case for classes we use capitalized snake case for constants as you j as you just have seen here we can separate long statements with the use of a backslash we can use different types of quotes for string literals that's what you have seen here and finally we can use hashtags for writing comments now if you want to learn more about python we highly recommend checking out our python category on cosec.com if you click on learn on the top navigation bar and click on python there are all of our python tutorials and all of our python tutorials usually come with a corresponding replica that you can directly code with us and with a corresponding video as well if you prefer video content over written content make sure to bookmark the website and also make sure to check out our regular videos alright guys that's it thank you for watching and i hope to see you back in the next video"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Syntax and Data Structures",
        "Video Title":"Python for Coding Interviews - Everything you need to Know",
        "URL":"https:\/\/www.youtube.com\/watch?v=0K_eZGS5NsU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/0K_eZGS5NsU\/hqdefault.jpg",
        "ID":"0K_eZGS5NsU",
        "Publish Time":"2022-10-02T15:01:42Z",
        "Channel":"NeetCode",
        "Channel ID":"UC_mYaQAE6-71rjSN6CeCA-g",
        "Transcript":"hey everyone welcome back and let's write some more neat code today so today I want to cover everything you need to know about python for coding interviews if you're new here a little bit about my background I started the channel a couple years ago at the beginning of the pandemic I was unemployed and I made solutions to coding interview questions in python and a little over a year after that I eventually got a job at Google and I pretty much used python throughout all my interviews and I think it was really helpful because python is so much easier than most languages it's super concise I've actually never written a line of python code at any jobs or internships I've ever had I literally learned python just for coding interviews and it's definitely been worth it if you're already familiar with python I hope you learned some tips and tricks from this video and if you use other languages like Java or C plus plus I hope by the end of this video you see the benefits and then join the church of python I think you'll be able to learn it faster than you expect especially if you're already familiar with programming and by the way if you're studying for coding interviews check out neco.io it's a side I created has a bunch of free resources to help you prepare and I've also started making courses I just finished up the advanced algorithms course and I'm going to get started on the system design course for beginners so you definitely don't want to miss out on that okay now let's get started the first thing you should know about python is that it's a dynamically typed language so when we declare a variable like n and set it to zero we don't have to declare the type at all so now if we run the code in print and you can see it's equal to zero but types are determined at run time so we can reassign n to a string now and that's perfectly fine because n has no type the type is determined at run time so now we can run the code again and we can see that n was originally a zero and then it changed to a string ABC we can also do multiple assignments but it's a bit different than most languages if we have two variables we put them both on the left hand side and then we have our equal sign and then we put the two values on the right side it's okay to have multiple types in a single line line incrementing is a bit different of course we can increment a very simple way like this n is equal to n plus one we can also do the shorthand and plus equal to one just like most languages but we can't do plus plus you can see it even gives us a syntax error we can't do plus plus that's related to the python interpreter but it's not a big deal I mean this is one of the few cases where python is a bit less concise python also has null but it's called none in Python which is basically the absence of a value unlike most languages though we can have a value that's initially a number or it's supposed to store a number like four but then we can reassign It To None which means null and then we see it is equal to none if statements are pretty straightforward in Python at least conceptually but syntactically there's a couple differences namely that we don't need parentheses so if we have an if statement like this we don't need to put the conditional in parentheses and we don't need curly braces to represent what is the block that corresponds to this conditional we use indentation station for that so you can see here we have a tab that indicates that this code belongs to this statement we have a colon that goes after the conditional else if Works a bit differently we don't actually have both keywords else if we even shorten that I don't really care too much for this but I'm guessing it just has to do with the python interpreter because we already have two keywords for if and else so we have to create a new keyword for else if at least that's what I'm guessing while parentheses aren't required for conditionals in Python they are needed if we have multi-line conditionals and by the way logic and in most languages is the double Ampersand character but in Python it's just the keyword and or is just the keyword or so not that this is shorter but it just makes things a little bit more readable for example if we have an if statement that looks like this we use the keyword and and we use the keyword or to mean logic and and logic war and since we have a multi-line conditional like this these two lines are part of the conditional we have to put them inside of parentheses otherwise if we get a syntax error syntax practically while Loops are pretty similar for example we have a variable n equals zero we can create a while loop where the condition doesn't have to go in parentheses the block is followed by a colon and the code itself is indented with a tab we're printing n so running the code we get to print zero through four four Loops are pretty similar so if we want to do the exact same thing go from zero through four we create a for Loop where our variable I is going to go in the range of five that basically means it's going to start at zero and keep going until it reaches 5 and then stop and I is incremented implicitly so we don't have to tell this Loop to increment I I is just going to be incremented on every iteration of the loop by default so running the code you'll see we get pretty much the exact same thing zero through four so five is not included as the loop execute to better illustrate the for Loop let's take a look at another example where we're going from two through five so in that case we'd use the same keywords for I in range but we'd pass in two values into range we're starting at two and we're going up until six but not including six so now when we print this we go from two all the way up until five and if you want to go in reverse starting at five and going down to two it would be similar we'd start at five we'd go up until one but not including one and we'd pass in a negative one as the third argument because in this case we're decrementing if you don't pass in a negative one we increment the I but when you pass in negative one that means we're decrementing the I and we actually could have passed in a negative two here as well if we wanted to decrement by two every single time but just decrementing this going from five down to two and you can see we get what we expected I will admit this was one of the annoying things when I first learned python compared to most languages where you can do something like this explicitly declare the variable explicitly State the condition and explicitly increment our decrement this python syntax is different definitely a bit trickier but I think as you get used to it it's easier to type out than this bottom stuff that I have here division is also a bit tricky in Python it's decimal division by default whereas most languages use integer division so 5 divided by 2 will actually give us 2.5 whereas in most languages it'll round towards Zero by default if you want integer division you have to use double slash like this so printing this will actually round down you can see we get two as the result but if you caught what I just said you have to be careful because most languages will round towards Zero by default but in Python if we do integer division we're rounding down so you can see negative 3 divided by 2 will actually round down to be negative 2 where the decimal value would be negative 1.5 in most languages there would be negative one a workaround for this is to use decimal division but then convert the result to an integer because when you convert to an integer it will round towards zero this is kind of a annoying but it's just something you have to do you can see running this will give us a negative one which is what you might want in certain cases though I'll mention it's pretty rare to have to need to know this I'm just mentioning it in case you run into any issues using the modulo operator is pretty similar to most languages so 10 divided by three we're getting the remainder we would expect a one and that's exactly what we get except the issue is once again with negative values just like dividing negative values when we mod negative values we get unexpected results and negative 10 modded by three well the answer is actually two and this is different from most C based languages like Java C plus plus I think even JavaScript so if you want to be consistent with those other languages you can import math and then do F mods using this will give us negative one which is what you might have expected a few more useful math helpers we have floor which will explicitly round down we can also do the opposite which is the ceiling so three divided by two rounding up if you need to take the square root there's a Helper and if you need to take the power of a variable raised to another so 2 to the power of 3 would be this if you ever need a maximum integer you can use float infinity and if you ever need a minimum integer you can use float negative infinity and part of the reason that they come up is because python numbers are infinite so they actually never overflow so if we have a number like this 2 to the power of 200 which is a very large number as you can see on the right after we print it it's so large that we can't even print it it's 60 additional digits but even this large integer is still less than infinity checking if this number is less than infinity we get true arrays which are called lists in Python are probably the most common data structure you're going to use next to Hash Maps so an array can be declared just like this but initializing it is pretty straightforward you just put the values inside of some brackets and printing it is just as simple arrays in Python are Dynamic arrays by Define fault so just like in most languages Dynamic arrays can be used as Stacks so you can push to the array AKA append and you can also pop from the array which will pop from the end of course so after we push a four and we push a five we can print that and then after we pop the last value you can see that we popped the five because this is technically an array and not a stack we can actually insert into the middle so at index one we can insert a value seven printing that you can see we indeed inserted a 7 into the middle of the array but unlike pushing and popping from an array inserting into the middle is a big O of end time operation but it's not a big O of end time operation to index an array so at index 0 we can read the value and we can also reassign the value to zero in this case and we can reassign the value at index three and these operations are constant time operations to initialize an array of variable size let's say we wanted an array of size five and we wanted all values to be 1 one we could do it pretty easily it might be kind of weird to use the multiplication operator here but syntactically it's pretty easy printing the array and the length of the array you can see we do get what we expect but be careful when indexing an array especially when you're using negative values because negative one is actually not out of bounds in Python negative one will actually read the last value as you can see on the right and to read the second to last value you can use negative two now in my opinion this isn't super useful but sometimes it can be when you want to quickly read the last value getting sub lists AKA slicing an array is one of the most useful features of python so here we're taking the values of the array from index 1 to index 3 but not including index three just like with for loops and then printing those values so we would expect two and three and that's what we get and we could also go from index 0 to 4 which is pretty much the entire array and that's valid as well unpacking is also a super useful feature basically we can take all the individual elements of an array and assign them to variables in this case ABC this can be super helpful when you want to go through a list of pairs for example be careful though because you do have to make sure that the number of variables on the left hand side does match the number that you're expecting from the array we can Loop through arrays in many different ways using the simple for Loop syntax we talked about earlier we can take the length of the array and then iterate that many times using an index I and then printing the individual value an easier way to accomplish the exact same thing is without using an index so we can actually go through every value in nums and then just print that individual value if for some reason you needed both the index and the value you could use the first for loop I have shown up here but another way to do it is to use the enumerate function in Python so a numerate will actually give you the index which will be the first value that's unpacked and the second value that's unpacked will be the number and then we can print both of those if for some reason we needed both of them and all three of these Loops execute as you would expect now if we want to iterate through multiple arrays simultaneously we can do that with unpacking and a helper function called Zip Zip will basically take both of these arrays and combine them into an array of pairs and then we can unpack those pair of values which are values from nums 1 and nums two we get pretty much what we expect reversing an array is as simple as calling the reverse method on that array so one two three becomes three two one sorting an array is just as easy taking this array we can call sort on it so this will sort it in ascending order by default if we want to sort it in reverse order we just pass in the parameter reverse equals true and then the array will be sorted in descending order we can also sort a list of strings by default they will be sorted based on alphabetical order as you can see on the right but if we want to implement a custom sort for example if we want to sort based on the length of each string then we can do that by passing in a Lambda function so in this case the key is equal to Lambda which is basically a function without a name and we're going to take every single value from the array call it X and then return from that the length of X and this is the key that's going to be used to sort the string so each string is going to be mapped to its length and then we're going to sort those strings based on their length so by default it's going to be in ascending order as we can confirm on the right another sort of advanced way to initialize lists is using list comprehension so if we wanted to go through every value in range 5 and to call that value I and we want to add that value to this array this is the shorthand so we're iterating for I in range 5 and then I is going here so we're taking that I value and adding it to the array and printing it you can see that we indeed have zero through four now maybe we want to go through every value in that range but we want to take I and add I plus I to the result so for every index we want 2 times that index added to the result you can see we can also do that pretty easily if you want to do something similar for a 2d list it's also pretty easy but maybe a bit different than you would expect the easiest way to do it is the shorthand that we talked about earlier where we take an array with zero and then multiply it by four this will give us an array of size 4 with all zeros and we want this array to be added to the outer array for time so we have an inner loop for I in range four we're not even using the variable I here but this will build a 4x4 grid of all zeros you might be thinking isn't there an easier way to do that well actually not you might be thinking can we just do this create an array of size 4 and then multiply that by four well technically this will work but each of the four rows of this array are going to be the same so if we modify one of the rows we're going to be modifying all of the other rows we're not actually creating four unique rows in this case it's a common thing that can throw people off if you have more questions about this feel free to ask in the comments it's something that tripped me up a lot when I first started strings are pretty similar to arrays so we can declare one with double quotes you can also use single quotes if you want and we can slice them the same way we do with arrays and printing it works the same but a key point is that they are immutable that means we can't modify this string that means we can't reassign the character at index zero we can however update the string but updating it will actually create a new string so adding def to the end of the string will create a new string so basically any time you modify a string it's considered an end time operation strings can be converted into integers and then those integers can be added integers can also be converted into Strings and then those strings can be added together so when you add two integers together we get an integer as the result adding two strings together appends those strings together so we get one two three one two three if for some reason you need the ASCII value of a character you can do that with the ORD function so printing this you can see we get 97 is the ASCII value of lowercase a 98 is the ASCII value of lowercase b you can also join a list of strings together with a delimiter in this example we have three strings and we're joining them with the empty string delimiter here so we're basically just appending these three strings together we could also have had a delimiter maybe a space in between all of them and printing the result we get all three strings appended cues in Python are double ended cues by default you can import them adding values to the right side is as easy as appending to the queue so at this point our queue isn't much different from a stack but the benefit is that we can actually pop from the left of the queue and we can do this operation in constant time unlike with a stack as you can confirm on the right since it's double ended we can also add values to the left of the queue so the one that we popped we can add back to the left side and also we can choose to pop from the right side if we want to so running this we can confirm that the one is added back and then we pop the two after that Ash sets are really useful because we can search them in constant time and we can insert values also in constant time of course there won't be any duplicates in our set of course unlike a list there can't be any duplicates in a hash set but we can just as easily get the length of the hash set to know how many elements have been inserted we can also search the hash set without a function we can use the in operator so if we want to know if one exists in the hashtag same thing with two same thing with three which we know does not exist in the hash set as we can confirm we can remove values also in constant time time and confirm that the value has indeed been removed to initialize a hash set with a bunch of values we can actually pass in a list but just like with lists we can also do set comprehension and manually initialize it with a loop inside of the hash set so here we're going through every value in the range of I and taking that value I adding it to the hash set and initializing it this way is identical hashmaps are probably the single most common data structure you're going to be used and this is what we were saving those curly braces for to insert we simply take some key value in this case a string and assign it to another value in this case a number 88 and we can add a bunch more just like with hash sets we can't have duplicate keys inside of the hash map printing it is just as simple taking the length will give us the number of keys that exist in our hash map we can modify the value that's mapped to a key so we can change Alice from being 88 to 80. we can also search if a key exists in a hashmap in constant time and we can also remove that key which will also remove the value as we can confirm on the right to initialize a hashmap we can add pairs inside of the curly braces where each pair is separated by a comma and the key goes on the left side of the colon and the value goes on the right side this is the same as manually inserting values into the hash map but if you want to get even more fancy you can use dict comprehension hash maps are basically called dictionaries in Python and the syntax is pretty similar but in this case if our looping I in the range of 3 we're going to have two values I in this case is the key then a colon and then the value goes after that in this case we're mapping I to 2 times I this is pretty powerful and I find that I use it most frequently when I'm doing graph problems and trying to build like an adjacency list looping through a map is pretty interesting because there's many ways to do it by default we iterate through every single key and then we can you know print that key and also print the value that that key maps to but also we can directly iterate through the list of values of that hash map if we we don't even need the key lastly using unpacking we can actually go through the items of that map which will give us the key and the value this is pretty similar to the first Loop that we have I guess it's a bit more concise to write it this way python also has tuples which are pretty similar to arrays except to initialize them we use parentheses rather than brackets and they are immutable so while we can index them we can't modify them so this won't work you'll mainly be using tuples as keys for a hash map or a hash set so in this case we're mapping a pair of values one two to three so this Tuple is basically our hashable key we can do the same thing for hash sets of course and then we can use that Tuple to search the hash set the reason we do this is because lists are not hashable and can't be keys for hash sets or hash Maps so this here will not work heaps are another really common data structure to find the Min and Max of a set of values frequently under the hood in Python they're implemented with array days of course so actually to create an empty Heap we just create an empty list and to push values to that Heap we use Heap Q dot heat push to that Min Heap the value three by default heaps in Python are Min heaps so we push a few more values and then to get the minimum value it'll always be at index 0. that's just how heaps are implemented to Loop through a heap while the length of the Heap is non-zero we can also pop values from the Heap with Heap Q dot heat pop from that Min heat and then print the corresponding value that we just popped since it's a Min Heap we'll see the values are printed from smallest to largest while python doesn't have Max heaps by default the workaround is basically to multiply each value that we push by negative one and then after we pop that value we also multiply it by negative one to negate the original negative one so if we wanted to implement a Max Heap and push the value 3 we would actually push negative three and if we wanted to push two we'd push negative two same thing with four again the max will always be at index 0 but we know we have to multiply it by negative one to negate the original negative one by popping each value and multiplying it by negative one we can confirm that the values are printed from greatest to smallest now if you already have the initial set of values that you want to build the Heap from you can do it in linear Time by calling build Heap or in Python it's called heapify so we can call Heap Q dot heapify this array and while that array is not empty we're going to keep printing the values and we can confirm that they're printed from smallest to largest functions in Python are pretty straightforward and concisely use the def keyword we name the function and then we pass in some parameters in this case n and M just like with conditionals and Loops we use a colon after the Declaration of the function and the body of the function is going to be indented so we're returning the multiplication of those two values and printing the result one functionality I use a lot in coding interviews is nested functions this can be really helpful in recursive problems because if you have an outer function that takes in a couple parameters and you also declare some values in that outer function the inner function will actually have access to all of those variables by default so then if we called the inner function we don't even have to pass in a b and c now this is a pretty simple example but if you've watched any of my graph videos you know how nice this can be in keeping our code concise one thing that trips a lot of people up with nested functions is that you can modify objects but you can't reassign values unless you use the non-local keyword so if we have a function that's going to double every value inside of an array and also double this value itself this is not an array we can have a helper function it'll have access to both of those outer variables we can modify the array pretty easily by going through each value in the array and then doubling it this works and will update the original array but if we doubled the value it'll only double the value in the scope of the helper function if you want to update the value outside of the helper scope you'll have to declare it as a non-local value and doing this and and then modifying the value will modify the original values and then in the outer function we can call the helper function without passing in the variables and then print the variables not actually called the double function we can create some variables call it run the code and we can see that each variable was doubled again this is a trivial example but if you're familiar with my videos you know that this can be helpful classes are also pretty concise but a bit more limited than other languages a Constructor is basically double underscore init double underscore after that that's kind of the name of the Constructor in Python self is passed into every method of a class it's basically like the this keyword in other languages in this case our Constructor is maybe taking a list of numbers to create member variables we also use the self keyword so this is creating a member variable called nums and assigning it to the nums that were passed in as a parameter to the Constructor we can also create a member variable for the size of nums by taking the length of the parameter to create a method for this class class for example get length we don't want to pass in any parameters to this but we have to pass in the self keyword always that'll give us access to Our member variable which we're going to return self.size if we want to call another member variable from a member variable in this case we want to call get length from this other function get double length we can do that again with the self keyword this is a pretty useless example but I'm mainly trying to explain the syntax and the structure of classes in Python now this is more or less everything I've needed to know for coding interviews it's surprisingly not a lot and you don't have to memorize any of this as you solve coding problems and as you prepare for interviews you might have to look up the syntax or how exactly do I use heaps how exactly do you use double ended cues things like that it's perfectly okay but after you practice enough most of this stuff is pretty easy to get down it doesn't even feel like you're writing code after a while python is a pretty big reason I was able to get a job at Google in my opinion now if you're preparing for coding interviews check out neco.io there's is a ton of free resources to help you prepare each practice problem listed has a thorough video explanation and we have code support for python C plus plus Java and JavaScript if you're new to data structures and algorithms I've got some really helpful courses not only for beginners but also for advanced users thank you so much for watching and hopefully I'll see you pretty soon"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Syntax and Data Structures",
        "Video Title":"Python: Data Structures - Lists, Tuples, Sets &amp; Dictionaries tutorial",
        "URL":"https:\/\/www.youtube.com\/watch?v=R-HLU9Fl5ug",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/R-HLU9Fl5ug\/hqdefault.jpg",
        "ID":"R-HLU9Fl5ug",
        "Publish Time":"2015-05-24T19:52:12Z",
        "Channel":"Programming and Math Tutorials",
        "Channel ID":"UC4Xt-DUAapAtkfaWWkv4OAw",
        "Transcript":"hi I'm Joe today I'm going to cover python lists tles sets and dictionaries now the list is the most widely used data structure in Python it's very general purpose similar to an array in Java and it covers most of what you would need but Tuple sets and dictionaries have some advantages in specific areas and are very very useful data structures so the list is a sequence type it's sortable the tupple is mutable which means you can't change add or remove items in a tupple once it's been created so it's useful for fixed data andle is also a sequence type which we'll explain in a second the set you can store non duplicate items so it's good for storing unique items in a set and it's also very good for doing mathematical comparisons to sets Union intersect those kinds of set operations dictionaries contain key value pairs it's like an associative array similar to a Java hashmap and both sets and dictionaries are unordered which means they're not sortable and they're in random order and one amazing thing about these data structures in Python is that they can hold any data type so they could hold integers floating Point values strings or other object types and even other lists tupples sets and dictionaries and the data types don't have to be homogeneous so you can mix and match data types within a single list or within a set or within a dictionary now sequences include list this tles and also strings there are a bunch of different functions that are applicable to all three of these data types and we're going to go into them in detail so indexing you can access any item in the sequence instantly using its index if you have a million items in your list and you want to access an item instantly you can do that if you know as index so a string is a sequence of letters let's say we want to access one of the items in the word frog we can say print X of 3 using the square bracket for the three and that gives us the third index starting from index zero for f the G is going to be index 3 and in our list if we say we want item with index one that's going to give us cow the second item in the list slicing allows us to slice out sub strings and sub lists and subtles using indexes and the syntax is using square brackets start End plus one and step and these are all optional I'll cover some examples that explain that and these are applicable to string tles and lists but in this example I'm just going to use the word computer which is a string so let's say we have X from 1 to 4 using a colon and this will return to us items 1 to 3 which is om if we want uh to slice items 1 to six this actually cuts off at five and it'll give us every other item since we have a step of two here so items 1 3 and 5 opt and x with uh items three to basically uh no end right we didn't put an item after the colon so that's going to give us three onward so p e r if we don't put anything before the colon then it starts at zero so this will give us items 1 through 4 or rather 0 through 4 and if we want to use negative numbers here we can use - 1 which will give us the last item in a list or a sequence so X of -3 colon nothing is going to give us the last three items in a sequence and then if we have X colon -2 will give us everything except the last two items in the in the sequence adding and concatenating we can do using the plus symbol so we can combine two sequences of the same type only so if we have two strings that we want to combine we can use a plus sign to add them together and if we have two lists we want to merge together we can use the plus sign and will give us one list with three items in it multiplying we can use the Star Sign to multiply sequences again of the same type so if we have a bug it will multiply the word bug three times and give us bug bug bug or if we have a list with an eight and five in it we want to multiply that by three it will give us 85 three times in our list checking membership test whether or not an item is in or not in a sequence using keywords in and not in so it's very simple to use so if we have x equals bug and we want to print u n x we print true If U is actually in X and it'll print false if it's not so in our list Pig Cow Horse print cow not in X we print true if cow is not an X however cow is in X so it prints false so that's checking membership using the in and not in keywords iterating we can iterate through the items in a sequence using for Loop so if we have list of integers in X we can say four item or any any variable name in X print or whatever we want to do to that variable name it returns to us one list item at a time each Loop iteration and if we need both the index and the item we can use the enumerate function so we say for index and item we basically need two variable names here the first one is going to be index second is going to be the value or the item uh in enumerate X and then we can do inside this for Loop we can do whatever we want with those two variables here I just have a print statement that prints the index followed by the value number of items we'll count the number of items in a sequence and we do that using the Len function which is short for length and we can do the same thing in a list prints the length of a list three items in this list minimum finds the minimum number lexical graphically which means Alpha numerically but this only works when all of the items in the list are either alpha or numeric you can mix and match integers and floating Point values but you cannot have both strings and integers so if x equals bug we want to find the minimum the minimum is B we have a list of three strings we're going to find the lowest one which is C Cal So prce Cal maximum is going to find the maximum item in a sequence again lexical graphically and they have to be all the same type either numeric or string type so if we take the maximum of bug we get U and if we take the maximum of pig cow and horse we're going to get Pig because that comes last alphabetically sum we can find the sum of the items in a sequence if they're numeric type so 5 S and bug is going to give us an error because bug is is not a numeric type but if we take the sum of 2 5 8 and 12 it's going to print 27 or if we want to do a slice we can say hey I just want the sum of the last two items of X and this here we'll print 20 we can sort the items of the list this sorted function actually returns a new list without changing the original List It returns a new list in sorted order so bug will return to letters of bug in a list in sorted order bgu and our list Pig Cow Horse if we call sorted of X it's going to return Cow Horse Pig and mind you the original X is still unchanged count of item Returns the count of a specific item in the sequence so here we're looking for the count x. count of P will tell us there are two PS in hippo and x. count of cow will tell us how many times the word cow appears in our list X if we want to find the index of an item the index function actually Returns the index of the first occurrence of an item so if the item is in the list or sequence multiple times it Returns the index of the first occurrence so here the H is zero the I is 1 the P the first p is 2 so x. index of p is going to return two and here we find the first cow which has an index of one unpacking if we want to assign all the items in a sequence to a set of variables we can say a comma B comma c = x and then all of the strings in X will be assigned in order to the variables here on the left so Pig assigned to a cow assigned to B and horse assigned to C but this only works if the number of variables exactly matches the length of your list so here we have three items we must have three variables so that covers General functions for sequence types then let's talk about specific list functions so there are a few different ways to create lists we can say x equals list parentheses uh we can say x equals in square brackets whatever list I it we want to add to populate the list and again we can mix and match uh data types so we have here some strings integers floating points and we can say x equals list and in parentheses a Tule and we'll get a list from the items in the Tuple there's a really cool function called list comprehension so we can create a new list using what is returned by the for Loop for m in range 8 so m in range 8 Returns the values 0 through 7 and here we're saying we just take those values M so the resulting list is 0 through 7 here we have a for Loop that says Z in range 10 if Z is greater than four so in other words items 4 through 9 but we said hey look instead of adding the item itself Z to our list we want to add z^ squ so it's going to take 5 through n and it's going to square each one of them and add it to the list so we get 25 36 49 64 81 so list comprehensions you can have fairly complex function inside of the square brackets to create and populate a new list with whatever values you want delete we can delete an item from a list or we can delete a complete list the item we would delete using the index or we can delete the entire list a pin we can append an item to the end of a list using the do appin function extend we can combine two lists this is very similar to the plus function that we already showed x. extend Y is going to combine both X and Y together into list X insert allows us to insert an item into a certain index position so here we want to insert a seven into position one it will scoot the rest of the items to the right and put the seven into the list and here we're going to insert a su list or an embedded list with letters A and M into position one which is going to scoot all the rest of the items to the right and pop our sub list right in here the pop function pops the last item off the list and returns it so if we want to let's say print an item as we pop it off the list we can say print x.p and it will print the last item on the list and the new list will have one less item in it remove is going to uh remove a specific instance of an item so if we want to remove a three from this list we can put x. remove three and it'll remove the first three that it finds not every three just the first three so you can see here the first three is gone and reverse reverses the current order of the list so the number that is first will become the last the number that last is going to become first and so on sort will actually do an inplace sort so the new list you get back our list X here is going to become a sorted list so unlike the sorted function sort is an inplace sort so it actually changes the order of the items in list X now let's talk about tuples so tles support all the operations for sequences but tles are immutable so member objects inside a tle may be mutable for example you may have a list inside of a tuple could be one of the items in your tupple that list is still mutable you can still change and add and delete item from the list but you cannot delete the list itself from your tupple so it's a little confusing I'm going to show some examples in a second if the contents of a list shouldn't be changed then you can use a tupple that's what tupples are used for it's useful when you have a const set of values that are not going to be changed that you want to use throughout your program and tles are more efficient than list due to how python implements them so how do you construct a tupple well a new tupple with no no values in it is going to just be created using the parentheses and we can say x = 1A 2 comma 3 if we want to create a tupp hole with values 1 2 and 3 in it and you don't even need the parentheses actually the parentheses are optional if you want to create a single item tupple you still have to put a comma after that item otherwise it would just sign x equals integer value two and X would be an integer not a tle so the comma tells it hey this is a tupple but it's a single item tupple and we can create a tupple from all the members of a list just using the tupple function so tuples are immutable as I said if we try to delete an item from a tupple or change the value of an item in a tupple we're going to get an error but if we have let's say a list inside of a tupple here we have a called X and our first item is a list with one and two in it and our second item is an integer three so we can't change that three that's immutable however we can change the list here we're going to delete the first item in the list which is two the item in index one so our new tupple has a list with just the one in it and integer three so we can change the list the list itself is mutable but the tupple is not we still have to keep the list in in this position let's talk about sets now so there are some Constructors how do we create a new set we use the curly braces if we want to populate a set with values and we can create a new empty set using set with parenthesis and we can create a set from a list by calling the set function in parentheses the name of the list when we do this though it strips out all the duplicates from our list and returns only unique values to the set and then we also have similar to the list comprehension a set comprehension so we can use a for Loop uh if statements and whatever functions we want to do on those X values X is probably a bad choice of variables here since we're using X for the uh set name but uh but we can use the list comprehension to put values into our set and sets are unordered so as as we populate set the items are going to be in random order so some basic set operations we can add an item to set X by using x. add item remove an item from set X using x. remove item get length of set X using the Len function we can check membership in X by simply saying item in X or item not in X that's going to return a Boolean true or false we can pop a random item from set X using the pop function we don't know which item is going to be popped it's arbitrary selected and we can delete item items from set X by saying x. CLE will completely empty our set some of the standard mathematical functions for sets are very useful uh we can find the intersection of two sets using the Ampersand function and we can find the union of two sets using the vertical bar symmetric difference or exclusive ore in other words items that are in set one but not in set two or in set two and not in set one using the uh up air the difference which means items that are in set one but not in set two we just take set one minus set two and subset and superet basically returns a Boolean value does set two contain set one or does set one contain set two for super set question so those are some of the set operations now let's take a look at dictionaries so a dictionary again is a key value pair and you can see three different ways here to create a dictionary you can use curly braces with the key first in this case I chose to use strings for a key and floating Point values for my value and they're separated by a colon so this is the most standard way to create a dictionary you can also call the dictionary function to create a dictionary by placing comma separated tupples inside of a set and you can also um say key equals value comma separated and call on that so there's three different ways to create a dictionary I find the first one is more widely used and more standard U but they all three work so some basic dictionary operations you can add or change an item in dictionary X by saying X key is equal to Value if this key is already existing in the dictionary then it will change the value to this if the key doesn't exist in dictionary it will add this key value pair to the dictionary remove item from dictionary X delete uh X and then the key get the length of dictionary using the L function check membership in X item in X or item not in X this only looks in the keys it does not compare to values so if we want to look through values I'll show show you a way on the next slide to do that delete all items from dictionary X we can say x. CLE and delete the entire dictionary X delete x d x so how do we access the keys and values in a dictionary we can say x. Keys it will return a list of the keys in X x.v values returns a list of values in x and x. items returns a list of key value tupple pairs in X so if we want to check membership in values of X we can say item in x. values and this will text test the membership in X and return a Boolean iterating a dictionary we can use for Loops for variable in X print variable right so we say key we use the the word key for our variable we can print our key and then if we want access to the value as well we say x and then key in uh square brackets and we can get both the key and the value this way by iterating however if we want to do a lot of operations or use use the value quite frequently inside of our for Loop we could use items instead so we can get two separate variables for the key and the value by saying 4 K comma V in x. item items is going to return both a key and a value and assign them to variables K and v in this case so when we print K and V we print out each key and each value for the entire dictionary that wraps up my video on python lists tles sets and dictionaries I hope you enjoyed the video please click the like button at the bottom I'm Joe James thanks for watching [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Lists and Tuples in Python",
        "Video Title":"Python lists, sets, and tuples explained \ud83c\udf4d",
        "URL":"https:\/\/www.youtube.com\/watch?v=gOMW_n2-2Mw",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/gOMW_n2-2Mw\/hqdefault.jpg",
        "ID":"gOMW_n2-2Mw",
        "Publish Time":"2022-11-04T14:23:00Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"well hello everybody today I will be explaining a few different types of collections in Python there's four general purpose collections three of them are lists sets and tuples there are also dictionaries but I'll save that for the next topic because they can be kind of tricky a collection I would think of them as a single variable and I'm saying that within quotes that is used to store multiple values that's how I would explain a collection to a beginner for example let's say we have a variable variable fruit fruit equals some value like Apple and then I can print this fruit which is Apple I could turn this variable into a collection by surrounding my values with either a set of square brackets for a list curly braces for a set or parentheses for a tuple let's begin with the list if I would like to store more than one value in this variable I will surround my values with a set of square brackets this variable is now a list I can store multiple values separated with the comma not only do we have an apple in this variable but we have an orange a banana and coconut one naming convention that I like to use if I declare a collection such as a list set or Tuple I like to take the variable name and make it plural just so that it's more obvious that this is a collection of values technically in the English language fruit would still be plural English is a weird language we now have a list of fruit named fruits if I were to print my list this is the result we have all of our values enclosed with a set of square brackets to access one of these elements found within your list you can use the index operator much like what we can do with strings the first element would have an index of zero that would print my value Apple index of one would be my orange two is banana three coconut what about four we don't have a value there list index out of range each value in a collection is also known as an element if we attempt to access an element that's not found within our collection you'll run into an index error with the index operator you could set a beginning index an ending index and a step I would like the first three elements you could say zero colon three that would give me Apple orange banana technically you don't even need the zero you need that colon though we can even use a step I would like every second element apple banana it's every second element beginning from index zero maybe I would like my fruit backwards I'll set the step to be negative one coconut banana orange Apple you can use the index operator with collections much like you can use with strings another cool thing you can do too with collections is that you can iterate over them with the for Loop four x in my collection fruits what would we like to do I will print whatever X is so we have iterated over our list Apple orange banana coconut now X isn't really too descriptive what you'll see some people do is that with their collection name it's plural their counter will be the singular version of that word if our collection name is fruits let's rename X as fruit singular it's not mandatory but that's a common convention it's more readable that way for every fruit in fruits If This Were cars you could say for car in Cars our counter is storing whatever value is within our collection so what are all the different methods that we can use with collections to list the different methods that are available to a collection you can use the dir function within this function add your collection fruits but we would need to print this let's surround this function with a print statement these are all in alphabetical order we have attributes which I have not explained yet but I will in a future topic but if we scroll to the end we have a bunch of different methods that this list can perform append clear copy account extend index insert pop remove reverse and sort if you would like a description of each of these methods there is a help function help add your collection to the parentheses then we would need to print this here's the description of all the methods and attributes for example we have our sort method and here's a description sort the list in ascending order and return none and then a bunch of other stuff if you ever forget what you're capable of with a list or other collection you can always use the help function to print a description of the attributes and methods available if you need the length of how many elements are within a collection there is the length function return the length of my list fruits then let's print it there's four elements within my list the length function returns four if I were to add an extra element like a pineapple then that number would be five let's remove that using the in operator we can find if a value is within a collection is our value Apple in fruits but then we would need to print this this operator will return a Boolean so let's print whatever that is is Apple in fruits that is true but is pineapple pineapple is not it's false you can use the in operator to find if a value is within a list and that applies for your other collections too with lists they're ordered and changeable duplicates are okay we can change one of these values after we create our list let's take fruits at index of zero I will set the sequel to be a pineapple then let's iterate over our fruit using a for Loop okay the first element is no longer an apple it's a pineapple then orange banana coconut using an index you can reassign one of the values if I were to change zero to one well now we have an apple pineapple banana coconut let's cover some of the methods that are found within a list we can append an element type the name of the list dot append what would we like to append to the end of this list let's append a pineapple I'm going to get rid of this for Loop I'm just going to display my list there we have an apple an orange banana coconut pineapple to add an element to the end of a list use the append method to remove an element you can use the remove method Roots dot remove let's remove our Apple our apple is no longer there we have an orange banana coconut using the insert method we can insert a value at a given index fruits dot insert list and index 0 would be the beginning then a value pineapple now we have a pineapple Apple orange banana coconut the sort method will sort a list fruits.sort these are all in alphabetical order now apple banana coconut orange to reverse a list you would use the reverse method fruits.reverse coconut banana orange Apple however these are not in Reverse alphabetical order these elements are reversed based on the order in which we place them if you would like reverse alphabetical order you can first sort and then reverse now we have orange coconut banana apple to clear a list use the clear method fruits.clear all of the elements are gone we can return the index of a value let's return the index of Apple fruits Dot index list and element then we will need to print this let's print the index that is returned the index of Apple is zero coconut that would be three what if we don't find a value like a pineapple well we have an error pineapple is not in list you could count the amount of times that a value is found within a list because duplicates are okay fruits dot count let's count how many bananas are in this list banana then print it one banana is found within this list how about pineapples there are zero now those are lists surround your values with a set of square brackets these values are ordered and changeable duplicates are okay now let's talk about the next collection which is a set to create a set surround your values instead with a set of curly braces our collection of fruits is now a set a set has different benefits the values are unordered and immutable meaning we can't alter these values however we can add and remove elements a set does not include any duplicates I'm going to delete these methods then print fruits we have all of the same values but they're not in the same order as they were originally a set is unordered if I were to run this again they will likely be in a different order see now we have a banana apple coconut orange to display all of the different attributes and methods of a set you can use the Der function and here's all of them some of these methods are a little more advanced but there's a few we might recognize like add clear copy for an in-depth description of these methods you can use the help function much like what we did before to find the length of our set we can use the length function which is for we can use the in operator to find if a value is found within the set unfortunately pineapples are not within our set now if I was to use the index operator of my set this is what would happen we have an error set object is not subscriptable we're not able to use indexing on a set because they're unordered much like what we can do with a list or a string we can't change the values of a set but we could add or remove elements let's use the add method to add guess what a pineapple that is okay orange Apple pineapple coconut banana we can remove an element fruits dot remove D let's remove our Apple our apple is gone coconut orange banana pop the pop method will remove whatever element is first but it's going to be random though orange coconut banana Apple coconut banana apple banana coconut you can clear fruits dot clear the elements of our set are gone those are a few of the more useful methods for beginners as a summary a set is a collection that is unordered and immutable you can't change the values but adding and removing elements is okay no duplicates are allowed let's try that real quick I'm going to add a second coconut yeah see we only still have one coconut sets may work well if you're working with Constance maybe colors for example you need to find if a color is within a set all right now lastly let's talk about tuples a tuple is a collection that is surrounded with a set of parentheses tuples are ordered and unchangeable duplicates are okay one benefit of a tuple over a list is that tuples are faster than lists if you're working with a collection and it's okay if the collection is ordered and unchangeable you might as well use a tuple because it's faster when I print our Tuple all of these values are surrounded with a set of parentheses again we have the dur function to display the attributes and methods there's not as many for a tuple for methods we only have count and index again there's also help to display a description of these attributes and methods you can find the length of a tuple with the length function we have five elements within here using the in operator we can find if a value is found within our Tuple our pineapple is not within our fruits so there's only two methods we have access to let's find the index of Apple fruits.index Apple then I will print whatever is returned apple is found at index 0. there is also count fruits dot count how many coconuts are found within our Tuple fruits count the Coconuts then print this how many coconuts we have two coconuts and then again with any of these collections they're iterable so you can iterate over them using a for Loop for fruit and fruits yep Apple orange banana coconut coconut all right everybody so those are collections think of them as a single variable used to store multiple values there's four general purpose collections for beginners lists sets tuples and then dictionaries which we'll talk about next each of them has unique benefits lists are ordered and changeable duplicates are okay a set is unordered and immutable but adding and removing elements is okay no duplicates allowed a tuple is ordered and unchangeable duplicates are okay and they are faster than lists use tuples if you can over a list but yeah those are a few collections in Python"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Lists and Tuples in Python",
        "Video Title":"Python Tutorial for Beginners 4: Lists, Tuples, and Sets",
        "URL":"https:\/\/www.youtube.com\/watch?v=W8KRzm-HUcc",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/W8KRzm-HUcc\/hqdefault.jpg",
        "ID":"W8KRzm-HUcc",
        "Publish Time":"2017-05-17T17:00:03Z",
        "Channel":"Corey Schafer",
        "Channel ID":"UCCezIgC97PvUuR4_gbFUs5g",
        "Transcript":"hey there how's it going everybody in this video we'll be learning about lists tupal and sets in Python now lists and tupal allow us to work with sequential data and sets are unordered collections of values with no duplicates and we'll look at all of these to see exactly what that means so first let's look at list and we're going to spend a majority of the time on list just because it has a lot more functionality than the other data types so just like the name implies it allows us to work with a list of values so for example let's say that I wanted a list of courses so I could create a variable here called courses and to create a list we're going to use these square brackets and Within These brackets we put each value that we want separated by a comma so for example let's say that we wanted a list of courses so I'll say history and math and physics and also lastly we'll put in compy so now if we print out this list so I'll print out courses and run that then we can see that it prints out our entire list now if we wanted to see how many values are in our list then we can get this by using the Len function which stands for length so if instead we print out the length using Len of courses and run that then you can see that it says that we have four values in our list and we can access each of these values individually so first let's go back to just printing out our list and running that so now to access the values in our list we can use square brackets after our list and pass in the location of the value that we want so we can put in square brackets and this location is called an index and it starts at zero so to access the first value of our list we can access uh the location at index0 if I print that then we can see that we get history now since the length of our list is four that means with the first value starting at index zero then the last value will be at index three so it's our total length minus one so let's say I wanted to grab the last value for my list which is compy I could count these indexes out and see which one should be able to access it so 0 1 2 and three the third index so if I print out courses three and access that index of three and run that then we can see that we printed out compy now we can actually use negative indexes too and negative indexes will just start from the end of the list so since zero is the first item of our list I can also get the last item of our list using a negative one so if we print out courses uh index of -1 and run that then we can see that we got compi again which is the last item it's more convenient a lot of the time using a negative one to get the last item because we don't have to worry about what the link length of the list is so for example if my list grew by 10 items then the third index would no longer be the last item but the negative -1 will always be the last item and also if you accidentally try to access an index that doesn't exist then you'll get an index error so in this example if we tried to access an item at index 4 and run that since there is no index 4 you can see that we get this list index out of range now instead of only grabbing one value we can also access a range of values so if I wanted to grab the first two values from this list then I could say that I want to access starting at index zero and go to but not including index two so this first index is our starting point and the second index which is separated by this colon is the stopping point now one thing that's a little confusing is that the first index is inclusive but the second index is not and there's good reasons for that but it's easy to forget so what we're saying here is that we want all of the values between the beginning and up to but not including the second index so if we run this then we can see that it printed out history and math because it printed out zero and one all the way up to two but not including two which is physics now since our first index here is just the start of the string we can actually just leave that off and it'll assume that we want to start at the beginning so if we said print the courses with nothing there colon 2 and run this then you can see that we get the same result because it just assumed that we wanted to start at the beginning now if we just wanted to grab physics and compi from this list then we can say that we want to start at index 2 and then put in our colon and now just like our starting index if we don't put anything here then it's going to assume that we want to go all the way to the end of the list so if I run this then you can see that it printed out physics and compi because it started at our second index which is physics and just went all the way to the end now what we're doing here is called slicing and if you'd like to learn more about slicing in depth then you can watch my detailed video on that which shows you how you can skip values go in reverse and things like that and I'll leave a link to that video in the description section below okay so let's look at some list methods that we have available to us that allow us to modify our list so first let's say that we wanted to add an item to our list there are a couple of ways we can do this so first if we just wanted to add an item to the end of our list then we could use the append method so let's say that we want to add art to our courses so we can just say courses. append and we want to append art so now if I remove this slicing and just print out our course's list and run that then you can see the art was appended here to the end of the list now if we wanted to instead add art to a specific location in our list then we could instead use the insert method now insert takes two arguments first it takes the index where you want the to insert the value and then the value itself so if I wanted to insert art to the beginning of our list then we could say courses. insert and now the first argument is the location so let's just say location zero which is the beginning and then the value that we want to insert which is Art so if we run this now we can see that art was inserted at position zero now that only inserted the value it didn't overwrite anything so you can see that all the other courses are still here but they just got shifted now another way of adding values to our list is using the extend method now sometimes this confuses people so let's look at what this does so we want to use extend when we have multiple values that we want to add to our list so for example let's say that we have another list here called courses 2 and we'll set this equal to another list uh with art and education in this list and we want to add these values to our original courses list so first let's see what happens if we use this insert method so instead of inserting art to the beginning of our list let's instead insert these courses to the beginning of our list so let's go ahead and run this so we can see that at the beginning of our list that it actually added the entire list of courses to and not each each individual value so we can actually have a list within a list like we have here so if we were to print the first value of our courses list so I'll print out the index of zero and run that then we can see that now the first value is actually this list itself but this isn't really what we wanted we wanted to add all of those values from our second list to our original list now that is why we use the extend method so let's go ahead and set this back to the way was to just print the courses now instead of inserting here we'll instead use extend and it only takes one argument which is the iterable so we will extend courses with courses to so now if we run this then we can see that when we did courses. extend with courses 2 that it added the values from our second list uh here to our original so a lot of people get that mixed up with append and extend so again uh if you were to append it just like with insert then it's just going to append the list itself on there instead of the each individual item so if we use extend then now we can see that each individual item is extended onto that list okay so now let's look at how we can remove some items or remove some values from our list now one way to remove values is to just use the remove method so if we were to say courses do remove then let's say that we wanted to remove math so if we save that and run it then we can see that math was removed from the courses list now there's also a way of removing values with this pop method so if we say courses. pop Now by default this will remove the last value of our list now this is useful if we want to use our list like a stack or a CU so if we run this like it is then we can see that comp I was popped of off of our list and now we just have these three courses now one other thing about pop is that it Returns the value that it removed so we can actually set a variable uh and grab that returned value so if I set a variable here and say popped equals courses. poop and then I was to print this above our courses here and run that then we can see that it grabbed that compi value that was popped off of the list so if you had a or a queue then you could go through and just keep popping off values until your list is empty okay so now let's look at how we can sort our list in a couple of different ways here so first of all let's say that we just wanted to reverse our list as it currently is now this is pretty easy so we can just use the reverse method so I I can say courses. reverse and if we run this then we can see that now it prints out our uh courses but in Reverse so the last item all the way up until the first item now instead of reversing our list what if we wanted to sort our list now sorting is just as easy we can just use the sort method so I'll save that and run it and you can see that now our list is sorted in an alphabetical order so compi history math physics now if our list contained numbers then it would sort those in ascending order so let me call uh create another list here of numbers I'll just call that nums I'll set this equal to some random values so I'll say 1 5 uh 4 and three and we'll save that now below courses we will just say nums do sort and we will also print these out so I'll grab that variable print those out and run that so now we can see that our strings were sorted alphabetically and our numbers were sorted in ascending order now what if we wanted our values sorted in descending order now one way you might think to do this is just to use our reverse me method on the list after they're sorted and that would work but there's an easier way to do this uh instead we can just pass an argument to our sort method called reverse so if I come up here to the sort method and I pass reverse is equal to true and let me also grab this for our num sort and if I run this you can see that now these sorted are in descending order they're sorted in reverse order now one thing to notice here is that we don't need to reset our variables when we call most of these methods it's just altering the list in place but there's also a way that we can get a sorted version of our list without altering the original list so what if we wanted a sorted version of our courses list without uh altering the original so to do this we can use the sorted function so instead of calling this sort method on our list we'll instead use this sorted function and I'll pass courses in to sorted there now if we run this as it is then we can see that our list is not sorted it's exactly how uh we described it up here now that's because the sorted function doesn't sort the list in place it returns a sorted version of the list so to get that sorted list we have to make a new variable and set it to the return value of the sorted function so I could just call this sorted courses is equal to the sorted version of that course's list and now if we copy that and print that out so now we can see that this sorted courses is equal to the sorted version of that list so that's really useful because a lot of the times you won't want to alter your original list in any way um so using this sorted function is a nice way to get a sorted version of that list without altering the original and other than this sorted function there are a couple more useful built-ins uh that we can use with these SE quences so let's look at a few of these so we'll look at min max and sum so it's probably pretty obvious what these will do but if I wanted the minimum value of our numbers list here then let me comment out where we're printing out nums so a built-in function that we can use is just men and call men on our sequence of numbers and if I run that then you can see that it return returns one as the minimum number of that list and if we wanted the max value of that list then we could use Max and if I run that you can see it returns five um now if we wanted to print the sum of that entire sequence that I can just say sum of numbers if I print that then it gets 15 because 1 + 5 + 2+ 4 + 3 is equal to 15 okay so lastly let's see how we can find some values here within our list so let me go ahead and clean up here a little bit and uncomment out that so if we wanted to find the index of a certain value then we can use the index method for this so if I wanted to find the index of compi in our list then we could just print out courses. index and then search for compi now if we run this then we can see that we got three and three is the index where it found that compai value now if we try to find the index of a value that doesn't exist in the list then we'll get a value value errror so if we search that original list of courses for art and run that then we can see that we got a value error and it says art is not in the list now if we just wanted to Simply check if the value was in our list and simply get back a true or false result then for this we can use the in operator so if I wanted to check if art is in our list then I could say art in courses so if I run that and we can see that we got false but if instead we said math in courses and ran that then that returned true now this is going to be especially useful once we go over the topic of conditionals and if else statements and we're going to go over those in a couple of videos and we can also use this to Loop through values of our list by using a for Loop so if I was to say four item in courses and then scoot that over then we will just print out that item now this is the first time in our series that we've indented a block of code basically what we're saying here is that we want to create a loop We're looping through each value of our list and each Loop through this item variable will be equal to the next item in the list so that's why this line is indented because it tells us that this code is executed from within our for Loop so if we run this then we can see that it prints out each item of our list now the reason it prints them all out on a new line is because by default the print statement goes to a new line each time it's executed now this item variable is just a variable it's not a keyword or anything we can name this anything we want so instead if we wanted to you know call this course for course and courses and print that out then you can see that we get the same result so we can access each value as We're looping through but sometimes it might be useful to also have the index of what value were on Now to do this in Python we can access the index and the value by using the enumerate function so I will say enumerate and I will wrap courses within that enumerate function and this enumerate function returns two values it Returns the index that we're on and the value so instead of just getting the course here we're also going to need to get the index so I'll call that index so for index course in enumerate courses and now if we print out that index and the course and run that then you can see that we had access to each index and value as We're looping through our list and if we don't want to start at zero then we can pass in a start value to our numerate function so if instead we wanted to start at one then I can pass in the second argument say start is equal to one now if I run this then you can see that now our starting value is one okay so there is one one more thing that I want to go over before we move on to tupal and sets so it's pretty common that we'll want to turn our list into Strings separated by a certain value now to do this we're actually going to use a string method called join and we're going to pass in our list as the argument so for example let's say that we wanted to turn our list of courses into a string of comma separated values so we can say course string and that will hold the string version of our courses and now we'll type the string that we want to separate each item of our list so I want these to be comma separated so I'll put in a string of a comma and a space and then I'm going to use the join method to join the values of the list using this string so I'll say dojin and I want to join my courses on that string so now if I come down here and print that string version of our courses and run that then we can see that we get our values comma separated and if we want to change this then we can just change our string within uh that we're joining on so if we wanted to hyphenate these then I could just change this to space hyphen space and run that and you can see that when we ran that now we're separating these by The Hyphen so this is just one long string with all of our list values joined together now we can also do the reverse of this and turn a string back into a list so we can do this by splitting our string on a certain value so if I split the string that that we just created so let me create a new list here and I'll set this equal to the string version of our list and I'll do a DOT split and I'll split it on a space hyphen space so if we look at the string version that we have down here this is just one whole string what that's saying is it's saying hey split up all of these values on this space comma space and make a list out of all those values that you get so now if we print out our new list so I'll print that new list and run that and you can see that now we're back to the original list okay so I know that that was a lot to take in because there's so much that we can do with list but now let's move on to tupal and sets um now that we're familiar with list then these will probably go pretty quickly okay so tups are very similar to list but with one major difference so we can't modify tupal now in programming this is called mutable and immutable so list are mutable and tuples are not they are immutable so let's look at what this means so I'm going to grab a quick snippet of code here from my Snippets file uh just to compare these so I'm just going to grab from here all the way down to here and just go ahead and paste those in so first we have a regular list here that we've already looked at and we're going to look at one issue that you might run into with mutable objects so what I'm doing here is I'm creating our list of courses and I'm calling this list one and then we're creating another variable here called list two and we're setting that equal to list one and then we're printing out both of these so if I run this then we can see that both list one and list two have the same values so now let me uncomment out this code where we're changing a value in the first index of list one and then reprinting our values again so now if I run this then we can see here that all we did was change the value at the first index of list one but by changing list one's first value it also changed list two and the reason for that is because they're both the same mutable object now if you need to modify your list then this mutability is what you want but if you want a list of values that you no aren't going to change then we can use a tuple so let's look at a tupal example so I'm going to Common out our mutable example here and then uncommon out our Tuple example so a tupal looks almost exactly like a list but instead of the square brackets we're using instead using these parentheses and after we create our tupal we're doing the exact same thing we're calling a uh creating a variable Tuple one that is a tuple and then we're setting this Tuple two equal to Tuple one and for now I'll just comment out where we're changing that first value and I'll run that and you can see that both of these tupal are equal to the same list of values but now if we try to change that value at the first index of Tuple one just like we did with our list if we run that then we can see here that we get an error and it says type error Tuple does not support item assignment and that's because it's immutable um so now since a tupal is immutable it doesn't have nearly as many methods as a list because a lot of those list methods that we looked at involved mutating the values so we can't append we can't remove anything or anything like that but other than that they behave pretty much the same we can Loop through tupal we can access values and all the other things that we've already seen except for what mutates the list so that's basically the difference between list and tupal um if you need something that you can modify then use a list but if you just want something that you can Loop through and access then you might want to think about a tupal so that you don't run into the issues that we just saw okay and lastly let's look at sets now sets are values that are unordered and also have no duplicates so let me grab a sample from the Snippets file here um that we can see so I'm just going to go ahead and grab this small snippet and paste that in so we can see that this looks similar to lists and tupes but instead of the brackets or parentheses we're we're instead using these curly braces now if I run this code to print this set out then we can see that it prints out the values but if you notice here these aren't in the order that we added them so we had history first here and it has history last down here and if I run this a couple more times then we'll see that you know this order can change with each execution now the reason for this is because unlike our lists or tupal sets don't really care about order because some of the main uses for a set is either to test whether a value is part of a set and also it's used a lot to remove duplicate values because sets throw away duplicates so first let's look at how to get rid of duplicates so if I add another Math course here to the end of our set and now if I rerun this then we can see that we still only have four courses it got rid of that second Math course and just left us with the one now another thing I mentioned was that it's used to test whether a value is part of a set now this is called a membership test so sets do this a lot more efficiently than list and tupal so what I mean by this is that within our print statement if I was to say um math in CS courses and I run that then when you can see that it prints out true now we could do that with list and tups also but sets are optimized for this okay and lastly something else really useful that sets can quickly do is determine what values they either share or don't share with other sets so for example let me create another set called Art courses and I'll create this pretty similar to CS courses here um but instead of physics and compi I'll instead say Art and Design and with both of these I'm going to go ahead and take out that extra uh math on the end just so it's a little bit more clear and instead of this being CS courses I'm going to call this set art courses so now we have two different sets here and some of them have different courses and some of the courses are the same so let's say that I wanted to see what courses these sets had in common so to do this we could use the intersection method so we can say CS courses. intersection and we will pass in the art courses into that so if we run that then we can see that it shows us that the history and math coures are in both of those sets and if I wanted to see what courses are in the Cs courses but not the art courses then I could use the difference method so instead of intersection I will instead say difference so if I run that then now we can see that it shows that the uh physics and compsite courses weren't in the art courses now if I wanted to combine both of these sets and print all of the courses offered then I could use the union method so so I'll say CS courses. Union and we want to Union with the art courses so if I run that then we can see that now we get all of the courses printed out from both sets so sets can definitely be useful for these kinds of use cases and for these particular problems they're much more performant than lists or tupal okay so we are basically finished up with this video but let me show you one last thing before we close this out and that's going to be how to create empty list tupes and sets so I have these over here and my Snippets so let me grab these real quick and copy and paste these over here and bring this down a line so I wanted to show this because there's a small gotcha when it comes to creating an empty set so to create an empty list we can either set it equal to empty square brackets or we can use this built-in list class and to create an empty tupal we can use these empty parentheses or this built-in tupal class now to create an empty set we actually can't use these empty curly braces um so this line right here is wrong that's not an empty set this is actually going to create an empty dictionary so to create an empty set the way to properly do this is to use the built-in set class with no values and speaking of dictionaries that's actually what we're going to cover in our next video but I hope everyone feels comfortable now with working with lists and tupal and sets but if anyone does have any questions about about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Lists and Tuples in Python",
        "Video Title":"Python Lists vs Tuples: Their Differences Explained in 5 Minutes",
        "URL":"https:\/\/www.youtube.com\/watch?v=RaRjZcvbUKE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/RaRjZcvbUKE\/hqdefault.jpg",
        "ID":"RaRjZcvbUKE",
        "Publish Time":"2021-01-25T14:00:08Z",
        "Channel":"Coding with Estefania",
        "Channel ID":"UCng0h8WiHLmT57JJ8At4LfQ",
        "Transcript":"hello everyone we are going to check out the differences between liz and tuples in this video so let's begin we're going to cover the syntactic differences between lists and tuples how they are written in the program and the functional differences what makes them different in terms of their functionality within the program let's start with the syntactic differences the main difference that you're going to see visually between these two data structures is how they are defined lists are defined using square brackets and tuples are defined using parentheses so whenever you see something like this this is a list defined with square brackets surrounding the elements but with a tuple we will find parentheses surrounding the different elements and that is how you can distinguish them visually now functionally they do have a very important difference that will help us choose which one we should use in our program first of all lists are mutable this means that they can change after they have been defined in the program so we can modify them add elements and remove elements from lists let's see this in action if we go to pycharm and we define a list in our program let's say a list called numbers and we define that using square brackets let's add the numbers two three four and five and six and within we try to update a value at a particular index of the list let's say at index 1 which corresponds to this value right here and then we print the value of the list let's print the value before we make the change and after we make the change so we can see the difference before making the change the list will have this sequence of elements but after we make that change the list will be different at index 1. let's run the code and see what we get we can see this change right here we see the original list and then the list after we made the change at index 1. the number 3 was replaced by the number 6 and we did that just by writing this line so the data in our list can be modified and we can also modify the list itself let's say that we want to add a particular element to the list we can call the append method and that will add the element that we pass within parentheses numbers the name of the list dot append and the element let's save the file and run the code and see the change now we see the list and after we make that modification we see the list with a new element added to the end the number 15. so that confirms that lists are immutable so they can be modified after they are defined in the program we use them for specific applications where the data has to be modified or where we have to add and remove elements dynamically in the program in contrast tuples are immutable and this means that they cannot change once we define a tuple that content has to remain exactly the same for the duration of the program unless we create a new tuple in memory but that is a different story the basic difference is that they are immutable let's see this in action if we go to pycharm again and we want to write a sequence of elements that should not be modified for example let's say that we have a program that needs access to the seasons represented as strings so let's start summer spring winter and fall okay so we have the four seasons and we are surrounding them with parentheses so we're making a tuple let's print the tuple to confirm that the elements are correct we see this value printed right here as the output but what if we need to modify one of these elements let's see what happens if now we try to modify a tuple the element at index 1 is a season spring so let's say that we made a mistake or something like that in our program and we try to change that value to winter we will have in that case a repeated season and that could affect the program tremendously but since we are using two polls let's see what happens if we print the value of the tuple after writing this statement you can see this right here and what is that error specifically well that the tuple object does not support item assignment when we try to assign a value to the tuple to modify the content of the tuple at a particular index we cannot do that because tuples are immutable whenever you see this error does not support item assignment then you are working with an immutable data type in python we cannot modify it and we cannot add elements to a tuple we can only concatenate tuples or join tuples to make a new tuple but we cannot modify the original tuple in memory and those are the basic differences between list and tuples if you like this video subscribe to my channel and check out my other videos linked right here i'll see you there"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Lists and Tuples in Python",
        "Video Title":"Lists &amp; Tuples in Python (How to Use Them Effectively?) #15",
        "URL":"https:\/\/www.youtube.com\/watch?v=hANUgg72TDc",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/hANUgg72TDc\/hqdefault.jpg",
        "ID":"hANUgg72TDc",
        "Publish Time":"2020-10-09T10:15:02Z",
        "Channel":"Programiz",
        "Channel ID":"UCREFp3D_n8JfcDonlm7Mpyw",
        "Transcript":"what's up guys i'm puneet from programmers and welcome back to the series on python so far in this video series we have mostly used simple data types like int float and bool python also offers a range of compound data types that allow us to work with multiple items at once in this video we will learn about two compound data types lists and tuples lists in particular is one of the most commonly used and most versatile data types in python as you will see in this video so let's get started [Music] let's learn how to create a list we'll start with the list data type in python a list is a sequence of items in an order we create lists by placing items inside square brackets separated by commas now it's not necessary for a list to have all of the items of the same type like this we can also create a list having mixed data types and it may also contain duplicate elements let me show you so here i'll say mixed list and then i can say random list equals something like 2.5 let me add in a string called hello and say a negative integer like minus 5 and i can also repeat a number like 2.5 this list that i have stored in the random list variable has four items a float a string an integer and again the same float we can also create lists that do not have any items like this so here i can say empty list and i can say list one equals just the square brackets without any items in between and let me print it out to see what i get now when i press run then i can see that numbers list is printed having four elements and the list one is an empty list that's printed here since there are no items inside list one it's an empty list the size of an empty list is zero to check it we can use the built-in lend function let me remove the mixed list first and then i'll wrap the numbers list and the empty list list 1 to see what i get now when i press run then i get 4 and 0 which are the lengths of the numbers list and list 1 respectively now let's learn how to access list elements a list is a sequence and its items are always in order suppose we have a list of programming languages like this so i'll say languages equals python javascript c plus plus and kotlin now let me print the languages here i'll say print languages and when i press run then you can see that python javascript c plus plus and kotlin are printed so the first item in this languages list is python the second language is javascript the third one is c plus plus and the last one and the fourth one is kotlin we can access individual items of list by using something called index and it starts from 0 so the index of the first item is 0 of the second item is 1 of the third item is 2 and so on now suppose we want to get this first item python to get this item after the name of the list i will type square brackets and inside those square brackets i'll put 0 because i want to access the first element now when i run it then i get python similarly to get c plus plus we need to use index 2 because it's the third element of the list so i'll replace 0 by 2 because i want the third element and when i press run then this time i get c plus plus this languages list we have been working with has four items can you guess what will happen if we try to access the fifth item using four as an index why don't we try it in our code and see it for ourselves so i'll index i'll change index 2 to 4 and now when i press run then python tells me list index out of range this error message means that we are using an index that does not exist because the fifth item doesn't exist now let's talk about negative indexing in python we can also use negative indexing for sequences like lists using a negative index gives us items from the last so minus 1 gives us the last item minus 2 gives us the second last item and so on i have this languages list we have been working with on the screen let me change index to -1 and run it so here i'll say minus 1 and when i press run then i get kotlin which is the last item in the list similarly we can get javascript using -3 because it is the third element from the last now when i press run then i get javascript this time as you can see negative indexing is pretty useful when we need to access items from the last because we do not even need to know the size of the list before moving to the next section of the video i'd like to mention that the program is team has created an app that allows you to learn python from your phone the app contains bit size lessons that are easy to understand a built-in interpreter so that you can run python on your phone quizzes and many more features the app is available on both ios and android the links are in the video description below now let's learn about slicing of a list we learned to access an individual item from a list in the last two sections it's also possible to access a whole section of items from the list not just a single item let me give you an example i have the same code that we have been working with on my screen i'll remove the minus three index to access the third last item now let me access the first three items from the list so i'll use zero column three let me run this code this time i get the first three items of the list on the screen if you've been following along that means the items having index 0 1 and 2 were printed the thing you need to remember with slicing is that the first index is inclusive and the last index is exclusive so 0 colon 3 that means 0 column 3 will give me 0 1 and 2 index which are the first three elements of the list now let's try to get the second third and fourth items since the starting index is inclusive we need to use index 1 to get the second item and the end index is exclusive so we need to use 4 as the end index using 4 will give us items up to the index 3 which is technically the fourth item i'll press run and as expected the second third and fourth elements are printed to the screen let me tell you an interesting fact if we use the empty start index the slicing starts from the beginning of the list so here i'll try something like colon3 and when i press run then i get the first three elements this means that just leaving the first element open or empty is equivalent to putting zero in front so when i press run i get the same result as before similarly if we use the empty end index the slicing ends at the last index so here i'll remove this and i'll say i want to start from one and i don't know and and i want to go to the end so when i press run then the slicing starts from the one index and is it goes up to the end of the list that means kotlin should be included in the slice by the way we can also use negative indexes during slicing if you are interested you can check out our website programming.com to find more information about it now let's learn how to change items of a list lists in python are pretty dynamic it's super easy to add modify and delete items of a list the term we use for these kinds of changeable objects is mutable so we can say that lists are mutable objects let's see how we can change items of a list i'll start with the same programming languages list we have been working with now let me change the second element from javascript to ruby it's pretty easy in python to do that we just need to assign ruby to the second element like this so here i'll say languages 1 equals ruby and after this if i print languages and press run then now i can see that the second element which was javascript has now been changed to ruby if you don't know then ruby is a popular programming language we can also change the portion of the list in a single statement i'll modify the code i had written where i changed javascript to ruby but this time i will change the second and third item of the list in one go here i'll say languages 1 column 3 equals list of ruby and dart now when i press run here i have access the second and third items which are javascript and c plus plus using the slicing operator column and then modified them by putting the new values ruby and dart in their place that is why the elements that were in present in index 1 and 2 are now ruby and dart now let's learn about iterating through a list before we learn to iterate through a list let's learn about the in keyword the in keyword is used to check whether an item is in the list or not i have this languages list from before now let me check if python is in the list or not here i can say print python in languages the python in language statement prints true because python is in the languages list let me run this code now the python in languages statement prints true because python is indeed in the languages list let me change python to rust and run the code so here i'll say rust in languages and when i press run this time i get false because rust is not in the languages list this can be helpful when we want to check whether an item is present in a list or not we can use this as a test condition in an if statement for decision making we can perform one set of tasks if an item is in the list and another set of tasks if the item is not in the list if you want to get individual items of a list one by one the easiest way to get them is by using a for loop we've already discussed them in the previous videos but let me revise it again here i'll remove the print statement and i'll add a loop so i'll say for language in languages and then i'll say print language this for loop iterates through elements of the list one by one until the end of the list is reached i'll press run and as you can see all four programming languages are printed here one by one this language variable is python in the first iteration javascript in the second iteration and so on and that is what we have printed inside the body of the loop if you want to learn more about the for loop in detail check out our python for loop video the link will be in the description below now let's learn about list methods the reason lists are so versatile is because it's so easy to add change and remove elements from it suppose we have the same languages list we have been working on in this video now let's say we want to add an item to the list we can use the append method to do this this method is already available when we work with list let's say we want to add rust to our list we can just say languages dot append rust so remove this old code and i'll say languages dot append rust and now if i print languages and press run then you can see rust is also included in the languages list let's say instead of adding rust in the end we want to insert it in the second position we can use the insert method for that so i'll replace this append and i'll say insert and because i want to insert it in the second position that means the index one and when i press run then now i can see that the rust programming language has been appended in the second position which is the index one now let's learn how to remove items from a list by removing c plus from our list using the remove method so i can just say languages dot remove c plus plus and now when i press run then i can see that c plus plus has been removed from the list sometimes you might have to create a copy of a list to copy a list we can use the list copy method so here i'll remove this old code and i'll say languages 1 equals languages dot copy and instead of languages if i print languages one then i can see that i get the same programming languages list that i had before the languages dot copy returns a new list and it is assigned to the languages one variable there are many more list methods readily available for use that make working with lists very easy you can find all the list methods and how they work with examples in our websiteprogrammings.com i will also include the link to the list methods page of our website in the video description now that we have covered lists let's talk about tuples or tuples as some people like to call them a tuple in python is similar to a list it's also an ordered collection of items the only difference between the two is that lists are mutable that is we can change elements of a list whereas tuples or tuples are immutables we cannot change the tuples elements to create a tuple we need to wrap items inside parentheses and these items should be separated by commas so let me create a new tuple i'll say numbers equals parenthesis 21 5 6 and 9 and then i'll print the tuples as print numbers let me quickly run this and you can see that tuple is printed we can access elements from a tuple in a similar way we access elements from a list accessing elements from a tuple is possible as long as we do not try to change the value so here i'll say new numbers 2 and when i press run then i get the element in the second index or the third element we can also perform slicing similar to list so here i can say 1 colon 4 and when i press run then i get elements from index 1 to index 3 which is the fourth element like in a list the first index is inclusive and the last index is exclusive we can also loop through a tuple using a loop so here i'll remove this whole code and i'll say for number in numbers and i can say print number now when i press run then i get all the numbers all the things that we have learnt till now about tuples is similar to that of lists now let's see how tuples are different from list as we have mentioned the difference between tuple and list is that the list can be changed but tuple cannot be changed let's see that in action i have this tuple that contains the same programming languages from before let's try to change its first element from python to java so here i'll say languages 0 equals java let me also print the languages here i'm trying to assign java to the first element let me run this code we get an error type error tuple object does not support item assignment this error message is telling us that we are trying to change an item of a tuple by assigning it a new value but it's not allowed with tuples we also cannot add and remove items from a tuple because unlike lists tuple doesn't have methods like append insert and remove so if we are sure that our sequence won't change till the end of the program it's better to use tuples instead of lists if you are interested you can find more information about tuples and tuple methods on our website programmings.com i'll include links to some relevant articles in the video description before we end this video here's a little task for you can you guess the output of this program that you see on your screen i'll give you a couple of seconds to pause the video as always you'll find the answer to this question in our github repository i'll also include this link in the description below we have covered a lot in this video let's have a quick recap of what we learned a list is a collection of ordered items to access individual items of a list we use indices python indexing starts at zero there is also a concept of negative indexing in python this is used to access elements from the last we can access a portion of a list by using the slicing operator column we can use loops to iterate through items of a list python has several useful methods that make it easier to add change insert and remove list elements finally we learned about tuples a tuple is similar to a list except tuples are immutable we cannot change elements of a tuple that's it for this video i hope you learned something if you're just watching the video without writing any code i highly encourage you to try the programs in this video on your own the only way you can be a good programmer is by trying by the way you can find all the programs from this video on github i have posted the link in the description below feel free to copy the programs and edit them as you please and if you have any questions and feedback use the comment section below in the next video we will learn about another collection data type strings in detail join me in this video series and let's explore the exciting world of programming together if you like this video hit the like button now and also don't forget to subscribe to our channel and ring that bell icon so that you don't miss the next video thanks for watching and i'll see you in the next one happy programming"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Dictionaries and Sets in Python",
        "Video Title":"Python dictionaries are easy \ud83d\udcd9",
        "URL":"https:\/\/www.youtube.com\/watch?v=MZZSMaEAC2g",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/MZZSMaEAC2g\/hqdefault.jpg",
        "ID":"MZZSMaEAC2g",
        "Publish Time":"2022-11-10T15:14:33Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey everybody in today's video I'm going to explain dictionaries a dictionary is one of the four basic collection types for beginners a dictionary consists of key value pairs they are ordered and changeable no duplicates allowed a few examples of key value pairs could be an ID and a name an item and a price but in today's example we'll create a dictionary of countries and capitals let's name our dictionary capitals capitals equals in close your dictionary with the set of curly braces much like what you do with sets the first country will be the USA to add a value to this key type colon then some other value the capital of the USA will be Washington DC separate each key value pair with a comma then we can add another key value pair so the capital of India that will be New Delhi we'll add two more China the capital is Beijing Russia the capital is Moscow I think that's good enough just as a reminder if you would like to see all of the different attributes and methods of a dictionary you can use the Der function pass in your dictionary capitals then we'll need to print this here's all the different attributes and methods of a dictionary if you would like an in-depth description of all these attributes and methods you can use the help function uh that's herp help there we go so yeah that's just a reminder all right let's go over a few of the methods two get one of the values from a dictionary you would get the key type the name of the dictionary capitals dot get let's get the capital of the USA then we'll print it the value associated with this key the USA is Washington DC if I picked a different country like India well then we would get that Associated value which is New Delhi another thing if python doesn't find a key this is what will be returned let's get Japan which is not in our dictionary this method would return none we can use this within an if statement if capitals dot get Japan if a value is returned then we will print that Capital exists else we will print that capital doesn't exist so Japan is not in our dictionary that Capital doesn't exist but Russia is that Capital does exist that's how to check to see if a key is within our dictionary you can use the get method All Right Moving On Let's update our dictionary capitals dot update So within a set of curly braces I will add a key then a value Germany followed by Berlin then let's print our dictionary I'll use a print statement print capitals yeah and there's Germany right there using the update method we can insert a new key value pair or update an existing key value pair let's also change one of the existing values with our key USA let's update the capital to be Detroit yeah see the value has been updated the capital of the USA is now Detroit Michigan to remove a key value pair you can use the pop method then pass in a key let's remove China no longer exists within our dictionary it's gone you can remove the latest key value pair within a dictionary by using the pop item method capitals dot pop item with pop item you don't need to pass in a key pop item will remove the latest key value pair that was inserted then we have clear capitals dot clear that will clear the dictionary it's pretty self-explanatory the next few methods are a little tricky to explain to get all of the keys within the dictionary but not the values there is a keys method capitals dot keys I think I'm going to insert this within a variable Keys equals capitals dot Keys let's see what happens when we print this the keys method will return all of the keys within our dictionary technically Keys is an object which resembles a list I haven't discussed object oriented programming yet this is a little bit above our level if you ever need the keys in a dictionary you can use the keys method one use is that we can use that within a for Loop they're iterable for every key in capitals dot Keys method let's print every key if at any time you need to iterate over all the keys you can use a for Loop to iterate over every key that is returned from the keys method of your dictionary there's also the values method to get all of the values within your dictionary there is a values method values equals capitals dot values method then let's print our values like before with the keys method the values method will return an object which resembles a list let's iterate and print over every value within our dictionary for every value in capitals dot values print every value here are all the values within our dictionary this next one is probably the most tricky it is the items method capitals dot items I will assign what is returned to a variable named items then we will print items items returns a dictionary object which resembles a 2d list of tuples it's really complicated how might this be useful this time we're going to use a for Loop to print every key comma value in capitals dot items method we have in essence two counters this time I will print using an fstring every key value pair I will print every key as well as every value in our print statement so there's our dictionary laid out we have iterated over every key value pair it's kind of an advanced topic but I thought I would at least bring it up now so yeah that's a dictionary everybody it's a collection of key value pairs they are ordered and changeable no duplicates allowed you have a bunch of different methods such as get update pop pop item clear then you can get the keys the values or both which is the items method we'll be using dictionaries in a few game programs we'll be making in the future and well yeah those are dictionaries in Python"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Dictionaries and Sets in Python",
        "Video Title":"Python Dictionaries and Sets for Beginners | Python tutorial",
        "URL":"https:\/\/www.youtube.com\/watch?v=zdVdqTLk8O0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/zdVdqTLk8O0\/hqdefault.jpg",
        "ID":"zdVdqTLk8O0",
        "Publish Time":"2023-03-28T13:00:45Z",
        "Channel":"Dave Gray",
        "Channel ID":"UCY38RvRIxYODO4penyxUwTg",
        "Transcript":"[Music] hello and welcome I'm Dave today we will learn about python sets and dictionaries and I'll provide links to all resources in the description below I've got Visual Studio code open and I've got a new folder over here in the file tree for lesson seven let's create a new file let's call this dictionaries and after that we'll end it with a dot py dot pi and then let's open a terminal window with control in the back tick you can see mine opens here at the bottom but I'm going to choose View and then go to appearance go to panel position and choose right so it's over here on the right finally I'm going to press Ctrl B to hide the file tree so we have our code here on the left taking up all of that part of the screen and on the right is where we have our terminal window today we're talking about python dictionaries so I'll just put dictionaries here at the top and really dictionaries are used to store data values that are in key value Pairs and you'll see what I mean and just like when I accidentally called python lists arrays a few times python dictionaries look a lot like JavaScript objects and so I may accidentally refer to them as objects when I'm talking but if I do it's unintentional because we're talking about python dictionaries so let's look at an example I'll set ban and equal to a dictionary and they have curly braces and here's the key I'll say vocals and then I put a colon and after that I put the value so I'll say plant now I'll put another key and here I'll say guitar and then I'll put the value and I'll say page so that is a python dictionary and of course you could have more key value pairs it's not limited to two you could make a large one if you want to as well and it can be different data types it doesn't just have to be a string as the value now here I typed out this dictionary let me create a second dictionary that has the same values but I'm going to use the Constructor function for a dictionary so I'll call this band 2. I'll set this equal to the Constructor function which is d i c t then use parentheses and then I'll say vocals equals then I'll put in plant after that a comma and I can say guitar equals and I'll put in page now we'll be able to see that both of these create essentially the same structure for a dictionary here so I'll print band and then I'm going to use shift alt and the down arrow to copy that line down and then just print band two well I've typed in three a couple of times Band 2 is what I want there we go control s to save we'll run our code here and oh I got an error python was not found let's first run it using run python file the first time there we go after that we should be able to click play so we've got the same structure here here is our first dictionary band and just below it is band 2. they look the same you can create dictionaries in either way we can also check the type so I'll say print use type I'll pass it in band now I'm going to use shift alt and the down arrow one more time and here instead of type I'm I'm going to use the length function once again because we can also check the length of a dictionary so now when I run this we see the type as well and we see the length so it's saying it has two key value pairs inside of the dictionary I'm going to scroll for just a little room and I'll put another comment because I want to talk about how we access items in a dictionary there's a couple of ways to do it I'm going to use a print statement so we can see the output but we refer to the dictionary such as band and then we can use brackets and then we can name the key and the output will be the value the other way we can do this and I'm going to copy this down again with shift alt and the down arrow but is to use band dot get and that is a method that we can call on dictionaries and then we pass in the key once again so I'll pass in the key guitar here that's going to return the value that is paired with guitar so control s to save run our code and you can see we get plant from our first print line and we get page from our second and those are the values that are aligned with those keys in our band dictionary now what if we want to list all the keys so let me put in another comment I'll just say list all keys here I would say print and then band and then Dot keys and then I'll save and we'll run the code and let's see what we get so here we get a list of dictionary keys so we get vocals and guitar likewise we might want to list all values so I'll say list all values here in the comment then print and as you might guess it's banned dot values and we can run that code and now you can see we get a list of the dictionary values plant and Page we can also return the key value pairs as tuples and so here I'll say list of key value errors as tuples and now I'm going to say print and then I'll just say band dot items and let's run this code again and you'll see what I mean when we get the output over here it's the dictionary items now inside of this list each item is a tuple so you see vocals plant and then you see another Tuple that says guitar page now just because these are wrapping down and it looks a little strange I'm going to see if I can drag this window over a little and it might make our console a little easier to read because I'm not going to usually need to type past about this width okay so our dictionary items wrapped down but the keys and values for example did not so this is just a little easier to read here now one more thing we might need to do is verify if a key exists in a dictionary so that's what I'll put here verify a key exists and now we'll say print and we can just see if guitar is in band now let me do another one so I'll shift alt in the down arrow again and instead of guitar I'll look for triangle maybe I should have looked for cowbell let's run this see what we get so first guitar in band is true but triangle in band is false let's scroll for some more room again and we'll look at how we can change values in the dictionary so I'll put change values here in my comment and after this I'm going to say band and then I'm going to specify the vocals key so I'm using brackets and then the key once again and I'll set this equal to Coverdale now that would set the key value pair to vocals Coverdale instead of vocals plant so the value for the key vocals has changed once I do that now something else you can do is use band and call the update method but now we need to pass in curly braces and we need to give the key as well now we could update vocals or guitar here but we can also create a new key value pair so that's what I'm going to do I'll make this base and then I'll pass in the value jpj and then if we check our band afterwards you should see we have changed vocals to Coverdale and we should have added a new key value pair as well that says bass and jpj so let's run this code and see what we get here is our dictionary now it has vocals Coverdale guitar Page bass jpj now what about removing items so I'll comment that as well remove items so we'll print and then I'm going to look at band dot pop now the reason I'm printing is because pop will return a value it will return what we remove from the dictionary so here I'm going to say base and so we'll see what gets returned or what gets output here from the print by doing band.pop base and so after that I need to go ahead and print band one more time and let's run this and you can see we don't get a tuple or the full key value pair pop does return the value though of what was removed because then we print band afterwards and we see it no longer has base jpj in the dictionary that key value pair has been removed but pop only Returns the value now I'm going to add a new value like we learned before so I'll say band use bracket pairs here and add drums I'm going to set this equal to bottom and after I do that I'll go ahead and print the band again just so we can see that the new value has been added but now we'll also print and then we'll say band dot pop item if I spell item correctly what pop item does is it removes the last thing that was added the last key value pair that was added to the dictionary but what we will see is this is going to return a tuple so I'll print band here as well so what we last had was the removal here from base the jpj and then it once again had our dictionary down to two key value pairs so we'll see this twice afterwards as well save and run the code now let's look at what we get here so we added bottom and then we print band and that's what we should see here is a dictionary that has vocals guitar and drums and the value for drums is bottom then we used the pop item method and so it removed what was last added the full key value pair and it returns it as a tuple and that's what we see here so then when we finally printed band here the last time our dictionary is once again back to just vocals and guitar R now this deals with removing items from a dictionary what if we want to delete or clear items so once again a comment here and I'll put delete and clear and then if we want to delete an item first I need to add that item again let me just copy this from above here on line 41 we're going to add key value pair of drums and bottom back to our band and then after that let's go ahead and delete with the keyword Dell and I'll say band and say drums and you can see Visual Studio code wants to help me it knows what's in the dictionary so that's very useful don't always have to type that out so now we're deleting that from the dictionary and I can print band once again so we will once again see that it has been removed what we could do though and remember we created another band up here at the top we've also got band 2. so what we could do is empty out a dictionary completely by using Band 2 as our dictionary and then saying clear the clear method and then I'll print Band 2 which should be an empty dictionary so we should just see the curly braces and after that I'm going to delete band 2. delete the entire dictionary and we do that with the delete keyword also but we don't specify any specific key we just name the dictionary and it completely deletes it so I can save and run this and we won't see everything that we just had there we'll see the print once again of the band dictionary after it just has vocals and guitar well also I guess it's this line right here we'll also see the empty Band 2 dictionary and that's why we just see the curly braces there is no output after we delete the Band 2 dictionary it has just been deleted from our application now let's scroll up and talk about copying dictionaries so here I'm going to leave a comment and say copy dictionaries after this I need to talk about the way not to copy dictionaries first so let's say Band 2 I'm going to create a new Band 2 because I just deleted it above if I set this equal to band that doesn't really create a copy it creates a reference and so I want to put this here creates a reference and what that means is they're both referring to the same place in memory or the same dictionary so after you create Band 2 and you add or remove something to it it's going to also add or remove the same thing to band so this is why we don't want to do this because they were actually refer to the same thing view it as a place a storage place and both of these variable names are referring to the same thing so what I'm going to do here is say print and I'm going to say bad copy because you really don't want to do this and I'll give the example of what it actually does so here I'm going to say print Band 2 and then I'm going to use shift alt in the down arrow and we'll also print band but after we do that let's go ahead come down an extra line and say Band 2 and then we'll put in Drums so we'll add drums to Band 2 and I'll set drums equal to Dave this time after we do that let's just print band once again because we didn't do anything to band right so you wouldn't expect it to change let's go ahead and run the code and see what we get so we can see Band 2 is the first one we print right after it says bad copy and then band one and they look the same but then we add drums to Band 2 with the value of Dave but we just print band well that last print of band already has drums and Dave in it so this is what you do not want to do so I'm going to comment these things out I'll just highlight all of those and press Ctrl and the Slash and it will add comments to all of those lines but I did want to show you that because that's not the way you want to create a copy so how do you want to create a copy well let's go ahead and say Band 2 equals band dot copy and we can call that copy method and now they will not have the same reference so I can say Band 2 as a matter of fact I can just copy these lines Ctrl C speaking of copy and then we'll go ahead and paste them in with control V and then I'll print band here and after that I might as well print Band 2 as well so you can see that they're different so we're just adding drums to Band 2 again after we use the copy method now let's run this code and what happens is we have band here the first one and then we have Band 2 on the next line and only Band 2 as drums with the value of Dave but both were printed after we added drums to band 2. so to be consistent I guess I should add the line here good copy and I'll leave the commented lines inside of the course code as well so if you're getting this course from GitHub at the course resources link you'll be able to see this this is what you do not want to do and that's why I said bad copy this is what we want here with good copy now there is another way to make a copy and that is using the Constructor function so let me comment that as well I'll put or use the dictionary Constructor function so we can make a copy this way also so I'll say Band 3 equals then I'll use the Constructor function and I'll pass in band so this makes a copy that is not a reference as well so I'm going to print good copy here as well and after that I'll print band 3. and we'll go ahead and run the code again and you can see we didn't add anything to Band 3 but you can see it made a copy and this is a good copy so that's another way to do it okay one more thing to discuss about dictionaries and it can seem a little complicated when you first learn about it but I think you'll get the hang of it after you experiment with a little bit and that is nested dictionaries this means that the value for a key value pair can be another dictionary so let's look at this and I'll create a dictionary called member one and I'll set this equal to curly braces then I'll have name and let's say plant here and then I'll have instrument and here I'll put vocals now I'm going to just highlight all of this and do shift alt and the down arrow I'll turn this into member two so a second dictionary here I'll make this name page and I'll make this instrument guitar okay now let's create a third dictionary and let's call this band and in this dictionary we'll have a key called member one and we'll put Member One the dictionary we created above has the value and let's do the same here remember two and let's put number two the dictionary we created above as the value so you can see band is going to have nested dictionaries here so Member One is the key but the value will be a dictionary so let's go ahead and print this see what it looks like inside of our terminal when we run the code so here's our dictionary band and well I started one line ahead there we go here is our dictionary band it's got Member One for a key but the value is another dictionary remember two for a key but the value is another dictionary now if we want to get a specific value here we have to go one level deeper so we'll print and then we would say band and let's go ahead and use our brackets and you can see BS code wants to help us once again so I'm going to say member one and then from that I'm going to use brackets again and now it's not helping us so much notice we had name or instrument and I don't see those readily available here so I'm just going to type name because we want to get number one so there we're going one level deep and then we want to get name so that's the second level deep save this and run the code and you can see the output here is plant that's because we were able to drill down into our nested dictionary to get that value by adding another bracket and you need to do that every time you'd have a level could you have another level deeper and so on yes you could okay a final note on dictionaries before we move on to working with sets and I'll Scroll once again I'll just type in band as our typical dictionary here remember in vs code you can use dot notation so type a DOT after your dictionary and all of the different methods will pop up so you can experiment with these we covered quite a few of these today but not necessarily all of them but vs code will help you see what methods exist or a dictionary or a list or whatever data collection type you are using okay now let's move on to sets I'll just type sets here now sets are the fourth and final data collection type that we are going to cover so now let's look at creating a set I'll say nums equals I'm using curly braces again but it's not a key value pair I'm just going to say one two three four and that is creating a set we can also create a set with the Constructor function so I'll say nums two I'll set this equal to set now we have parentheses but now we need double parentheses I'll say one two three four so we've created two different sets that way I'll print nums and then I'll go ahead and do shift alt and the down arrow and I'll print ums two I'll do this one more time and inside of here I'm going to say type nums and finally one more copy down with shift alt and the down arrow and instead of type I'm going to check the length because we can do all of those things again with a set so now when I run the code we have got our first set we created we've got our second set we created with the Constructor function we can see what data type we have and we see the length there are four elements in our set now scrolling up we'll look at one of the top advantages of a set of data and that is no duplicates are allowed so I'll just type this here no duplicates allowed and then I'm going to say nums once again equals and I'll create a set here but it'll be a little different data than above notice I put in two number twos okay after this I'll go ahead and print nums what do you think we'll get for output once I put both of these in but we know a set doesn't allow any duplicate let's take a look I'll run the code and the output is a set that does not have a duplicate at all it didn't create an error because I put one in it just ignored the duplicate and that's what happens when you try to put something else in a set so we should also note that a True Value true is a dupe I'll say of one and false is a dupe of zero now I'm scrolling over so I'm going to press alt Z so the code or the comment line wraps down to the next line see how 111 is a little bit deeper here compared to the other line so it's all still one line it's just wrapping down now I'm going to create a nums set once again and inside of this set I'm going to say one true two false three four zero so now let's think about what we might get returned and we'll analyze this after we actually check our output here so I'm going to print nums once again and now nums has some duplicate data remember one and true are considered to be duplicates false and zero are considered to be duplicates any guesses as to what will the output be let's take a look and we get false one two three four so number one was in here first and so it ignored the duplicate true alts was in here first so it ignored the duplicate zero then notice it's in order also so false comes before the numbers which is also zero so if we had zero it would essentially be in order as well worth noting but notice it did remove the duplicates when we were working with Boolean data that true and false because one is considered true usually in programming and zero is usually considered false as well so those are considered duplicates in a set you can also check if a value is in a set and we can do that with the in keyword once again so I'll say print two in nums and if we run this code we get back true yes because 2 is in our nums set we see it right here as well so that is true so you can check to see if any value is inside the set but I'll put an extra note here but you cannot refer to an element in the set within index position as we had with lists or a key as we did with dictionary so you can't refer to any specific value based on a position like that and there's also no key to refer to but you can check to see if the value is in the set scrolling up again for room let's talk about adding a new value to a set so here we'll say add a new element to a set and we can do that with nums dot add and then I'll just pass the number eight and we'll print nums once again and we'll check our set so let's run the code and now here's our set once again but it also has the number eight in there after that you can add I guess I need a space between these let me put a little extra line there you can add elements from one set to another and to do that let me create another set just called more nums set this equal to a set that has five six and seven in there then after we do that say nums our original set dot update and then we'll pass in more nums and I'm not sure why I put a space there we don't need that space and remember see that error there spaces and tabs are indents are important in Python so an extra space like that could cause problems but here we are using the update method or nums and we're passing in the more nums set as well so we're adding elements from more nums to the nums set so we'll print out nums run our code and you can see now our numset also has five six and seven added to it I'll add an extra comment here as well underneath and this comment is you can use update with lists tuples and dictionaries too and what I mean by that is you don't have to pass in another set here you could pass in a list to update or a tuple or a dictionary as well update will still work now with update we took all the values inside of the more nums set and we added them to the nums set but what if we want to merge two different sets and then create a new set from those two so let me comment that here merge two sets to create a new set and now I'll have to create the sets first I'll say one and let me put this equal to a set that has one two three and then let me create another one and I'll just copy down here I'll rename this two but I want to change the values also I don't want duplicates right now so it's five six and seven and after we've created both of those let's say my new set is going to equal 1 and then I'm going to use the union method and I'm going to pass in 2. so here we're merging these one and two to create a new set so I want to print oops print my new set and we should see the merger of those two but that didn't change the original set one or the original set two let's look at a couple of more useful methods when we're working with two sets so I'm going to copy lines 131 through 133 with control C and I'll just paste here below again but instead of merging two sets to create a new set here we're going to keep only the duplicates from the two different sets now right now I don't have any duplicates so let me change the values here in two so we have some overlap so 2 and 3 would be duplicates in both of these sets now and now that I've done that we'll say one dot intersection update and here we'll pass in two now let's print one this didn't create a new set so what happens is it actually changes the first set here that we call intersection update on one to only include duplicates so we should expect to get a set that only has two and three back so when we run our code that's what we've got here is two and three now kind of the opposite of that so I'm going to go ahead and copy this down again three lines that start everything and instead of keeping only the duplicates we're going to keep everything except the duplicates so here's one and two as well so two and three the numbers two and three are the duplicates so we're not going to keep those so now we're going to expect return a set that has one and four only we're going to do that with a different method here's one and then it's called symmetric difference update here we'll pass in the second set notice it's still happening or being applied to the first set that we call the method on as well so we're going to print one I'll save that and we run our code and you can see the set that we get here is the output just contains one and four so it was the opposite of the intersection update so that just about covers it for sets once again a reminder that you can use your set and then use dot notation to pull up all the different available methods and there's some here that we didn't cover today so you could experiment with these as well and look those up in the documentation of course is linked in the course resources remember to keep striving for Progress over Perfection and a little progress every day will go a very long way please give this video a like if it's helped you and thank you for watching and subscribing you're helping my channel grow have a great day and let's write more code together very soon"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Dictionaries and Sets in Python",
        "Video Title":"Python Tutorial for Beginners 5: Dictionaries - Working with Key-Value Pairs",
        "URL":"https:\/\/www.youtube.com\/watch?v=daefaLgNkw0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/daefaLgNkw0\/hqdefault.jpg",
        "ID":"daefaLgNkw0",
        "Publish Time":"2017-05-17T17:30:01Z",
        "Channel":"Corey Schafer",
        "Channel ID":"UCCezIgC97PvUuR4_gbFUs5g",
        "Transcript":"hey there how's it going everybody in this video we'll be learning about dictionaries and how we can work with them in Python so dictionaries allow us to work with key value Pairs and if you're coming from another programming language then you may have heard these called hashmaps or associative arrays so when I say that we'll be working with key value pairs these are two linked values where the key is a unique identifier where we can find our data and the value is that data so we can actually think of that almost like a real physical dictionary where we look up word definitions so in that example each word that we look up would be the key and the definition of that word would be the value so let's go ahead and take a look at some examples so let's say that we wanted to represent a student using a dictionary so to do this we could just create a student variable and set this equal to these curly braces and that's how we start our dictionary now within our curly braces here we will first put in our key so let's say that we want a a key of name now we're going to put in a colon to separate our key from our value and for the name here we'll just start off with John and now let's add some more keys and values and to separate these keys and values we're going to put in a comma so next let's put in a key of age and a value of 25 and lastly we'll put in a key of courses and for this value we'll pass in a list of courses here so we'll say math and compy so now let's print out our student and see how that looks so if we save that and run it then we can see see that it prints out all of our keys and values now let's just get a value of one key so to do this we can add square brackets after our dictionary and then specify the key that we want to access so I can put in square brackets here and let's say that we want to access the name of that student dictionary so I'll just pass in the name key and run that and we can see that that gave us that value of that name key now if I wanted the courses instead then I could just pass in uh that courses for the key if I run that then you can see that we got this list of math and compi so we can see that these values in our dictionary can be just about anything our name is a string our age is an integer and the courses are a list now all of our keys are currently strings but they can actually be any immutable data type so usually these will either be strings or integers but there are a few more data types that they can be as well so for example instead of name as our key here if for some reason we wanted this to be an integer so I'll just pass in one so a one is a valid key and now if I access that key of one and run that then you can see that that gave us John but uh I'm going to set that back to be a string for now and keep that as name so what happens if we try to access a key that doesn't exist so for example I'll try to access the key of phone for a phone number so if we run this then we can see that we get a key error because that phone key doesn't exist now throwing an error when a key doesn't exist might not always be what we want so sometimes we might just want to return none or a default value so to do this we can use the dictionary's get method so instead of accessing this key this way if we were instead to say doget and use the get method um so let's just go ahead and get the name since we know that that key already exists so if I run that then we can see that that works just like before and gave us the value of jump but if I try to access a key that doesn't exist so we'll try to access that phone key again if I save that and run it then by default this git method returns none instead of an error and we can also specify a default value for keys that don't exist so to do this we can just pass the default value that we want as a second argument to this git method so I'll just put in a comma here and we'll put in a string that just says not found so if I save that and run it now we can see that for keys that don't exist it returns not found um okay so let's look at how we can add a new entry to our dictionary so let's say that we wanted to add that phone number to our student dictionary and we'll set this just above our print statement here so to do this it's just as easy as saying student and then we will set the key that we want to set and set this equal to and we'll just set this equal to a string of 5555555 and if I save that and run it then we can see that it found that value of the phone key key when we ran our print statement now if a key already exists if we set its value like this then it will update the value of that key so for example if right below this I was to say student and name is equal to and we'll just pass in Jane if I save that and then print out I'll comment out that for now if I print out our entire student variable then we can see down here that the value for name was up updated when we assigned it to Jane now we can also update values using the update method now this is especially useful when we want to update multiple values at a time so for example let's say that we wanted to add this phone number uh update this name and also update the age as well so to do this all in one shot we could say student. update and this takes in a dictionary as an argument and the dictionary is just everything that we either want to add or update so we can say that we want to update that name to Jane and we will update the age to let's say 26 and we also want to add this phone key and that phone key will just set as what we had before 5555555 now if I save that and run it then we can see that just by running this one statement we updated the name to Jane the age is now 26 and it has this new key of phone number okay so now let's say that we wanted to delete a specific key and its value now one way that we can do this is by using the Dell keyword which stands for delete so let me just remove these updates here and then we can say so let's say that we wanted to delete the students age so it's as easy as just saying Dell student age and now if we run this then we can see that now the only keys that exist are name and courses so that age key was deleted now another way that we can remove a key and value is with the pop method so if remember from our video on list the pop method will remove but also return that value so that allows us to grab the removed value with a variable so we could say um age is equal to and do a student. poop and what we want to pop is that age so if I save that then we'll also print the age here below student if I run that then we can see that the age and value were removed from our dictionary but we also created that age variable that contained the value that we popped off so that popped off 25 okay now let's look at how we can Loop through all the keys and values of our dictionary so first if we want to see how many keys we have in our dictionary then we can just print out its length with the Len function so if I was to say print Len of student and run that then we can see that it returns three because we have three keys in our student dictionary now if we wanted to see all of these Keys then we could just print out student. keys if I run that then we can see that that gave us all of the keys of our dictionary if we wanted all of our values then we could print out student. values if I run that you can see that that gives us only the values now if we wanted to see the keys and values then we could use this items method if I run this then we can see that now we have these pairs of key and value pairs so we have name John age 25 courses with the list and we'll be coming back to these pairs in just one second so if we wanted to Loop through all of the keys and values in our dictionary we might be tempted to Loop through the same way we Loop through our list but if we just Loop through our list without using any method then it'll just Loop through the keys so for example if you were to say for key in student and then print out that key if we run this then we can see that it just looped through and printed out all of those keys now in order to Loop through the keys and values we'll need to use that items method that we just saw a second ago and so we'll just plug that in there we'll say student. items and now these come in a pair of two values so instead of just key we're also going to have to access the value so we can say for key value and student. items and now we'll print out the key and that value so if I run that so we can see that each Loop through this key variable was equal to each key and this value variable was equal to each value okay so I think that's going to do it for this video I hope that now everyone feels comfortable working with dictionaries and the functionality that's available to us and in the next video we'll be going over conditionals and how to write if else and L if statements we'll also be learning more about booleans and bullan operators now if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Dictionaries and Sets in Python",
        "Video Title":"Python for Data Analysis: Dictionaries and Sets",
        "URL":"https:\/\/www.youtube.com\/watch?v=sZ_KUpt-zus",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/sZ_KUpt-zus\/hqdefault.jpg",
        "ID":"sZ_KUpt-zus",
        "Publish Time":"2020-07-15T22:36:16Z",
        "Channel":"DataDaft",
        "Channel ID":"UCwuvoN0QKjrXUi48G_Hv7kQ",
        "Transcript":"hello everyone in this lesson we're going to learn about using dictionaries and sets in Python now in the previous lessons we learned about some sequential data types such as lists tuples and strings which are ordered collections of objects now ordering can be useful in some cases such as if your data is sorted or has some natural sense of ordering but this ordering comes at a price when you want to search through a sequence of objects like a list your computer has to go through every element one at a time in order to find the object you're looking for so consider the following code we have here we're making a new list with ten elements in it and then we're going to say zero in my list and of course zero is not in my list so the result of that is false but notice that since zero doesn't exist here the computer is having to look through every single item before it can tell us that zero isn't there so that is potentially a lot of wasted computation say if we had a list of a billion objects we'd have to look through a billion things just to know that that the object we want isn't in there dictionaries offer an alternative to this type of sequential lookup that allows you to look up items much more quickly at the cost of the dictionary not being ordered dictionaries are unordered collections of key value pairs that are implemented as a hash table under the hood what that means is every index or key into a dictionary is passed through a complicated function that spits out a numerical value that indicates a place in memory to store the Associated value the implementation details of dictionaries and how hash tables work aren't of great concern to us at this point in the series the most important thing to know is that when we want to look something up in a dictionary instead of having to look through every item we can instead take the key pass it through the hash function which will get us a value that directly looks up that in the appropriate place in memory so this allows us to look I demand a dictionary you know what's known as a constant runtime because the only thing we have to do to look it up is pass the key through the hash function and then we immediately get the value so using dictionaries to store values that you're going to be looking up a lot can save a significant amount of processing time versus say storing those items in a list to create a dictionary you enclose the data you want to store within curly brackets instead of the braces like you would use for a list and for every dictionary entry you need both a key and a value so first you put the key so here this key is going to be the string name then you put a colon and after the colon you put the Associated value so here we're saying when we use the key name we want to get the value back Joe and then comma will store something else when we use the key age we want the value 10 and the key city will have an Associated value of Paris so when we run this it will show us that we have indeed created a dictionary with three different key value pairs now that we've created a dictionary we can look up objects by using the key as the indexer into the dictionary so when we use lists we put the list name square brackets and then the index within the square brackets to look up the item at that index for a dictionary we use the dictionary name again we use square brackets but instead of supplying a number that's the index we supply whatever the value of the key is in this case name was a valid key in this dictionary so when we run it we get the name we stored which is Joe now it should be noted that the keys you use to make a dictionary such as name here have to be immutable objects that means things like strings integers and tuples which are immutable will work as keys for dictionary but things like lists or other mutable objects you can't use as a key you can however use mutable objects as the values you're storing now after you have created a dictionary you can add new items to it easily by using this syntax you put the name of the dictionary in square brackets the name of the new key you want to add so just as if you're looking something up but you're gonna look something up that is not stored yet and then you say at that new key value equals whatever the new value you want to store is so after running this we have added this new value to the dictionary under the key of new key so if we print the dictionary again we'll see that that indeed has been added to our dictionary you can delete existing key value pairs in a dictionary using del so type del for Delete then the name of the dictionary and in square brackets the key you want to delete you can check the length of a dictionary with Len just like you can for a list you can also check whether items exist in a dictionary with the in key word so here you can check is named in my dick and this is checking whether name is in the keys of my dict and that that is one of the keys so that will return true note that since in is checking only the keys for the dictionary if we passed one of the values in the dictionary here it would say false so if I said Parris and in my dick well that is one of the values in there but it is not one of the keys so if I run that it'll say it's false instead of true so just know that if you check in it's gonna check through the keys not the values if you are interested in looking at the values instead of the keys you can do that with some functions so we'll show how to do that so to get the name of the keys you can just put the name of the dictionary and then dot keys that will get you those and if you need the values the name of the dictionary values will get you that so for instance if we wanted to check if Parris was in the values we could say Parris and then in and check if it's in the dot values and that would return true if you want to get both the keys and the values and tuples such as if you want to iterate through every key value pair which is something you may want to do you can use dictums so here we're getting back every key value pair in the dictionary as tuples now real world data often comes in the form of tables with rows and columns where each column specifies front data-feature like name or age and each row represents an individual record then we can encode this sort of tabular data in a dictionary by assigning each column a key and then storing the data for that column as values in a list associated with that key so consider this table here we have a name column an age column and a city column and just a few values for each we could actually store this in a dictionary in Python like so we'll create a new dictionary set it equal to and then the names of the columns will be our keys so we'll have name age and city and then for the values after the colon we'll just enclose in a list all the values for that column this isn't a very big table so there's only three values in each one but this shows you how just with the dictionary we're able to essentially encode this table and this is something that can be extended to tables of really any size so say if you had a very large Excel table or something like that this would be a way that you could store that data we will learn about pandas dataframes in a future lesson which is essentially a kind of nicer version of this sort of data storage with some more features but with base Python this is a way that you can store tabular data there's also a worth mentioning that certain common data formats such as XML and JSON have non tabular nested structures and Python dictionaries can actually contain other dictionaries so they're quite good at mirroring this sort of nested data structure providing a convenient interface for working with these sorts of data formats in Python we will cover more on loading data into Python in a future lesson but just know that dictionaries combined with various libraries Python hands for working with data will let you work with pretty much any common data type you're likely to encounter and now we will move on and learn about sets so sets are unordered mutable collections of immutable objects that cannot contain duplicates so sets in Python are analogous to sets in math which is essentially just a list of objects but it can't contain duplicates so they're only unique values within a set sets are useful for storing and performing operations where each value has to be unique and doing mathematical set operations such as intersections and unions to create a set we use the curly braces just like a dictionary and we supply a list comma separated list of the items we want in the set but it's unlike a dictionary we do not have key value pairs there's simply single items that we store in the list you can add and remove items from a set with set dot add and set that remove so here if we say my set dot add ate it will add that value to the set and if we say dot remove seven it will remove the value seven now sets do not support indexing so you can't for instance say my set and then put square brackets after and how to look up something at a given index because it does not have indices but it does support some common sequence functions such as Len min max sum you can also check membership and non membership as usual using in so we can check for instance is six in my set and the result of that is true but the main purpose of sets really is to make sure that your data object doesn't contain any duplicates and also to allow for performing set operations so we'll show how to do some of those below here we're going to make two new sets and you can see that the sets have some values in common such as 1 and 3 but also some values that aren't in common so to get the union of two sets which is all of the items they have combined you pass in the first set then say dot Union and the second set as the argument to Union so if we run that we get all of the items in both of the sets combined and if there are any overlap those we only get one back for each of those and to check the intersection which is the values they have in common you pass the first set dot intersection and then the second set as the argue and so as we said before one and three are the values they have in common so that would be the intersection you can also check the difference between two sets so that shows you which items they don't have in common so here we're going to pass in one set say dot difference second set and note that this will return the items in the first set set one here that are not in set two so in this case that's five and six if we wanted to see the difference from the perspective of set two so the items in set two that aren't in set one we just have to switch these around and if we ran that we would get that result you can also check whether one set is a subset of a different set a subset just means all of the items the set contains are also in the other set so here we're gonna say set one dot is subset that's checking is set one a subset of set two and since we know there are some items in set one that aren't in set two that is gonna be false it is not a subset but if we change that one here to a different set that actually is a sub such as such as this set right here if we run that that would actually be true now one of the more useful things you can do with sets is to just get the unique elements of a list that you already have so you can do that by converting a list to a set using the set function so here we have a list called my list and it has various duplicates in it like there's three twos and three fives if we wanted to collapse this into a data structure that takes out all the duplicates we can just do that by running the set function and passing the list into that when we run that the resulting set has removed all the duplicates now if we wanted to we could convert this back to a list again using lists around the whole thing so that is essentially a quick way of just stripping out any duplicates from a list but still keeping it as a list at the end dictionaries are very useful general-purpose data structures capable of encoding both tabular and non tab their data but as I alluded to earlier the basic built-in structures in Python like dictionaries lack many of the conveniences we'd like when working with tabular data such as the ability to generate summary statistics quickly for each column transform the data quickly and easily and generate plots for instance in the next two lessons we'll look at data structures available in Python packages that are designed specifically for data analysis and data science namely numpy arrays and pandas dataframes so thanks for watching and I'll see you again next time you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Functions, Loops, and Conditionals in Python",
        "Video Title":"For loops in Python are easy \ud83d\udd01",
        "URL":"https:\/\/www.youtube.com\/watch?v=KWgYha0clzw",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/KWgYha0clzw\/hqdefault.jpg",
        "ID":"KWgYha0clzw",
        "Publish Time":"2022-10-23T17:33:10Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey everybody in this topic I need to explain for Loops a for Loop will execute a block of code a fixed number of times you can iterate over a range a string a sequence anything that is considered iterable I'll have more examples for you in future topics there is a lot of overlap where you could use either a while loop or a for Loop but for Loops tend to be better in situations where you have to do something only a fixed number of times here's an example suppose we need to count to ten if we were to use a for Loop we could write something like this we would type four then we would need some sort of counter typically you see people write X 4 x in then we will use the range function what number would we like to start at I would like to start at one then count to ten but the second number is exclusive so really we're going to write 11 if we want to count to 10. so then colon then hit enter whatever code you would like to repeat a certain number of times you will list underneath the for Loop and make sure the code is indented too I will print whatever our counter X is when I run this code we will begin at 1 then stop once we reach 11. so yeah there we are we have been going at one and we have counted all the way to ten so that's the basic Syntax for a for Loop four some counter really you can name this anything sometimes you'll see people name this as counter and that would work too but let's stick with x in some range where would we like to begin where do we stop okay now let's count backwards let's start at 10 then count down to zero when we escape the for Loop let's print Happy New Year when we print Happy New Year we are outside of the for Loop to count backwards you can enclose your range function within the Reversed function reversed so we begin at 10 count down to one then print happy New Year in this case two count backwards you would enclose the range function within the Reversed function there is an additional parameter too you could add that is the step if you would like to count by twos you would add comma two so I'm going to get rid of Happy New Year let's print the numbers 1 through 10 but we will count by twos and this does begin at one though so one three five seven nine if you were to change the step to three you would count by threes beginning at one four seven ten so the range function isn't the only thing you can iterate over you can iterate over a string let's say we have a credit card number credit card equals I'll make up some credit card number with dashes that is good enough for X in credit card print x x will hold our current position at first it'll be one then two three four dash so on and so forth so here's our credit card number one two three four dash five six seven eight I think you get the idea so you can iterate over a string with the for loop as well we'll have a few projects involving that there are two useful keywords as well these aren't exclusive to for Loops you can use these within while Loops as well they are continue and break suppose we are going to count to 20. 4X in range we will begin at 1 stop at 21. I think this is kind of a dumb example but it gets the point across 13 is considered an unlucky number right what if our counter reaches 13 I would like to skip over it well we can do that with the continue keyword if x is equal to 13 we will continue and skip over that iteration else we will print whatever our counter is so let's take a look yeah we have the numbers 1 through 20 but we have skipped the number 13. to skip over an iteration you can use the continue keyword whereas the break keyword we will break out of this Loop entirely if x is equal to 13 then break so yeah we have only counted to 12. once we reach 13 we have escaped the loop so yeah everybody those are for Loops you can execute a block of code a fixed number of times you can iterate over a range a string a sequence anything that is considered iterable there is a lot of overlap where you could use either a while loop or a for Loop while Loops tend to be better if you need to execute something possibly infinite amount of times such as when you're accepting user input for example but yeah everybody those are for Loops in Python"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Functions, Loops, and Conditionals in Python",
        "Video Title":"Functions in Python are easy \ud83d\udcde",
        "URL":"https:\/\/www.youtube.com\/watch?v=89cGQjB5R4M",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/89cGQjB5R4M\/hqdefault.jpg",
        "ID":"89cGQjB5R4M",
        "Publish Time":"2022-11-26T15:00:05Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey everybody today I need to explain functions think of a function as a block of reusable code to invoke a function you place a set of parentheses after the function name to invoke it here's a scenario I need to sing Happy Birthday three times I know it's a weird example but it makes a lot of sense just trust me on this if I need to sing Happy Birthday three times I would write something like this I'm going to create my own version of the Happy Birthday song thank you this is one verse if I need to repeat this code three times without using functions I could either repeat this code or maybe place it within a loop so here's my Happy Birthday song three times but there's a better way of handling this that doesn't involve repeating our code or using Loops what if I could write this code once then reuse it whenever I need to that's where functions come in to define a function you would type def then a unique function name let's name this function the happy birthday function add a set of parentheses a colon any code that belongs to the function you'll want to indent underneath then to invoke this function I would type the name of the function happy birthday add a set of parentheses and that's it when you invoke this function you will execute this code once if I need to execute this code three times I would just call it two more times happy birthday happy birthday happy birthday to invoke a function you type the function name then add a set of parentheses I like to think of the parentheses as a pair of telephones talking to each other you call a function to invoke it hey happy birthday function execute your code with functions you are able to send data directly to a function using what are known as arguments you can send values or variables directly to a function place any data within the set of parentheses I'll send my function a first name any data you send a function are known as arguments but you need a matching set of parameters that are in order what exactly is the data we're sending in well it's a name I will add one parameter to my happy birthday function I will name this data name a parameter is kind of like a temporary variable that's used within a function I'm going to replace this instance of U with a name I will use an F string replace you with the placeholder I will add my parameter name so happy birthday to bro we could pass in some other names what about Steve and Joe here we are happy birthday to bro happy birthday to Steve happy birthday to Joe when you invoke a function you can send more than one argument let's send an age this time I'll send 20 30. and 40. but when I run this we have an error we're passing in two arguments but our function is set up only to take one I would need a matching number of arguments to invoke this function we will need two parameters we have a name and we have an age then let's use this age you are let's make this line enough string age years old let's try that again happy birthday to bro you are 20 years old happy birthday to Steve you are 30 years old happy birthday to Joe you are 40 years old when you invoke a function you can pass in some data those are known as arguments but you'll need a matching set of parameters the order does matter let's see what happens when I switch these two parameters age then name happy birthday 220 you are bro years old happy birthday 230 you are Steve years old happy birthday 240 you are Joe years old so the position of the parameters does matter same thing goes with the arguments you also could name these parameters something unique maybe X and Y happy birthday to X you are y years old that's also valid let's try another example I'm going to create a function to display an invoice there will be three parameters a username and amount and a due date let's print hello I should make this an F string username we'll use another F string your bill of amount let's precede this placeholder with the unit of currency I will also add a format specifier 0.2 f is do on our due date whatever that parameter is to invoke this function we will type the function's name add a set of parentheses a username and a mount and a due date let's make up some username and amount I guess 42.50 I'm just making up a number here then a due date the first of January I guess here is my invoice hello bro code here bill of 42.50 is due on January 1st let's change these arguments Joe schmoe is the username he owes 100 and one penny due on the first of February or January 2nd depending on how you read dates in your region hello Joe schmoe your bill of 100 and one cent is due on one slash two that's another example now we need to explain the return statement return is a statement that is used to end a function and send a result back to the caller here's an example we have a variable z z will equal will invoke a function to add two numbers together such as the numbers one and two when we invoke a function we can send some data back after adding one and two we will send the result which would be three then this value can be assigned to a variable then we can print whatever Z is so let's create some functions let's create a function to add two numbers together the parameters will be X and Y let's say Z equals X Plus y then we will return our value Z so I'm not going to print Z directly right now let's subtract X and Y subtract Z equals x minus y return Z multiply times y then divide x divided by y return Z let's invoke our add function pass in two numbers one and two then I'm going to print the result after adding these two numbers together the result is three what about subtract subtract one and two the result is negative one multiply the result is 2. then divide 1 divided by 2 is 0.5 after we resolve this function a value is returned just imagine that after we finish this function this function becomes whatever is returned three this function becomes negative one this function becomes two this function becomes 0.5 let's write something a little more complex we will create a function to create a full name create name we'll need two parameters for a first name and a last name I'll name these first and last what do we want to do within this function let's capitalize the user's first name first equals first dot capitalize method then do the same thing with the last name last equals last dot capitalize then I'm going to return the user's first name plus their last name then I'll add a space in between their first and last name this is also valid outside of the function let's create a full name variable that invoke the create name function so this function is going to capitalize the first and last name for us I'll type in my first name all lowercase same thing with my last name then let's print our full name and here is my full name variable we sent our function some arguments we have some parameters set up we took those values made them uppercase then concatenated these strings together then returned them as a single string let's try this with a different name SpongeBob SquarePants SpongeBob now has a full name the first and last names are now capitalized using the return statement you can return some data back to the place in which you call a function well everybody that's a function it's a section of reusable code to call a function you type the function's name add a set of parentheses you can send a function some data which are known as arguments but you'll need a matching set of parameters you also do have the option of returning some data back to the place in which you invoke a function we'll be using functions a lot in the future but we will get more practice with them and those are functions in Python"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Functions, Loops, and Conditionals in Python",
        "Video Title":"While loops in Python are easy \u267e\ufe0f",
        "URL":"https:\/\/www.youtube.com\/watch?v=rRTjPnVooxE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/rRTjPnVooxE\/hqdefault.jpg",
        "ID":"rRTjPnVooxE",
        "Publish Time":"2022-10-22T14:02:58Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey everybody in this topic I'm going to explain while Loops a while loop will execute some code while some condition remains true here's an example we'll use an if statement first we will ask a user for their name name equals input enter your name if our name is equal to an empty string that means the user didn't type in anything let's print a message you did not enter your name else we will print using an F string hello our user's name if I were to skip this prompt we would execute this if statement then we continue with the rest of the program what if I would like to continually prompt the user to type in their name we can't continue until they type in something well we could replace this if statement with a while loop while this condition is true continue to execute this code within the while loop I'm going to re-prompt the user to type in a name than if we were to exit the while loop then we will print hello whatever your name is so let's run this and to your name I'm going to hit enter you did not enter your name enter your name no no no okay I give up I'll type in my first name hit enter hello whatever your first name is while this condition remains true execute this code potentially forever until this condition is no longer true so that's one of the main benefits of a while loop if it's not true then you exit out of the while loop and that's why we're able to continue then print our name hello name you do want some way to escape out of the while loop otherwise you'll run into what's known as an infinite Loop so let's say while name is equal to an empty string we will print you did not enter your name so I'm going to hit enter so we are stuck in an infinite Loop we can't actually escape this Loop we didn't give ourselves an exit strategy that's why previously we re-prompted the user to type in something we're giving them a chance to escape in a way it kind of works like an if statement but instead of executing some code once it's potentially infinite here's another example this time let's ask for a user's age age equals and I will convert the input to an integer enter your age we'll need the user to type in a positive number while age is less than zero let's print a message to let the user know that they can't do that age can't be negative then we need some strategy to escape let's re-prompt the user to enter in their age once they type in something that's valid we can escape out of the while loop so let's print using an F string you are age years old so enter your age I'm going to say negative one H can't be negative negative two negative 1 million okay I give up how about 21 you are 21 years old so that was another example while our Edge variable is less than zero repeat this code Forever let's go over example three I'm going to introduce some logical operators we will have the user type in a food they like food equals input enter a food you like but in order to escape they need to press Q to quit while food is equal to the letter q continue this while loop however I'm going to make one change we want to exit the while loop when they press Q so you could say while not food equals Q So within this while loop let's print the food that they stated that they like I'll use an upstring you like your variable food then we will prompt the user to enter in another food that they like enter another food you like cue to quit then once we escape the while loop we will print just buy okay enter a food you like cue to quit I like pizza you like pizza I like sushi you like sushi I like Ramen you like Ramen okay this program's kind of lame so I'm going to press Q to quit and we escape the while loop we have printed bye so you could do something while something is not true by using the not logical operator all right last example example four we will use the or logical operator we'll ask a user to type in a number between 1 and 10. let's say num equals input enter a number between 1 through 10. then I will Typecast the input as an integer while our number is less than one or our number is greater than 10. let's re-prompt the user let's print using an F string are variable num is not valid then we will reprompt the user enter a number between 1 and 10. once we escape the while loop then we will print our number using an F string your number is our variable num enter a number between 1 through 10. zero zero is not valid negative one 100 nope uh five your number is five that's an example of how you can add logical operators to while Loops while this condition is true or this condition is true execute this code Forever all right everybody so those are while Loops a while loop will execute some code while some condition remains true it's fairly useful for verifying user input if a user types in some input that is not valid you can re-prompt them and there's many other uses that we'll discuss in the future but yeah those are while Loops in Python"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Functions, Loops, and Conditionals in Python",
        "Video Title":"Functions, Loops, Conditionals, Linear Equations in Python",
        "URL":"https:\/\/www.youtube.com\/watch?v=91dTO8VXiys",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/91dTO8VXiys\/hqdefault.jpg",
        "ID":"91dTO8VXiys",
        "Publish Time":"2017-03-17T23:05:27Z",
        "Channel":"APMonitor.com",
        "Channel ID":"UC2GuY-AxnNxIJFAVfEW0QFA",
        "Transcript":"we're going to continue on with the American scientific Python 1 playlist the first video covered these topics second one we're going to start with functions conditionals and then we'll do some loops matrix matrices and linear equations so we're going to do these topics right here let's go and get to our Python again you can go to just want to go to try to better or gets probably the easiest way to get there or start up your Jupiter notebook okay so this is just an online version I'm going to start up Jupiter notebook again and make sure you don't close that this black console right here but you can minimize it okay I'll put this one off to the right just so you can keep track of on what we're doing and the last video we covered some of these other topics we're going to go down two functions conditionals loops matrices and linear equations so with that let's go ahead and just resize this and there we go and I select new and then go to Python and this will start up a new Python notebook so first of all the first thing that we need to do in define a new function is just BEF and they call our function certain name and we return for example x squared and if we want to be able to print the various values of this okay there is 0.1 I put in one and if I put in two and so on now I can also do I used um pi as MP and then I can say x equals numpy linspace all values between 0 & 1 at least 11 values going to print out X okay so I have these values right there and then if I do f of X I'll see that it squared all of those values now let's go ahead and I just put a conditional statement in here as well to put a conditional statement we'll say Y our result equals x squared but we want to check it so we say if the result is greater than let's just say if it's greater than 20 then we're going to say that the result is bad so I'll do not a number and instead of returning x squared I'll just return the result now if I run this again I'm going to get mayor because it can't process that all and you know it can't process it more than one element okay so I need to change my function of alpha handle us or I can create a loop that will loop through all of those let's go ahead and create a loop instead I'm just going to say that y equals and then X I'm going to do empty like X so the same size is X and but it's going to be empty it's going to have no values in there and then I'm going to say I equals 0 this is going to when I iterator and I'll say for X I and X so I'm going to have as I go through this let me go ahead just print X I get rid of these really quick so don't give me an air and let's see what do I have here for X I in okay empty like and the like X okay I know I have an error here but I'm not seeing it let's go back down to that message it has object has not empty like there's X there is okay so just print it out all values that we want to go through those and process them one at a time so I can do it all in one shot then I have this if statement in my function and so let's go ahead and just say that Y I equals and that is going to be f of X I I'm going to plug in just one value at a time and then I'm going to say I equals I plus one okay there I go and then if I go ahead and plot this now Matt lot live in line and then import that plot lib dot type lot as PLT and then we want to plot x and y ou K no collar ball Oh peel T dot plot there we go okay so there's my function there I want to show it with blue circles instead there's our blue does look like other shapes I'll do circles instead okay there it is okay so I've got this right here I've got my function I've that you can see right up here to find a new function return the result I have a conditional as well and then I also iterated through that list the numpy array or vector there created a blank you know just storage for the Y value and then added to it with all of those values evaluating the function at each of the X I values and then I just plotted the results okay so this is if covers just basics on functions conditionals and loops you can also change this if it's not equal to if it's equal to if it's greater than or equal to less than or equal to less than those are all the different ways to do the conditionals and then you can also have else statements as well okay I'm going to say that that is going to be equal to x squared okay else is going to be not a number and you can also do help if if you want in that conditional so L Tiff's let's the residual is less than 25 then we can do a different function for example yeah you can say it's cubed okay and then else is going to be if it's greater than 25 then they'll get not a number okay so here we go I'm going to increase this so it's going to go up to let's go up to five I'll see now let's go up to 10 instead oh I need a residual there though that doesn't work I need to value eight that conditional based on the residual okay let's just say this if it's residual will do that residual equals residual okay I'm just going to leave that one alone okay or I can also do I don't have anything to put there I can just say continue and then if it's less than 25 let's go ahead and do residual residual plus two and then go ahead and plot that continue is not the right one I think it's passed let's see if that's it okay let's just do pass there instead and it added a little bit to what's going to add some more points here - 100 okay so we have some points we can see the break there and then after 25 it doesn't plot anymore okay so here I've put in a conditional I put in and help this and then it helps and just put in not a number and then if I print out for example let's print why this is going to be a lot of numbers as you can see it goes until it gets to you know greater than 25 if it's Austin 25 then adds that okay so I do have one value that's over 25 there or two but then it's not a number after that and you don't plot the not number values okay so there it is with functions conditionals and loops let's go on to matrices now okay so I have this right here oh my god and delete this one let's talk about matrices just in putting them into numpy so I'm going to have NP array and then the separate rows are going to be separated by these internal brackets right here these are square brackets some of the first rows going to be 3 - my second row is going to be 1 2 and let's go ahead and print out a there's my matrix a and let's say we also have a B vector okay I'm going to do a rade is just going to be a column that a row vector right here and then I want to be able to solve this so let's say I have a times x equals B this is a linear system of equations and I want to be able to find out what X is and so in order to be able to do that you take a inverse of both sides so we're just going to do a inverse I'm just showing you what this is this is like a comment okay a inverse of both sides a inverse okay and then this is just going to be the identity matrix any matrix multiplied by itself is just the identity matrix so keep it in control I shift I okay and then that just equals any identity matrix x value just equals itself there's our solution to the linear equation so we want to be able to do this in Python and I'll show you three different ways of doing it the very first way is you can first of all if we import numpy as NP that's our standard import and what we're going to do is we'll do numpy glim algebra linear algebra inverse of a okay so let's look at that there's our inverted a matrix and then the next thing we want to do is multiply it by with B and would use MP dot dot product those two and there's our solution okay so this is going to be our solution one and I'll go ahead and print that okay so there's our solution to X given the a and the B vectors matrices okay let's solution to there's a little bit easier way to do this and more efficient as well and so this is going to be with solution to will do numpy line' alg algebra dot solve and we'll just do a comma B we'll solve the same thing and let's make sure I get the same answer okay same answer there I'm going to get rid of this printing we a just so we can see our solution okay I'm going to show you one more way to do this as well this is with simp I okay I'm going to import that at sym just so it doesn't you know I have Sify SP sometimes I'll use that one and so I'm going to create two new variables in simp I this is a symbolic way of solving it and so I'm going to create some new symbols I'll cover some pie just a little bit more later and don't put a comma between them just say X Y if you just create a new variable just one variable you'll be symbol symbol okay just like that Z okay but we don't need that one for this on and create two variables and then I'm going to do sin dot R installs and let's go ahead and do 3 times X plus 2 times y minus 1 I'm just taking that very first equation and multiply it out with the a and the B and then the next one 2 times y ok and that and then do a comma and I need to feed in a couple here x and y and let's go ahead and look at the solution oh you know what I forgot to do I forgot to put in the an it printing okay so the very first thing you need to do with Simpa if you're going to use it is you want to make sure you initialize the printing ok so let me see if I can remember how that looks Simba in it printing I think that's it let's see if it's right no it's wrong and it printing I think it might just be one underscore let's try that ah I know I'm gonna need to go look at that again okay in PI and knit printing okay so if you ever need anything I go to area so without the beginning underscore there is the knit printing carrot and okay so there's the analytic solution as well solve that with Simpa if you the anit printing that it makes it look really nice if you don't do the imprinting you can also do something like Z equals F and you can do XY m and do pretty print okay and it's going to show up as you know 1\/2 and negative 1\/4 but if you do the printing it'll look just a little bit nicer than this this method of printing it's a simple function that prints the result in a kind of a text nice way okay so there it is with linear solution of equations and I'll go ahead and end this video that let's just go back to what we've covered here we did functions conditionals loops matrices and linear equations the next ones that we're going to do on to the nonlinear integration derivatives and so on"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Object-Oriented Programming (OOP) in Python",
        "Video Title":"Python Object Oriented Programming (OOP) - For Beginners",
        "URL":"https:\/\/www.youtube.com\/watch?v=JeznW_7DlB0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/JeznW_7DlB0\/hqdefault.jpg",
        "ID":"JeznW_7DlB0",
        "Publish Time":"2020-03-29T17:02:09Z",
        "Channel":"Tech With Tim",
        "Channel ID":"UC4JX40jDee_tINbkjycV4Sg",
        "Transcript":"hello everybody and welcome back so in this video you're gonna learn about object-oriented programming in Python and how you can create your own custom objects by making different classes in Python now this video is geared towards beginner so people that have some knowledge of Python have written Python code before but I've not yet stepped up into kind of the intermediate stage which I'm gonna call is this working with classes and objects and are looking to learn that so I'm restarting completely from the beginning if you have no knowledge of object-oriented programming that's totally fine in this series is meant for you if you're someone who just wants a refresher I'd recommend maybe watching the video on two x speed and slowing down when things get a bit more confusing or one you know you need to really learn that topic more so let's go ahead and get started and what we need to do to discuss object-oriented programming is first to find what an object is now a lot of people may think that when we talk about or object-oriented programming that's a completely new thing you know you've never seen an empath on before and it's a new kind of thing to tackle and to learn when in reality you actually see objects all the time when you're working with Python code and you just don't know that they're objects just because they're a little bit disguised and I'm gonna kind of take away that disguise and show you what all these different objects are so we may have heard of the notion of type before we see this function type and we know when we ask it what type a certain variable is or we ask it what types say you know a string is like this it spits out an answer to us and I'll show you what I mean by that so if I do print type of hello so we know that hello is a string datatype let's just see what we get in our console down here oops I didn't mean to do that we get class string so notice that this says class now most people just disregard the fact that it says this but this is actually very important what this is telling us is this right here this string that we typed in is actually an object of the class string right STR now what do you think is gonna happen when I put in X well we know that X is an integer so let's have a look here we can see that we get class int so notice that these different data types that we've called them before a string and an int are actually a part of a class and what that means is even though it doesn't look like we've created an object when we do something like x equals 1 we've said X is equal to the object which is a type integer with the value 1 that's exactly what we've done and the fact that we act create these kind of objects is very important in writing Python code and I know this hopefully shouldn't confuse any of you too much but if I write say a function so you know define hello and in here we just print hello like that and what I decide to do is I go okay let's look at the type of hello so notice I didn't call the function hello with the two brackets I'm just looking at the actual name of hello and we run this well if we add the final bracket at the end here we get class function so pretty much everything in Python that we work with is actually an object of some kind of class and later on in the video what we're gonna do is make our own classes so that we have our own specific types so these are what are called the built-in types these are built into the Python language and that's why they work a little bit differently than other classes that we'll work with later but just understand that whenever you create something in Python you are really creating an object which is an instance of a specific class in that class defines the way in which that object can interact with other things in our program and just show you what I mean by that let's just look at some common error messages and we'll see exactly what that means so we're gonna say x equals 1 y equals hello and watch what happens when I try to do something like print X plus y well we get some air let's go up and see here we get type error unsupported operand types for plus int and string so it's saying because our object x is an INT and our object Y is a string we cannot add them because the program does not know how to work with objects of those two types or in better words the addition operation is not defined for objects of int and objects of string at being added together so it's very important and pretty much the type that we have defines what we're allowed to do with the specific variable or with that specific object and it denotes the actions that we can perform you know plus minus all of that if I were to change this right to 2 and then we just do X plus y don't need to print it out we can see that that's totally fine and there's no issue because these are both ins which means that operation is defined for them ok so hopefully that is clear and that makes some sense I hope that gives you kind of understanding of what I mean by objects and now I'm gonna talk about methods because those are something that we can perform on objects so I'm sure that many of you seen this before I'm just gonna type string equals hello like that and many of you know that we can do something like print string if I can type this correctly dots up right so when I write this dot upper here what is that actually doing well let's look at here we obviously know that puts that all to uppercase but we're allowed to use this what we call method and this is a method whenever you have this a dot operator you have some name and then you have the two brackets at the end here and maybe there's some arguments that go inside of there that is usually a method that is acting on a specific object and in this case what it's doing is we have the method upper acting on the object of type string that is stored in this string variable and the reason we're allowed to use this method on it is because this is a string now notice that I can't do something like you know X equals one and then do X dot up and the reason I can't do that is because while it's gonna say right here int object notice int object has no attribute upper so these methods these different operations the things that we can do with these objects is based on the type of class that they are so that's something that we really need to nail in there and I hope that makes sense and now what I'm gonna show you is how we can actually create our own classes because hopefully that gave you a good enough explanation for what objects really are so to create our own class I'm gonna kind of do like a template here and then we'll go back through and discuss what everything is doing at once but just try to follow along for now so I'm gonna say class and we're just gonna do the classic kind of animal example to start here so I'm gonna say class dog and we're gonna define this initialization which we'll talk about later and actually no let's not even do that let's just say define bark like that and then what I'm gonna do in here is simply print work okay so what I've actually done here and I know this is gonna be weird for many of you that have not seen this before is created a class called duck what this means is I'm gonna make my own kind of blueprint now for any objects that are of type dog and I'm gonna start defining the operations that a dog is able to do now in this case I've created a method now a method is essentially just a function that goes inside of a class that's the easiest way to define it and for our basic example right now all of our methods are gonna start with a parameter called self and we're going to talk about what this self parameter means and how all this works later on but let's kind of build our way up to that so I'm gonna say D equals a dog down here and what I've done when I did this here is I'm actually saying okay I'm gonna have the variable D and I'm going to assign it to a instance of the class dog so this is class dog again you don't need to know how this works right now we're gonna talk about that in a second but when I write this line here and I put dog which is the name of my class and then two brackets like that I am instantiating right creating a new instance of the class dog so D is now gonna be an object that is of type dog and notice that we don't get any errors there and when I decide to print out type of D we're gonna see that we get class underscore underscore main underscore R squared dog now the reason we have these underscores is because this is telling us what module this class was defined in now by default the module that you run is called the main module that's why we have these two underscores main underscore underscore but we can see that this is again an object of the class dog and that means that whatever we define inside of here is going to be what is allowed or the operations that can be performed by a dog and one of those operations is bark so this is a method remember we've talked to a method just like dot upper before so if I want to use that method on an instance of my dog class because this is an instance of the class dog then what I can do is I can type well not upper but dot bark like that so I can call this method on my dog object again because it is a class dog and I've defined a method that works for dogs so when I do that we can see that we get bark and then it still obviously continues to print the type of that object so this is what we're getting out here so these are kind of how classes work we name the class typically the convention is to use an uppercase letter and usually you go camel case so you do like dog like you say we're gonna do two words you do like dog hello right so camel case like that and then inside of the method or inside the method inside of the class you can define a few different methods and operations that can be performed by this object so what I'm gonna do is I'm gonna say define I don't know let's just say meow I know this is wrong because it's not a dog and we'll talk about self in just a minute but I can define another method here and instead of printing something I could say return let's just say yeah like that so I don't necessarily need to print something I can return something I can have these methods take arguments so maybe I have meow and then I put X and maybe what I do is I return X plus 1 or something like that so maybe let's just call this add call this add underscore 1 that'll be the name of our method so I can return X plus 1 and then what I could do if I want it here is like it's a dog add underscore 1 put 5 there and let's print out the value that we get let's have a look at this year and we can see that we get the value 6 so we can make methods that have different arguments associated with them or parameters like I've put X here and that just means that when I call that method I need to pass in a specific value or specific values so that that can operate and that can work so that is how the methods work so now we're gonna talk about itself but before we can do that we need to talk about what's called the anit method which you may have seen me typing at the beginning before I kind of gave up on X I didn't want to get that complex that fast so right now we have two methods we have this bark method and we have this add one method and I hope those makes sense on how those work and now we're gonna talk about this special method here and by the way this has two underscores so it has underscore underscore and then an it and then underscore underscore now this is a special method and what this pretty much allows us to do is instantiate the object right when it is created so this method will be called whenever we write this line so whenever we create a new dog instance by writing dog and then the two brackets let me get rid of this down here for right now this method will be called and it will pass any arguments that we put in here so maybe I put something like Tim in here it will pass that to this method so let's say that every time we create a dog and we want to give it a name immediately so to create a dog the criteria is that you must give it a name well what we would do in here is we would put the parameter name and then here we would pass in the name so what we need to do though is what we're passing in this name we need to store this in the dog object somewhere right we need to have this stored we need to be able to access this this is kind of the nice thing about objects and this is where we're gonna talk about attributes what we can do if we want to store this name is we can say self dot name equals name now it's important to note that this doesn't these don't need to match but what we've just done here is we've created what's called an attribute of the class dog which is name so what this means is essentially every time we create a new dog object we will pass a name through this parameter so self just stays here to denote the object itself so like every time one of these things is called we will pass a reference to which object it was called on so we can access things for each specific object and we'll talk about that more in a second but here what I've done is to find an attribute called name which is equal to the name that we passed in so what I'll do is immediately I'll just print inside of here the name so that we can see how this works and notice that when I run this now we get Tim printing out so even though I didn't explicitly call this an it method because I wrote this line here it passed this name that I put in here to the name parameter and then it printed out name here inside of the Anette and we also defined an attribute called name that is inside of this dog class so what self is doing is every time that any of these methods is called kind of invisibly you don't get to see it the actual reference to this dog object is passed so that we can access attributes that are specific to each dog and what I mean by that is I can make another dog so maybe I say d2 which is you know another instance of the class dog except this time I named it's Bill right and now we'll do the print statement again so we'll say print name just to show how this works and here we get Tim and we get Bill so we actually have two different dog objects now one named Tim and one named Bill and they both store different names inside of there you know instance if that's what you want to call it so let's just show how this attribute works so the point of this attribute is that it's stored permanently for each specific object so I can actually go ahead and go down here and print D dot name after that's defined and I can print D - dot name like that and when we look here we can see that those names get printed out so Tim and Bill notice that I remove the print statement from up here so these attributes when we do something like a self dot and then anything that we want we can call whatever we want is equal to some value we can reference them later on and we can reference them from methods inside of our class so an example of that is something like say define get underscore name so the first argument here is always gonna be self are the first parameter and the reason for that is because we need to invisibly pass the actual you know dog object itself so that we know which dog were accessing when we're gonna get say the name of the dog so here we're gonna say define get name and all we're gonna do is return self dot name like that so now rather than saying dot name we can call thought get underscore name which is a method right and we can do that down here as well get underscore name and then we see that we get Tim and we get Bill so that is the basics behind objects now of course I can make more attributes as well so I could do something like H so let's say my dogs I want them to have a name so let's say my dogs want them to have a name and an age well what I'll do now is I'll say okay so in our initialization for dog we're going to take a name and we're gonna take an H so we'll define the attributes in here so self dot age is equal to whatever age we passed in and now every time that I make a new dog object I need to pass a name and an age so these this Tim will be an old dog here bill will be a young one and we'll run this and we see that we get no issue and if I wanted to I can go ahead and define another method here so get age and we'll return self dot age like that and if we change this to get inch and we change this one down here to get age as well what is the issue here oops so I'm forgot to put myself in here so notice what happened when I forgot to put myself so that's actually a decent error to run into I didn't put self in here as a parameter and you can see I know that it's kind of messy here it says get age takes zero positional arguments but one we're given so what does that actually mean so it's saying it takes is your arguments which it did when I didn't himself here but one was given but I didn't give any arguments inside of the brackets well that's because when we call a method this right the actual dog object itself immediately kind of been Blee gets passed to that method as the self parameter so we know which dog it's talking about so now if I go ahead and I add self we can see that this works fine and we get thirty-four and we get twelve so that's important thing to remember now what we can actually do is we can create other methods that modify these attributes or create new attributes so I can do something like for example set age so I in sight define set age will give itself of course and then we'll put an age here what I can do now is say self thought age is equal to H and now what I'm gonna do for Tim and we'll get rid of Bill for now because I think we get the point on how it works for different objects isn't gonna say D dot set underscore age and I'm gonna change his age to 23 and when we print it out we can see that 23 actually gets printed out so we can modify and we can access these different attributes from methods inside our class and this is where thing gets things get very powerful because this allows us to access data that is stored within a specific object and do different things with it based on how different methods and different things are being called right and this just is pretty much the blueprint that defines how a dog actually works how it operates what it can do the methods associated with it and the attributes that exist now some of you may be saying well why do I need to do this right like this seems kind of redundant I could write in a different style well the nice thing about object-oriented programming is once you create one of these classes you can have an infinite amount of instances of this class without having to change anything so let's say for example that we'll leave that class up here right now but we want to simulate what we've just done here for the Tim dog right we want to have an age and we want to have a name and we want to be able to change his age and all that well many of you that were more beginner programmers would probably tell me we can do something like this we can say dog one underscore name equals Tim you could say dog one underscore age equals you know 34 and there you go you just defined these two attributes if you want to get it you can just access the variable if you want to change it you can just change the variable okay nice but what happens when I want to make 25,000 dogs or every time I run my code I want to make a different amount of dogs you can't find a way that you can write all these different variables that have one two three all the way up to 50,000 or however many dogs I have to represent that that's why we use objects is whenever we're going to be kind of reusing something there is some instances in which we make a class where that we're only going to use once or instantiate once but those are kind of more complex examples we won't get into here but then okay so some of you might tell me all right well Tim I can just do lists I can say dogs equals that we say dogs underscore name equals that right and here we can put well the first name is Tim and then we had fill so this will handle the idea that we can't just have all these different variables right so dogs age equals and then we go let's say I don't know 32 14 okay that's great but the issue with this is that it's really a pain when I want to access the dog's age the dog's name and then what if I had like 25 other attributes or methods associated with the dog this is just just a paint you don't want to deal with that because I have to now find the index of whatever dog I want in one list which is a very time-consuming operation in computing and then I need to reference that index and all the other lists for all the other attributes and it just becomes very messy very quickly and let's say I want to delete one instance like feed you know the dog object bill or something like that right then I need to find the index of this I need to find the index of all of the attributes and all the other lists and I need to delete them at the same time to make sure that all my data stays consistent and there's no kind of offsetting things or too many attributes in one list so it's just as a pain to do it like that so I hope this makes sense on why we would do object-oriented style and now what we'll do is go into one example where we create a more complex object and show kind of the advantage of that ok so a lot of people typically will stomp at kind of the previous example that I just gave you now I want to go a little bit further and show you the advantage of doing multiple classes so rather than just using one class I want to show you how different classes can kind of interact in an example where I have a bunch of students these students all have some grade assigned to them and they're all a part of a course and then that course will have some methods on it to do things like find the maximum grade of all students give us the average grade of all students tell us the lowest grade some things that you may actually want to do say if you were trying to model or create a system for you know a school or something like that right so this is obviously going to be a little bit more of an example as opposed to super practical but hopefully this should give you some more insight into how we would do something like that so I'm going to start by cleaning creating a class called student I'm gonna go a little bit faster here but I will slow down and talk about what I've done after so don't worry if you can't keep up so we're gonna have a student and each student is gonna have a name age and eighth grade so we're just gonna say self the name equals name self dot age equals age and then self dot grade equals grade now this numeric grade is gonna be between 0 and 100 so I'll just write that down here just so we know that and that should be good for our students so we could of course go in here and add some methods if we wanted something like get underscore grade and what does ID 1 just so we have it in here and what we can do is return a self duck grade like that okay so this is this is where we're gonna leave our student now we could add a lot more things to this we could add a change grade we could you know add a test we can have weightings we can do all kinds of crazy stuff but for now we're gonna leave it at that so again we've defined three attributes here we have a name and age and a grade those are equal to the name age and grade that we pass in when we initially create a student and then we have one method remember this is a method and it simply returns a student's grade now I'm going to make a new class called course now what I'm gonna do in this course class is I'm gonna have the ability to add students to a course so when we create a new course what we're gonna need to do is we need to define the name of the course and the max underscore students that can be enrolled so in here we'll say self dot name equals name and self dot max underscore students equals max underscore students like that all right so what we're gonna do now is we're gonna add a method that will allow us to actually add students to this course but how are we gonna do that how are we gonna have students stored inside of a course object well what we can actually do is we can make a list of students so I'm gonna say self thought students equals a blank list now notice that I've made an attribute and I didn't assign it directly to one of these things that was passed into one of these parameters arguments whatever you'd like to call them that is totally fine in fact a lot of times will create attributes like self dot you know is active something like that equals false right we can do that that's totally fine and attributes are just whatever we decide to define and if we want to assign them to say the argument or parameter that's here that's fine and we can do that so there we go we have self-doubt students which is a blank list and I'm gonna start by creating a method here that's going to allow us to add a student object into this list so I'm going to say define add underscore student like that and in here antic self and we're actually going to take student now this student right here is actually going to be an instance of a student object and I'll show you what I mean by that in a second but all we're gonna do is say if the length of self dot students is less than and in this case self thought max underscore students then what we'll do is we'll say self dot students dot append student so we're gonna create a list of students inside of this you know this list right here right that's what we're gonna do and we're gonna add them in only if this is less than the maximum students in the class and what I'll do is I'll actually return true if the student was added successfully and then down here I'll return false if not so that we can tell maybe if we make a program down below if that student was added properly or not now I'm gonna add another method and here I'm gonna say define yet average great now wolf code that one out in a second but let's do an example of how we can actually now add students to these class so I'll make that a bit smaller so we can read it so let's make a few different students so let's say s 1 equals student what do we need to pass for student and named agent grades let's call that Tim let's call that 19 and let's call that 95 Tim's a smart guy all right and then we'll do s2 equals student we're gonna say bill we'll put him at 19 as well and he's not as smart he is 75 and then let's do s3 equals and let's go Jill keep with the trend Tim billed Jill 19 and maybe she has a 65 ok so we've created three students here and these students are proper they should work fine let's run this make sure everything's all right now how can we actually add them to our course well the first thing we need to do is make our course so we're gonna say course equals course like that what do we need when we make a course we need a name and we need a maximum amount of students so let's name this course let's say science or something like that and let's say the maximum amount of students is actually gonna be 2 because I want to show what happens when we add a student past the maximum now we're going to add students so how do we add them well we have to call that method so course dot add students so there we go we can add student s1 and then let's do course dot add student again and let's add s2 so now let's run this we see everything works fine and let's actually make a thing that can you know print out some thing about our student or can show our students so what I could do is I could say let's print down here course dots and this students and let's have a look here and we get main student object on some gibberish location main student object at some gibberish location so what this is actually telling us is both of these things inside our list right now our student objects and notice what I can actually do is let's say I index the zeroth item in that list so the first student that we added and I decide to call dot name on it well then that should hopefully print out the name of that first student which is 10 so that's cool and that's how we do that right we can add things in to this course so now this course stores all of our students and since all of these students have a grade on them inside of our course we'll be able to access that so now that we've done that let's write this method that can get the average grade of all of the students that are enrolled in the course to do that what we're going to need to do is grab all the students from the students list we're gonna need to add that to an average and then we're gonna need to divide that value to figure out what that is so what we'll do is we'll say value equals 0 we're gonna say for student in in this case self dot students then we're gonna say value plus equals student the duck gets grade like that now notice that we could just type great if we wanted to but I usually just like to use the method because say we were to change any attribute later then this code wouldn't break so long as this method was still named the same thing and we can modify the method in here so they returned the proper grade like say we had a student enrolled in multiple courses then we could you know determine their grade in a different way and when we called get grade maybe we don't just return self grade we return something different so this still continues to work so we'll say value plus equals student get grade and now all will simply do is return in this case value divided by V Len of self dot students so let's see what the average grade of our courses so course get fabric grade will actually print that out like that and run that and we can see that the average grade is actually 85 and that makes sense with the grades that we have here so that's the idea behind what I'm trying to show you is that we have you know we can have different classes we can have attributes with them and when we can program an object-oriented style now it doesn't matter how many students we have or how many different courses we have and what students are enrolled in which in fact what we could do is we could make another course we can add the same students to it and then we would obviously have to change the way that their grade was calculated but that's something that we could do now let's just look at what happens when I decide to try to add that third student so course start add student like that and we decide to add student s3 we can see that we get the value false and notice that the average grade does not change because we didn't actually add that into the course right okay so we finished off the basics on classes and objects and how to create our own classes and hopefully that last example helped you to really kind of understand the advantage of doing this now what we're going to talk about here is something called inheritance now this is where we slowly start getting to a little bit more complex and some more difficult concepts so try to follow along but I don't find inheritance as that extremely difficult so the idea behind inheritance and we'll show what that is in a second is you have two classes that are very similar so let's say we have a general class called maybe alright let's do a better example let's say we have a class called dog and a class called cat and in fact let's actually code these out so that we can see this for real so let's say in the init method of the cat what we're gonna do is we're gonna have self name and age like that so we're going to say you know self dot name equals if I can type properly which apparently is not happening right now and then self dot age and then we'll do define speak and all we'll do in here is just print you know what is this cat yeah okay and then let's say we have a dog so we'll say class dog like that and we'll define underscore underscore net on our squander square put the self put the name put the age because that's all we want for that and we'll say self dot name equals name self dot age equals age and then define here speak and the only difference between these two classes is actually gonna be the fact that this prints bark instead of meow so notice that these two classes are almost identical in fact there's only one line of code that's different other than the class definition at the top so there must be a way that we don't need to write this twice that we can actually use what's called inheritance so that these dog and these cat classes can well inherit from an upper level class which means that all that functionality is defined in one place and we only need to write what's different about those two classes inside of them so ideally what I would like to have is to be able to remove this init class from both of these and just have the speak method because the only thing that's specific to a cat in a dog at least for my example is the fact that one of them says meow and one of them says bark so let's get show how we can actually do them so by removing that you know was an it method and just having these methods here what we need to do is make an upper level class which I'm actually gonna call pet so I'm gonna say class pet what I'm gonna do in here is define that an it method that we had before I'm actually gonna define a let's say show so this show method is just gonna show me all the things about my objects so I'm gonna say print and in here we're gonna say you know I'm actually gonna use an F string you may not know what that is but don't worry about it I am self taught name and I am self dot age years old okay so what I've done is I've defined this pet class and this pet class essentially is going to contain the functionality that I want the cat class and the dog class both to have and then in sign of the cat class and inside of the dog class what I'll do is I'll define the methods or the attributes or whatever it is that I need to do that are going to be different for this specific class so notice that pet is general we call this a generalization whereas cat and dog are more specific so how do I actually allow the cat class in the dog class to use this functionality well what I can do is simply add brackets and write pet now what this stands for is I am inheriting the upper level class pet so we're saying this is the general class this is a more specific class that's being created and inherits from pet and the same thing with dog let me show you how this works so let's create an instance first of all of the pet class and then we'll make one of the cat and the dog class and I'll show you how it works so let's say P equals pet notice that for pet we need a name and we need an age so let's say it's him let's put him at 19 and then let's do P dot Show so let's look at this year I am Tim and I am 19 years old so that is how the pet class works pretty straightforward now let's make a cat class so let's say C we're gonna say C equals cat I'm gonna say the cat's name will be Bill and that cat will be 34 like that and then let's do the same thing here see nutshell now notice that even though there's no method called show inside of cat it still pops up and says I am Bill and I'm 34 years old that is because it inherits inherits the properties from the pack class because I've defined that up here and notice that even though I didn't defined in an it method in here this still worked fine right there's you know this was okay we initialized because we use the anit method that was defined inside a pet and of course we can do the same thing with dog so we can say D equals dog what do we call this one before Jill 25 and let's do D dot shell like that we go I'm jail and I'm 25 years old so that works but now let's show what happens when we call speak on the cat and the dock so if I decide to call speak like that and we'll call it on both of them here you can see that we get me out and we get bark and again that's because this speak method is different for the cat class and different for the dog class and since its defined inside of here and we created an instance of cat when we make a cat instance well we're gonna use the speak method that's defined here and in fact what I could actually do is define speak up here and I could say define speak and I could say print I don't know what I say like that okay and then if I decide to change this from show to speak notice that we're calling speak three times speak is defined here and it's defined in both of our child classes is what we call them so when they when this is the upper level class the more general version any classes that inherit from it are known as the child classes or the derived classes um that's not that important to know but just you know figured out through that lingo out there and notice that when I run this we get I don't know what to say meow and bark so if there is a method defined in the lower-level class or the child class that is the same name as the upper level class it will automatically override that method so it will take over anything that's defined in here is more specific to this class so it will use that rather than using this upper one right and you might ask well why would we even bother defining one in here if it were just gonna take it over later well we might create another pet right maybe like a fish or something for example like I can do something like this class fish pet like that I can literally just define that and put pass inside of here and now what I can do is say okay let's say F equals fish and then we need a name so let's call this bubbles why not give it ten and now we can say F dot speak and notice that we get I don't know what to say for this fish class because there was no speak to find inside of here it used the speak that was defined in the upper level or parent class right the one that we inherited from so that is the basis behind inheritance now it gets a little bit more complicated I'm gonna show you the more complex out aspects because let's say I want to add one attribute to my cat so let's say that for cats we actually care what color those cats are as well well what I would need to do to do that is this initialization method right because I want to pass it and when I create a cat but I don't necessarily want to rewrite this whole thing so what I'm gonna do and I'm kinda need to rewrite the whole thing but you'll see why we would actually do this in a second I'm gonna say self name age cover like that and now all I'm gonna do let me say self dot color equals color so what some of you may say here now that we've defined the color in here is that what we should do is take this name and age right just copy it and paste it in here now that would be a correct answer but I'm gonna tell you why we shouldn't do that so the idea here is that sometimes in the initialization method of our parent other things are happening other than just redefining attributes right and in that instance it would not be correct for us to simply omit the fact that we're not gonna call this a net from the parent we're just gonna define the attributes because that could mean that we miss out on a very important you know function that's happening from inside of this initialization to give you an example like saying some web applications maybe this initialization actually calls a database right and an ask for some information for a database and it sets up the object using that it wouldn't necessarily be correct then for me to just you know take the attributes that we're in here and just redefine them as attributes here I would actually still need to call that initialization to make sure the object was set up properly so to ensure that that happens when we do an inheritance like this we do need to define the arguments that we need are the parameters that we need for the parents initialization so name age but there's a fancy way to call that so rather than you know rewriting this here I can actually explicitly call this and set up our object that way so to do that I'm gonna say self are super underscoring square net done underscore underscore name age now what this is saying is super stands for reference the superclass and the superclass is actually the pet class or the class that we inherit from here so that's what super stands for the class that we are have inherited from then underscore underscore net underscore underscore defines the method that we want to call right and then name and age are the arguments that we're going to pass to that so name and age notice I don't need to pass cell that's fine we don't self and it's gonna call that and what's gonna happen is it's gonna run whatever's inside this initialization then that's gonna set up the name and the age for our object so we will have those properties defined and then we will call self duck ah they're equals color or we will execute that line so now we have the cover right and if I just go ahead and want to define here show so I want to change this show method maybe for this cat object then what I can do is I say I am self that name and I'm self that age and I am and in this case self dot color right so we can change the show method in here and now let's go to cat let's change this to show let's add a color because we need to add a color now we have to find that in the Annette and let's run this and see what the issue is now that we're getting fish is not defined oh did I do I guess I've deleted fish or we got rid of it at some point I did not remember okay so anyways let's run this and we can see that we have I don't know what to say I'm Bill and I'm 34 years old and I am brown and then we get bark right so that is how that works for inheritance and this is how we call the super class or the upper level parent class right we need to call this initialization method before we just go ahead and do anything else because that parents initialization may be important it may do other things it may call another method right so we can't just simply skip that we need to call that explicitly by writing this line now this line is kind of complicated syntax you know it's easy to forget but try to remember it super again references the parent class pet and then we have an it and like that so I hope that gives you an idea on how inheritance works now it's hard to give really good inheritance examples without going more complex and more into detail so I'm gonna admit doing that for now but just remember that when you have classes that do a very similar thing they have almost everything identical except maybe a few attributes or a few methods it might be a good idea to what we call generalize and make a parent class that is a general class that defines functionality will be used in all of your child classes and that is a very common practice and object-oriented programming to use inheritance for example a very good example is for example a good example is something like person hierarchy so let's say you have you're working in an organization and the example we want to consider is we have managers and we have employees now managers have different access than employees but employees and managers have very similar properties they all have a name they'll have an age they'll have an ID they have a birthdate they have many different things that they are the same for both of them well if we were trying to model that system and we were gonna program that and make that what we would likely do is create an upper level general class called person that defines all of the attributes and all of the methods that are general to all people whether they are managers or employees and then we would create two child classes one for employee and one for manager and that would define the specific things that the manager can do and that the employee can do that are different from each other so that's the idea behind inheritance hopefully that makes sense and now let's move on to our next topic okay so now it's time to talk about static and class methods and class attributes and in fact we're actually going to start with class attributes now previously you would have seen that every time we defined an attribute for one of our objects we used self right and inside the class we had self every where self was referring to the instance in which we were talking about in that you know context right so here what we're gonna do now is talk about class attributes now class attributes are attributes that are specific to the class not to an instance or an object of that class so I'm gonna do a basic example where I just create a class person and I'm gonna say number of people equals 0 now in here I'm gonna define the NIT method and say to find an it like that and we're just gonna say each person will simply have a name keep it nice and simple like that so self that name equals name now let's make p1 person we'll talk about what I've done in a second here in case anyone's confused and let's say p2 equals person let's make this Jill okay so we have this number of people thing and I'm sure a lot of you're like what the heck is that well this is a class attribute and the reason it's not a regular attribute is because it does not use self so because it's not defined inside any method because it does not have access to an instance of the class it is defined for the entire class which means that this is not specific again to any instance it's not gonna change with from person to person whereas we know something except that name will be different for each instance of the person class this is not different for each instance of the person class in fact it's the same so what I can show you is that I can actually go ahead and print say you know p1 dot number of people and that gives me the value 0 but what I can also do because this is not specific to the instance of any class is right person dot number of people and the reason I can write personally because again this is specific to the class not to the instance so we can access it by just using the name of the class and that actually means that I can change it using the name of the class as well so person dot number of people equals 8 right and then if I go ahead and say okay P 2 dot number of people notice that we get 8 even though I didn't explicitly change it on P 2 it changed for P 2 because this was specific to the class and when I reference this all this says is when I say P 2 number of people the way that Python interprets this is what is the type of P 2 okay that's person notice you can see it's popping up here it says person then let's say does it have an attribute called number of people know this person itself does not does the class have an attribute called number of people yes it does let's display back and since we change that to 8 that's why we're getting that value and of course if we do this for P 1 like we've shown right we'll get the same number we'll get P 1 number people get 8 and if we decide to change this halfway through right so we do person equals 9 obviously that will become 9 now just because we changed it right before we printed the next value so that is the basics we be behind class attributes there's a lot of different uses for them now in this case what I want to do is have a number of people so what I was gonna do is inside of here say person number of people plus equals 1 so that we keep track of how many people or how many instances we have created of this class person so now if I decide to print P you know person dot number of people and we'll do that after we create the second person as well see we get one two and this automatically increments it so that's a basic example of one you would use a class attribute they're not extremely you but you know is something that you may want to consider and sometimes say you want to define a constant something like maybe gravity or something that's going to apply to every single person that you want to be a constant value then you define that as a class attribute so that if you ever decide to take this class and use it somewhere else that constant is still defined as opposed to putting it up here like as opposed to saying gravity up here and making it equal to you know negative 9.8 meters per second at the top what you would do is you would make that a constant inside as a class attribute so that now every time you want to access the gravity property for you know a person what you would do is you can reference directly the person's class constant of gravity rather than a global constant which may not be there if you put this class in a different file and that's the idea behind this these classes as well is that they are exportable I can write a class in one file and I can take it and move it to another file and hopefully it should continue to work assuming it does not depend on anything from the previous file so ideally you want to make your classes as robust as possible which means that they don't need anything outside of their initial class definition unless that's gonna be another class that maybe it's interacting with like in the example before we had course and we had student but that is the idea behind class attributes now let's talk about class methods so class methods are defined a little bit differently than regular methods and in fact I'll show you how they work we have a good example kind of set up here so I'm gonna say define and in this case we're gonna say number of people like that instead of saying actually self we're gonna say CLS then what we're gonna do right here is return CLS number of people and we're gonna use what's called a decorator to denote that this specific method is a class method and to do that we write act class method directly above the function or but yeah I guess function method whatever you want to call so I know this seems a little bit weird but the idea behind this is this method here is not going to be acting on behalf of one instance it's not gonna be specific to an instance and in fact you can call it on an instance if you want but that's not really going to be very effective what this is meant to do is be called on the class itself so that it can deal with something like you know returning the number of people that are associated with this class so these are class methods they that means they act on the class itself they do not have access to any instance and that's why I've written CLS here instead of self because there's no object what it's doing is just acting on this class so for example say we wanted to add to the number of people then what I could say is class method define add person like that CLS and we'd say CLS dot was it number of people like that plus equals one so that would be these are class methods we denote them with at class method just so we know that they're not referencing you know itself like that they're referencing the class so let's actually have a look at how we use that now sure need to necessarily print the number of people anymore what we can do is we can go down here and say person dot number of people and I don't know why there's so many brackets showing up there geez but if we look at this uh what we would need to print it out first we should hopefully get the value of 2 so let's look okay so we need to rename this so that this is not the same as the attribute because that's gonna be confusing so let's add an underscore there because I was realizing what the heck what's going on there and we can see that we get 0 oh so that is because I did not continue to add here so actually what I'm gonna do is and this actually be a good example so let's illustrate this here is I wanted to say too but I forgot that I forgot you know didn't continue adding this but what I can do is actually use the class method that I've defined here to add a person so I can say person dot add person like that inside of my in it and what that will do is call the class method on the class person and then it will add to the number of people so now when we run that we get two so that is how a class method works I don't need access to the instance to call it although I can use an instance to call it if I want I can simply reference the actual name of the class and this does not access any specific instance it only accesses these class attributes or anything specific to the class itself ok so that has big class methods now let's get rid of those and let's talk about static methods so sometimes I'm actually in delete the entire thing you want to create classes that kind of organize functions together so for example you know when you say like import math like that and then you get access to all these math functions like math dot abs or math dot square roots or whatever it is you're gonna use well what they sometimes end up doing in an object-oriented programming this is pretty common is when you have a bunch of functions that you would normally just define like you define like add one like this yeah I would do something you define add two like this well what you want to do is you want to actually organize them into a class and the reason you do that is just so it's a it stays a little bit structured you can move all those classes together to another module and continue to use them and to do something like this you want to use what's called a static method now let's make a class called math and what I'm gonna do in here is I'm gonna define some methods or some functions that I'd like to be able to use but that are not specific to an instance so I don't want them have to make an instance of this math class to be able to use these methods I want to be able to call them at any points and it doesn't matter if I have an instance of the math math class or not I would like to be able to use them so what I'm gonna do is actually create what's called a static method now static means not changing right it means staying the same and that is a really good way to describe what these methods do because they do not have access to an instance just like the class method all they do is something they do something but they don't change anything that's the idea behind a static method they don't change anything because they can't they don't have access to anything so in here what we're gonna do is just say define add five and in here I don't even need to put a cell for a CLS because this is not going to access anything all its gonna do is just act as a function that is defined inside of this class and again some of you I'm sure are yelling saying what's the point of doing that why don't I just define a function globally well it's more of an organizational thing and there's some more specific applications in which you would use a static method so I do need to show them to you so here we're gonna take a number and all we're gonna do in this method is return X plus five so now if I want to actually use this what I can do is I don't need to say like M equals math like that and make an instance that's not necessary I can simply write the name of the class and math dot add five let's put five in here let's have a look if I got rid of the s and we get the value ten so this is called a static method and we can make as many of these as we would like just as we can make as many class methods as we want so maybe we do add ten right and then we have bat like that and we can change this method to say add 10 and now if we run this we get 50 so that is a static method notice it doesn't need anything in fact what I can actually do is say define you know PR let's say that's gonna stand for print let's make this an @ static method and now let's just print run like I'm just showing that you that you don't need any attributes in there are arguments and let's just call PR and now you can see that we get run and since I printed the value of that it prints them none but there we go like that okay so that is static methods and class methods and to be honest with that that is pretty much everything you need to know about classes and objects at least at a beginner level now there is some more interesting things that we could talk about but in the idea of keeping this more for beginners and so that everyone can kind of understand doesn't get to confuse I'm number frame from discussing anything further but I hope this really gave you a fundamental knowledge of how classes and objects work in Python a little recap here is to remember that everything we work with is an object in some sense we have functions which are objects we have strings which are objects integers are objects and what an object does is it a in instance of some class and that class defines the properties and almost kind of the blueprint for that object it says okay so if we have a string we can use the method like upper lower if we have an INT we can add integers together and a class the type of an object is very important because it defines the behavior in which it can exhibit so that has been classes and objects in Python and introduction to object-oriented programming I hope you guys enjoyed if you did please make sure you leave a like these videos are not that easy to make and they are definitely time consuming so I would appreciate it subscribe to the channel and of course let me know if you have any questions or if there's anything you would like to see in the future"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Object-Oriented Programming (OOP) in Python",
        "Video Title":"Python Object Oriented Programming in 10 minutes \ud83d\udc0d",
        "URL":"https:\/\/www.youtube.com\/watch?v=q2SGW2VgwAM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/q2SGW2VgwAM\/hqdefault.jpg",
        "ID":"q2SGW2VgwAM",
        "Publish Time":"2020-12-28T21:27:28Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain object oriented programming in python so sit back relax and enjoy the show if i could have just a moment of your time please like comment and subscribe i would greatly appreciate it welcome to today's topic on python object-oriented programming also known as p-o-o-p and in today's video we're going to be creating objects an object is an instance of a class by using programming we can create representations of real-life objects so look around you wherever you're sitting or standing right now you are surrounded by objects next to me i have a phone a television some snacks and i'm talking into a microphone point being we can use programming to mimic real world objects by assigning a combination of attributes what an object is or has and methods what an object can do now in order to create an object we'll need to create a class a class can function as a blueprint that will describe what attributes and methods that our distinct type of object will have you can either create your class within your main module or you could create a separate file dedicated solely for your class now to create a class we would type class and then the name of the object that we would like to create so today i would like to create some car objects because i like cars so we would type car and a common naming convention with class names is that they should be capital so car is going to have a capital c and for the time being we need to type in something i'll just type in pass as a placeholder so if you have a small program it may be better to write your class within your main module but if your class is fairly large you may want to consider placing your class within a separate module so if you were to take that route we would go to file new python file and we would name this car click python file and we would declare our class within the separate module so class car and for now i'll type in pass then we just need to import this class so within our main module we would type from the name of the module import the name of the class from car import car now objects can have some combination of attributes and methods attributes describe what an object is or has so what are a few attributes that cars might have they might have a make so let's create a few variables for the time being i'm just going to use none as a placeholder cars can have a model a year and a color now objects can also have methods what kinds of methods could cars perform perhaps a drive method and a stop method so let's define those def let's say drive and we'll have one argument self self refers to the object that is using this method now what do we want to do when we call this method let's say this car is driving let's create a stop method as well tef stop and we will print this car is stopped we now have all of the different attributes and methods we would like our car objects to have but there is one more thing that we need it is a special method called the init method that will construct objects for us in other programming languages this is known as the constructor so we need a special method that will create objects for us so we need to define this method def and the syntax on this is somewhat strange it is two underscores i n i t it's short for initialize 200 scores again and then we need at least self as an argument and then we can actually assign our car objects unique variables so take all of these attributes that we have and we're going to place them within this init method now we can receive arguments when we create car objects but we need to pass them in as arguments to our init method so we need to set up some parameters let's say in order to create a car object we need a make a model a year and a color then when we receive these arguments we can actually assign them to each car's specific attributes but we need to precede each of these with self self is referring to the object that we're currently working on or creating so self.make self.model self.ear and self.color and then when we assign these we're going to say self.make equals whatever make that we receive when it's passed in as an argument self.model equals model and continue that pattern for year and color all right that is all we need for our class car we have a constructor we're assigning arguments that we receive to the attributes of our car object and we also have two methods one for drive and one for stop now we can start creating some car objects so going back to my main file here to create an object we need a unique name for it let's call this first car just car one equals the name of the class car then a set of parentheses now in order to construct a car object we need to pass in a matching set of arguments you can see here that we need to pass in a make a model a year and a color so what kind of car should we make let's say that the make is going to be chevy we need a model perhaps corvette a year 2021 is good and a color let's say blue all right now let's actually access some of these cars attributes and i should probably put this one in a print statement so print car ones make and this should print chevy then we can do the same thing for model year and color so let's change some of these around model year and color yep this object is a chevy corvette 2021 and the color is blue and we should have two methods as well so car one i would like this car to use its drive method this car is driving and let's have this car use its stop method car one dot stop this car is stopped there's one thing that i should mention real quick because i forgot to mention it earlier so within our init method you can see that we need five arguments in order to construct a car object self make model year in color but when we pass in our arguments we're not passing in anything for self we only have four arguments here that's because with python we do not need to pass itself that's done automatically for us we're referring to the object that we're dealing with as you can see with our drive and stop method we need to pass in self in order to execute our method but when we call this method we do not need to do so so just remember with python with self we do not need to pass in anything for this argument that is all now the nice thing about this is that we can reuse this class as a blueprint to create more car objects we just call that init method that constructor so this time let's create a second car called car 2 and this will be a different kind of car what kinds of arguments should we pass it let's say this is a ford mustang the year will be 2022 and the color will be red all right let's check car to use attributes and let's have car 2 use its drive and stop method this is a forward mustang the year is 2022. the color is red this car is driving and this car is stopped one other thing that we can do too is that within our methods here let's replace car with the name of the model that we're working with so this plus self dot model plus is driving now this self keyword think of it as you're replacing self with the name of the object that we're working on if car one is using its drive method replace itself with car one if this is car two that called this method then replace itself with car 2. think of it that way and let's do the same thing for stop this plus self dot model plus is stopped all right probably don't need these anymore so let's have car one use its drive and stop method this corvette is driving this corvette is stopped let's try this with car two this mustang is driving this mustang is stopped now you can have them do things independently too let's have car 1 use its drive method and car 2 use the stop method this corvette is driving and this mustang has stopped in conclusion a class can function as a blueprint to create objects we can assign attributes what describe an object is or has and methods what each object can do and then within our class we have a special method called the init method we can pass in some arguments and assign these arguments to each object's attributes and then we can reuse this class as if it was a blueprint so we can create more objects out of it so that is the basics of object-oriented programming in python if you would like a copy of all this code i will post this in the comment section down below but yeah that's the basics of object oriented programming in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro [Music] you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Object-Oriented Programming (OOP) in Python",
        "Video Title":"Python Object Oriented Programming (OOP) - Full Course for Beginners",
        "URL":"https:\/\/www.youtube.com\/watch?v=iLRZi0Gu8Go",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/iLRZi0Gu8Go\/hqdefault.jpg",
        "ID":"iLRZi0Gu8Go",
        "Publish Time":"2025-01-29T15:19:09Z",
        "Channel":"freeCodeCamp.org",
        "Channel ID":"UC8butISFwT-Wl7EV0hUK0BQ",
        "Transcript":"Master the fundamentals of objectoriented programming in Python and transform the way you write code this comprehensive course takes you from basic concepts like classes and objects to Advanced topics like inheritance and polymorphism perfect for developers looking to level up their python skills you'll learn through practical examples and real world applications Danny Adams developed this course hi guys welcome to this object-oriented programming in Python course now if you struggle to get your head around objectoriented programming in the past then this course is for you as object-oriented programming can be pretty daunting for beginners as there are many Concepts principles and terminologies such as abstract classes polymorphism encapsulation abstraction and the list goes on but by the end of this course you'll fully understand everything that you need to know about these Concepts to go on to develop objectoriented software in Python and the great thing about everything that you'll learn in this course is that all of the concepts that you'll learn also apply to other programming languages that support object-oriented programming such as Java C JavaScript and PHP so it's going to be very easy for you to learn and understand other languages and Frameworks after completing this course so to take this course you should know the basics of python such as variable functions if statements and for Loops uh so you just need to know the very very Basics you definitely don't need to be any expert in Python and if you don't have much python experience but know these Concepts from other programming languages then that is also fine you should be able to take this course and also you don't need to know anything about objectoriented programming to take this course my goal for this course is to teach you as a complete beginner so what will you learn in this course so the first part of the course assumes that you're a complete object-oriented programming beginner and introduces the very fundamentals of objectoriented programming such as creating classes and objects attributes and methods get and set of methods and why they are important properties and why you should favor properties over GS and Setters in Python static attributes and methods public protected and private access modifiers and Abstract classes and as the course progresses we'll start to introduce important objectoriented programming Concepts such as encapsulation abstraction inheritance and polymorphism and this is where object-oriented programming and its advantages will start to make a lot more sense to you and once you've completed this beginner's course if you want to take your skills to an advanced level you can check out my objectoriented programming in Python course on udemy which covers more advanced concepts such as composition versus inheritance coupling The Fragile based class problem and dependency injection it also covers all five solid principles and six of the Gango 4 software design pattern giving you everything that you need to write elegant organized and maintainable objectoriented software and there's also a book version of this course available and I created this book as it can save you time for having to make lots of notes throughout the course and it makes it really easy for you to quickly revise these object-oriented programming Concepts principles and patents so if that sounds like it would save you some time and make it easier to revise then you can check out the Amazon and gumroad links in the description below so I'll be using vs code throughout this course and if you want to set up like me you can follow this link here and here are the VSS code python extensions that I use and all code examples that we go through in this course are included inside of this GitHub repository which you can see right here and if I go to the root of the project you can see that we have uh each section of the course has its own folder so we start off with this folder here and you can see we have different files for the different examples that we go through all right so let's get started so the first thing that I want to show you is that everything that you create in Python is an object so let's create a couple of variables so we can have a string variable and called name and we'll assist assign that to Dany and we'll say age equals 29 so an integer so let's actually have a look at what um type of objects these are so if we print the type of name and we also print the type of age and then let's run this file uh so we can say python script.py we can see that this uh name variable is assigned to a string object so an Str Str object and objects are made from classes so you can see that this object this name object is made from the class St Str okay and classes are basically the blueprints for objects meaning that they describe what an object should look like so we can also see that this age variable is assigned to an integer so in Python that means that this uh is a int object so it's made from the class int and different objects have uh different behaviors so for example on string objects there are different functions or methods as they're called in objectoriented programming that allow us to manipulate the data contained within this object okay so the data here is just a sequence of characters that spells Danny so if we call name dot okay we can see that vs code now provides us with a load of uh methods or functions that are available on this string object so if we say uh name. upper uh we can see that this will manipulate the data contained within the string object so if we run this we can see uh we need to get rid of this type actually so let's run that again and you can see that the data has been manipulated is now uppercase but if we have a look at this uh the methods or behaviors available on an INT object you can see that they are different from those contained on a string object okay so if we look at the uh name variable here so the name variable is a is assigned to a string object okay which is built into python so the string object is Created from the string class which is built into Python and the St class or the string class defines what each string object looks like and provides useful methods which are functions that operate on certain objects such as name dooper to make all the letters in the string object uppercase um so they so the methods basically or the functions manipulate the string data so the int and the St classes demonstrate some of Python's builtin classes that we can use to create data structures like strings or integers but we can also create our own classes then create objects also known as instances from those classes so let's actually create our own class now so let's create a dog class and on that dog class we can Define what information so what data or attributes and what behaviors or methods or functions every dog should have so first let's create a very simple dog class that has no data and just one Behavior so the way we create a class in Python we say class which is a python keyword and we can call this class whatever we want so let's just call it dog then we have a colon and then within the class we can Define either data or attributes and we can also Define uh methods or functions so a method is basically just a function contained within a class so we can say uh def bar and then in methods we have to put this self parameter now don't worry about this for now we're going to come back to this and let's just print uh wo woof okay so now that we've created a dog class we can use it to create dog objects so let's Define a variable called dog and assign it to an instance of which means an object made from the dog class so we do that by calling the class name and essentially call ing it or instantiating it so here we are creating a dog object and assigning it to a variable called dog so let's call this dog one and now what we can do is um we can access the uh method on this dog uh object so dog one object by saying dog one dob okay so that's how we access uh methods on objects so on this dog one object we have a method or a function called bark and then way we access that is by calling uh the variable name Dot and then the method name okay so let's run this and see what we got and we got wo woof okay we can also create other objects from this class so we can say dog 2 equals dog and say dog 2. bark and again again we get the same thing okay but this is not very useful because all of the objects that we create from this dog class will be the same they just have this bark method which is I does the same thing and it doesn't matter uh what object we call Bark on it's always going to just print woof woof it's pretty useless really so let's add some attributes or data fields to this dog class so that each dog object or instance can have a name and a breed so we can do this in the dog class by defining an init method okay so init is a special method in Python that is basically allows us to um set up some data fields or data for the for the class okay so let's just actually create this for now and then we'll explain it afterwards so again ignore this self keyw but we want to give each dog a name and a breed okay so the way we can do this is we say self. name equals name and we can say self. breed equals breed okay so these uh the names don't have to match by the way we could call this I don't know first name for example and then ass sign it's a first name however generally um it is you know the normal thing the sort of convention to just call them the same thing basically okay so we can see here now that when we are creating these dog objects vs code is showing us that we have an error so if we hover over this we can see the arguments are missing for the parameters name and breed so whenever we create a dog object now we have to pass a name and a breed so let's call this dog Bruce and this can be a let's say a Scottish terrier and this dog can be called freyer and this dog can be of breed Greyhound okay so now what we can do is we can actually access the data on this on these dog objects so we can print uh dog one. name and we can also print uh dog one. breed okay so these are data fields on the dog object this dog one object has a data field for name and it has a data field for breed and we can access those using the same dot notation that we used to call uh methods okay and we can also do the same for dog two okay so we now have a way of kind of uh making uh different dog dog objects uh different from each other so let's run this script and we can see that we have Bruce Scottish terrier and then we have Freya the Greyhound okay so let's just recap what we've done so far so here we've created a dog class which has an inate method and the inate method with a double underscore on each side is a special method in Python that is ran only once when an object is instantiated so we can see here we are instantiating the dog class or creating a dog object from this dog class and assigning it to dog one and we're doing the same here creating a dog object and assigning it to a variable called Dog 2 and this init method is run only once when an object is created or instantiated so it's run once here and it's ran once here when we create these objects and it's very common to set up an object's data inside of this method so we can see here that when we create this dog one object that we are setting up the data stored inside of this dog one object and it's Unique to this object and we do the same for dog two we pass the data and we set up some data fields inside this init method when we create the object and again this is unique to this dog 2 uh object we can also create different types of objects so so far we've created uh dog objects but let's say that each dog should have an owner and each owner should have a name an address and a phone number so so let's create a class that allows us to create owner objects with those data attributes so let's come down here and define a class called owner and this needs to have uh so each owner needs a name an address and a contact number so if you can remember we can add data fields to an object by uh defining an init method okay which is a special python method method which allows us to kind of initialize objects so let's create an init method and again we pass the self parameter which we will get to a little bit later in the course and we're going to pass a name parameter and address and a contact number okay so then we can assign uh these sort of parameters that we pass when we create an owner object and assign assign them to data fields within the owner object okay so we can do this by calling self. name so we create a data field on an owner object called name and we assign it to the name that we pass when we create an owner object okay so we can say name we can do the same for address and we can do the same for the contact number and just to show you that these can be different let's call this one phone number so we're calling the data field on the object phone number and the parameter we're going to call contact number okay just to show you that they can be different uh names okay so that's all we're going to do now for this owner class so in our dog class let's add an extra parameter in the init method so that we can pass and owner object when we create a new dog object okay so then we can create an owner attribute with self. owner and assign it to the owner object passed in as an argument during the dog object creation so let's create an owner parameter in this init method and we can then create a data field on each dog class called owner and and assign it to the owner uh object that we pass in okay so now we can see we get a red line again because we need to pass an owner to each of the dogs so what we can do here is we can say owner one equals owner so we create an owner object we can give this owner a name so let's give it a name of Danny and then some address so let's just say one 122 Springfield drive and then we need to give it a contact number so let's just say 888 8999 and we need to pass an owner to the dog so we can pass the owner here okay and that's going to now be a data field in this dog object okay so now this dog dog one has an owner of owner one this owner object that we create here and and we can do the same for dog 2 so we can call this owner 2 and let's just change the name to let's say Sally and we'll just keep this the same and we can pass the owner here owner to just like that and what we can do now is we can actually access each dog's owner data uh using dot notation so let's actually get rid of this for now just so we can see what's going on so we can say dog one okay now if we press dot we can see that each dog now has an owner uh attribute okay or data field so we can say dog one. owner so that's going to give us this owner object but what we actually want to do is print let's say the uh owner's name okay so we can say owner. name you can see here we're getting the owner object uh owner objects have fields for name address and phone number and you can see those are showing up here we have name address and phone number here that we can access on this owner object contained within this dog object okay so if we actually uh print this and copy paste that in here and let's do the same thing for dog two and let's run the script and you can see that the owner of dog one is Danny and the owner of dog two is Sally which is correct because we passed owner 2 into dog 2 when we create this dog 2 object and the owner's name is s okay so just to summarize we've kind of displayed here that we can create different kinds of objects so we can Define different kinds of classes and we can kind of have relationships between different objects so for example dog objects have owners okay so we pass an owner object into uh dog objects when we instantiate them or create them and we can see that dog objects have a data field of owner which is assigned to the owner object that we pass in during object creation Okay so here is the object creation for dog one and here we create an owner object and we pass that into this dog uh class when we instantiate the object so let's now clarify all of the concepts that we've learned so far and then we'll also create another simple example to help you understand the concepts of classes objects attributes methods the self parameter and instances in Python so first of all let's just clarify uh some of the basic objectoriented programming Concepts that you've learned so far so a class is like a blueprint for creating objects it defines what attributes or data and what methods or functions or behaviors that the objects created from this class will have and an object okay so an object is an instance of a class so think of an object as a specific example created from the class blueprint with its own data attributes are the variables that store information about an object so um for example a dog uh object has a name attribute a breed ATT attribute and an own our attribute so methods are the functions defined inside of a class they Define what actions or behaviors an object can perform so dog objects each have a bark method they have their own bark method um and they can perform this Behavior so let's now take a look at the self parameter which we've been avoiding so far so self refers to the instance or the specific object of the class itself so let me just clarify that a little bit so when I say refers to the uh specific object of the class itself so this uh is a specific object of the dog class it's its own you know thing it's it's its own object and this is a separate object okay so they these are both dog objects but they are different okay we're passing in different data and we're assigning them to different variables so this uh self parameter or self key word is used to access the uh specific objects attributes and methods from inside of the class okay so let's again clarify this so when we instantiate this dog object okay we pass in the variables we pass in a name variable a breed and an owner now within the class uh this self refers to this specific object okay that we are creating here so what we're saying is that self so on this specific dog objects object it should have a name attribute assigned to the name that we pass in uh which is Bruce okay so again for the breed we we pass in the breed when we instantiate the uh object and we can access the current object with self and we say that on the current object there should be a data attribute called breed and that should be assigned the value that is passed in during instantiation so hopefully that makes uh sense to you uh that we'll probably get you will get more familiar with this uh as we go further down the course it will make a lot more sense as we explain some other uh objectoriented programming Concepts such as uh static attributes so when we get to the static attributes part of the course I think this will make a lot more sense if it doesn't already Okay so let's leave that there for now so let's just finally discuss what is an instance or what it means to instantiate so when you create an object uh from a class you are instantiating the class okay and the object is an instance of that class so to be honest you will have probably heard me mixing up uh class and object when I when I say instantiate an object what I actually really mean is instantiate the class to be more precise so if I make that mistake uh I apologize but essentially we are instantiating this dog class to create an instance of the dog class which is a dog object so an instance of it the dog class is a dog object okay so that's just the kind of terminology that is used within objectoriented programming so let's now create a very simple example to clarify further all of the object oriented programming Concepts that we have covered so far so we're going to create a very simple class called person and we're going to give this person attributes or data for name and age and if you can remember we can do that in the init method so we pass the self parameter and then we can say name and age and we can say self so self refers to the uh current or specific objects uh the current or specific object and then we can give it this uh give this object a uh data field of name and set it to the name that we pass in during the object creation okay and we can do the same for age and let's actually give this person uh let's give each person object a uh Behavior or a method that allows them to greet okay so we can say print and we'll do a format string here and we'll say uh hello my name is and we will say self. name and I am self. AG years old so you can see the reason we pass self as a parameter or the reason we have a self parameter on each kind of method that we Define within a class is because it allows us to access the data that we assigned to that object in the init method okay so it gives us access to the current objects data okay which is very useful as you can see here it allows us to greet someone in a kind of personal way so let's just again explain the code what we've uh explained the code uh that we've created so far so first of all we have a class definition so class person right these two kind of words here uh this defines a new class called person it's like and a class is like a template for creating person objects then we have the special python method the init method uh that automatically runs when we create a new person object then we have self. name equals name and self. AG equals age which initialize the attributes name and age uh for each specific person that we create for each specific person object that we instantiate then uh we have the uh self keyword which allows each person object to have its own values for name and age so the attributes so self. name and self. AG are attributes of the person class they store data about each person object and then we have a method called greet which is a method that displays a greeting message and self uh gives access to the specific person objects name and age okay so now let's actually go ahead and create a person object so we can say uh person one equals person and we'll give it this person person a name of Alice and an age of 30 and let's call person one. greet okay and let's run this so you can see we got hello my name is Alice and I am 30 years old so you can see the um the Behavior now the method on this object is now kind of personalized right each method is personalized because it has access or it is access accessing this current uh person one objects data fields for name and age and we can do the same thing uh again but create uh call this one person two and we will give this uh person a name of Bob and Bob can be 42 and if we run the script again we can see we get a different personalized greeting for each person okay so let's again uh let's go ahead and explain this uh code here so first of all we have instantiation so person one equals person and then we pass in the data so this creates a new person object with the name of Alice and an age of 30 and here we have another person object that we are creating and assigning it to to a variable called person two and this one has a name attribute of Bob and an age attribute of value 42 and person one and person two are both instances of the person class and each instance has its own unique data for name and age okay which we can uh set using self we can then all the methods stored on each object so person one has its own greeting method and person two also has its own unique greet method okay so person 1.g greet calls the Greet method on person one which uses the name and age attributes specific to person one okay and the same is also true for person two okay so each person object displays a unique greeting based on its attributes and this shows you how different instances or objects of the same class can hold different data and perform the same behavior with that data so again just to summarize a class is a blueprint for creating objects in this case person is the class an object or an instance is a specific example created from the class so person one and person two are both both objects or instances of the person class we have attributes which are variables okay so we have attributes for name and age that store uh data about an object okay so these are attributes of the person class we have methods which are functions uh defined in a class that perform actions and greet is a method that displays a greting and then we have the self keyword here and also here whicher refers to the specific instance of a class so here this is a specific instance of a class and here person two is also a specific instance of a class and it gives each object access to its own attributes and methods so this example introduces the fundamentals of objectoriented programming in Python providing you with a nice foundation for understanding how classes and objects work and again don't worry too much if you don't fully understand the self keyword for now it will make way more sense once I introduce you to static methods and attributes a little later on in the course so we're now going to have a look at the different ways of accessing and modifying data in objects and we'll also discuss the preferred way of doing this in Python so let's create a user class that defines what data or attributes and what Behavior or methods a user should have so we'll create a class called user and we will um Define some attributes within the init method so a user is going to have a username an email and a password and we can set those attributes on the object using the self keyword so we can say the current object and we want to set a data field or an attribute on that current specific object called username and assign it to the value that we pass in when we create the object okay and we'll do the same for email and we'll do the same for password okay we also want to define a method that uh allows us to say hi to another user okay okay so we'll create a method called uh say hi uh to user we have the self uh parameter which we always pass into these uh methods that are you know specific for each object okay um and we're going to pass in a user that we want to uh that we want this user to say hi to okay so then we're going to print uh a message message and what we'll do is we'll say sending Sending message to user. username uh let's see what the mistake I think that's okay and then we'll say uh colon hi user dot username it's self. username okay so in here this say hi to user method we pass a user which will be a different user object you can see here that user object we are going to access the username on the user object that we pass in and we're also accessing the username of the current user object Okay so let's actually show you uh an example of how to use this uh class now so let's first of all create a couple of users so we'll have user one and let's give this guy a username of Dan the man and we'll give him an email of Dan gmail.com and a password of 123 and then we'll create user two uh so this can be Batman and we can say bat at uh let's say outlook.com and the password can be ABC so let's say that we now want to uh we now want user one or user one wants to say hi to user two so what we can do is we can say user one dot and we want to say hi to user we want to say hi to user to okay so now if we run the script you can see here Sending message to Batman so we are sending a message to Batman uh and the message that we're sending is hi Batman it's danam the man so you can see here again on this say hi to user method we pass the user that we want to say hi to so the current object that we are dealing with is user user one so self is effectively referring to itself so user one and we are saying hi to user 2 and we are accessing the data fields on user 2 so let's now take a look at how we can access and also modify or update the data within an object so let's just get rid of this user two for now and just have deal with user one for Simplicity so as we've already shown you can access data on an object using dot notation okay that's very simple and but we can also assign uh a new value to this uh email attribute for user one so what we can do is we can say user one. email is equal to uh let's say Danny at uh gmail.com okay instead of Dan okay so now if we actually print the uh email of user one after modifying it we should see a different value so you can see initially it's Dan gmail.com and we've modified it here to Danny gmail.com okay but the problem we have is we can actually modify this to any value that we want for example 1 two 3 or let's say uh Jim for example or just Dan right we can just modify it to a non email address okay so this is not a valid email address but we can just assign it any value that we want so this is not good okay so what we actually need is a way of controlling the way that we can get and set or read and modify the data on an object so what I'm going to do now is I'm going to show you two different ways of doing this of getting and setting data on an object so the first way I'm going to show you is the kind of traditional Java style approach which is was sort of popularized uh popularized in the Java programming language and then I'm going to show you the more modern uh python way of doing things using properties and this is also popular in in the C uh programming language so the first approach that I'm going to show you of uh safely accessing and modifying data is the kind of traditional approach which is where we make the data attribute private and use GAA and Setter methods or Getters and Setters so first of all let's modify our user class to make email protected and I'm just going to get rid of this say hi to user method because we don't really uh need it anymore so the way we make a data attribute uh protected is by prefixing it with an underscore okay so this is the kind of python way of making a data attribute protected okay and when we make an attribute protected it means that we shouldn't uh read this attribute outside of this class or any of its subclasses and don't worry about sub classes for now if you are unfamiliar with them because they will be introduced in The Inheritance section of this course so basically we make an attribute protected in Python by prefixing an underscore in front of the attribute name so I just want to have a quick discussion of kind of Python's take on access modifiers so unlike languages such as Java or C++ which enforce strict uh access control so using keywords such as private or protected python takes a more relaxed approach so in Python a single underscore before the name for example underscore email is a convention in Python that indicates that something is intended for internal use within the class or module and it means that it's um should not be used outside of the class so let me show you what that means so let's create for example a method uh I don't know let's call it uh get email right so this is essentially a getter method and what we do is we just return email and again we need to pass self so we can actually access the data on the object and we return self. email so here we are accessing the email field this protected email field within the class okay within the user class which is no problem we can do that um however um what we shouldn't do now is access this email field outside of the class okay so if we call user one. email we can see that it no longer exist be uh exists we we get this underscore email which does exist however in Python uh python developers will look at this and think hm why are you accessing a protected attribute you're not supposed to do this okay so that's a kind of python convention really python doesn't really really enforce this restriction right it doesn't you know throw an error here it's python doesn't say email is protected we shouldn't be accessing this let's you know throw an error and you know abort the program like you know programming languages would such as Java or C it's kind of um the attribute or you know sorry the uh the protected attribute is still accessible from outside of the class so you can see here we've accessed this uh private or protected uh attribute but it signals to developers that it's meant to be protected or internal to the class okay so it's meant to be used in the class as we've done here we've used it within a method however we're not supposed to do this outside of the class okay it's just a python convention basically so for example even though we made email protected we can still access this underscore email from outside of the class but in Python you are trusted not to so underscore email is now only supposed to be used within the class so let me just get rid of this uh get email uh method and maybe give a better example so if we have a method called clean email and let's say that what we want to do here is basically make the email lowercase and strip any white space uh at the beginning or end of the email so what we can do here is we can just return self. email and we can say uh lower and strip okay so we uh make it lowercase and we strip the trailing and leading white space so let's now remove this we're not supposed to access uh email outside of the class anymore and let's just remove this so let's now print uh user one. clean email and run the script so what if we actually provide a kind of unclean email with an uppercase letter at the front and some white space and if we actually print user one. email now we're not supposed to do this but I'm just going to show you uh for Dem demonstration purposes what the initial email is and what it's kind of cleaned to okay so we have Whit space at the front and back we have an uppercase letter and then we clean the email within uh the class basically so I just wanted to sort of demonstrate here um why you would want to actually access something within the class but not outside of the class so by prefixing email with an underscore we are effectively communicating to the python developers that this is a protected attribute and it shouldn't be accessed outside of the class okay so if we now do user one uh. email equals uh you know just some random invalid email this is something that you are not supposed to do right because we have pre prefixed this with an underscore so effectively this is uh this is poor kind of uh python etiquette if you like um so what we can actually do is provide some methods within the class for modifying this email field in a controlled way rather than just allowing um uh the the email field to be assigned to any value outside of the class and that's kind of the advantage of making this email feel protected we can now provide methods which we will do shortly for uh controlling how the email is set uh so that it can't just be set to any invalid value outside of the class before we move on with this example I just want to to discuss Python's consenting adults philosophy so gido van rossom the creator of python has this consenting adults philosophy which highlights Python's emphasis on developer responsibility rather than and strict rules so this philosophy suggests that developers are trusted to respect the convention of not accessing underscore prefixed attributes or methods and the access is not strictly prevented as python will assume that developers will act responsibly and won't misuse or access protected members unless it's absolutely necessary however it is still possible to make a attributes private if absolutely necessary so you can do this by actually putting a double underscore in front of the attribute so for example if we want to make email uh private we can put a double underscore in front of it and now it's actually impossible to access email outside of the class so if we try to run this file you can see that python will now throw an error because um this attribute is protected and effectively it says that this object this user object has no attribute of double uncore email even though we created one with this name so how does this work under the hood so python will actually change the name of this attribute so double double uncore email so that an error will be thrown if you try to access it outside of the class so behind the scenes when you put a double underscore in front of the attribute python will do something called name mangling which basically means to change the name of the attribute so that it can't actually be accessed outside of the class or in other words if we try to access the variable outside of the class we will get an error because under the hood python has actually changed the name of the attribute Okay so kind of makes the attribute effectively private okay so it kind of enforces the uh the rule rather than leaving it up to the developers to you know behave themselves as was the case when we have a protected uh attribute with just this single underscore so I just now want to summarize the differences between protected and private variables so protected with the single underscore and private with the double underscore both of these variable types can be accessed within the class so we could access a protected or private variable within the class that's perfectly acceptable uh however protected variables can be accessed outside of the class but as a good python developer we should respect that rule and not access P protected variables outside of the class so this is actually something that we're not supposed to do here however with private variables also known in python as name mangled variables so let me just actually uh show you how that is spelled just in case you're wondering what I'm saying so it's name mangled and mangled basically kind of just means changed basically under the hood as we discussed earlier so private variables cannot be accessed outside of the class so protected variables can but you're not to supposed to whereas private variables with the double underscore uh cannot be accessed outside of the class because under the hood python changes the name of the attributes so that it can no longer be accessed now the question then arises uh of whether you should use protected or private variables or when should you use each type of variable so in most cases using a protected variable is is enough to Signal internal use within the class and protected variables generally offer better readability and flexibility making them the Preferred Choice in Python so generally you should probably reach for protected variables rather than private variables unless it's absolutely necessary to make the variable private and make it effectively much more harder to read outside of the class so if we now move back to our example uh we can see here that we made email protected okay so we now should not uh read or modify the email outside of the class so you may now be thinking uh how do we actually uh read email or modify email outside of the class and we do this uh using geta and seta methods so I'm just I'm just going to going to get rid of this clean email uh method for now and let's see so let's also remove this so let's create a getter for email so we can see email is protected so we can't read it outside of the class so this is not great because we should be able to read the email outside of the class uh but currently we we're not supposed to right so we can create a method a geta method called get email and this is a convention uh throughout pretty much all programming languages or all object-oriented programming languages uh for creating geta methods so what we do is we return self. email so the convention is basically to prefix the uh name of the variable with get so in Python we have getor email you know in Java we would probably have uh get email ma like this with the kind of um this style of casing uh so uh in Python we have the sort of uh snake case um and then we just return the uh name of the variable okay so now outside of the class we have a way of getting the emails so we print the email of user one of get email okay so we can see here uh if we're not supposed to do this because it's protected with with an underscore we're supposed to be responsible python developers so we can just call get email the geta method and then if we run this script we get back the email okay so this is all okay so far but what if we actually wanted to set date uh the email to a different value so let's actually just make this email kind of valid again so if we want to set the email we could do this and we could set it to any value however we're not supposed to do this again this is a protected attribute so we should not be reading or uh updating this value outside of the class okay or we shouldn't be doing this directly okay so what we need to do is we need to create a Setter method okay so we do this by convention we call it set email so set and then the attribute name so set email and inside of here what we can do is we can pass the new email okay so this is the email that we want to set it to and we can say self. email is equal to the new email address okay so now instead of doing this which we're not supposed to do we can say user one. set email and we can pass the new email so maybe Danny outlook.com okay so then if we print the email so if we get the email again we should get that updated value so you can see there we have the updated email address so again because we made email protected and we can't or at least shouldn't as python developers access it outside of the class we've had to provide methods to read or modify this email attribute so you might now be thinking but why do we need to do all of this when we could just read or modify the data by accessing the data directly with say user. email as this seems to require a lot more work and the reason that we do this is because it gives us full control over what happens when an email is read or modified for example if we wanted to print the email address and the current time to the terminal every time any uh user objects email is read we can easily add some code to this get email uh method okay so we can easily print uh something to the console so we can say email accessed at uh and let's just import the datetime module so from datetime import date time and we can say date time.now to get the current uh date and time and let's now run the script and we can see that whenever we access an email it's going to log to the terminal email accessed at a certain time now if for example there are multiple Parts in our program where we are accessing email but we still wanted to log this every time an email was accessed then we would have to make changes to multiple parts of our program every single time that this method was called okay so we'd have to make lots of modifications to our existing program whereas if we just have this geta uh method then we can just add it to this uh method in one place and every time that we access an email this will be logged to the console so you can see that by using geta methods um it kind of um provides a kind of single point where all of the logic can be uh placed when we get an email all of the kind of things that we want to do when we get an email can be placed within this uh geta method and it so effectively it's providing a controlled way of accessing email and we could also do other things for example maybe we would want to check whether a particular user is authorized to read emails you know if they are maybe an admin then we will allow them to read the email otherwise we will not provide them access maybe we could throw an error if the user is not an admin so it provides a controlled way of reading the email address rather than just accessing it directly with say user one. email okay so and the same thing is true for setting an email because currently we can set email to any random value so let's now add just a little bit of say validation logic to uh help to make sure that emails are actually set to email addresses to valid email addresses so what we can do in our set email uh method we can say if there is an at symbol in the new email then we can set the email otherwise we will not set it and maybe we could also throw an error if there's no at symbol but let's just keep things simple for now so let's actually have a look at what we've got here so this is an invalid email address it has no at symbol so let's see what happens so you can see here the email was not updated because it didn't contain an at symbol whereas now if we provide an at symbol and.com you can see that the email is now a valid email and it is updated it's set okay so we can you can see the set a method is providing a controlled way of updating email addresses to ensure that the the uh users of this class or the other parts of the program using this class cannot do anything stupid okay so it really helps to uh improve in this case the Integrity of the data throughout our program and of course this is not complete we would also need to have other validation checks but it's a nice simple example so in summary Getters and Setters allow us to access and modify data in a controlled way so for another example um before we set a username we could actually check that the username is not already taken in the database okay and before setting a password we could check that it's at least 8 kartic long and contains both letters and numbers and again we could do this outside of the class okay by just accessing these fields directly without gets and Setters but then every time set a password we'd have to remember to validate it okay and this leaves it possible for invalid passwords to be set so it's much safer and also less code in the long run and much more maintainable to do the validation in one place within the class however so far we have looked at gets and sets which is kind of the traditional Java style objectoriented program programming approach where we kind of set uh variables as protected or private and then provide gets and Setters for each attribute and this is a pretty verbose or long winded way of doing something very simple and it's often why you'll hear people complain that Java is a verose programming language and luckily python def uh provides a much nicer kind of cleaner and less loated way of effectively doing the same thing using what uh something known as python properties and that's what we're going to take a look at next properties are the recommended approach to controlling access to data in Python so here we have an example a very simple user class with an init method which initializes an objects uh data attributes so we give objects a username uh an email and a pass password and here we are creating a user object passing in some data and you can see here that we are accessing the uh a data attribute directly okay so we're saying user one. email and we are setting it to just some invalid value and if we want run the program you can see we got no problem this is all okay so this is not good uh because we can freely um because any other classes or any other parts of our codebase or our software effectively can uh freely read and modify emails so anywhere within our program anywhere else in our program that is using user objects can freely set emails to whatever uh value they want so this is clearly uh not a good solution here so the way that we can fix this and the solution to this problem is by creating getter and seter properties for the email attribute okay so before uh previously we looked at creating GAA and seta methods which is the kind of java way of doing things I guess you could say here we're going to have a look at the more python way of doing things uh which is using a GAA and seta properties so first of all I'm going to show you how you would go about this so this is kind of the standard way of creating properties in Python so first of all what we do is we make the attribute private so we can do that by prefixing with a single underscore we then uh State uh the property decorator so we say property so at property we then create a method uh with the same name as the uh attribute that we want to provide a property for so we say def email because we're creating a get a property for email okay and then we pass self so that we can actually access the uh current objects attributes and then we just return self. email okay so now what we can do is also create a uh set a property so this is a geta property so whenever we read email we can just call user one. email okay so I'm just going to comment this out for now and we'll we'll just focus for now on this GAA property okay so what we've done here is we can still access email by just it looks like we're accessing the attribute directly but actually we are accessing the email property which is then returning the uh kind of protected email uh attribute okay so so now again then if we wanted to uh for example print something to the console every time an email is accessed uh we can just let's just keep things simple and say email accessed and run this you can see that we are uh printing to the console email accessed before we uh print the email okay so it's kind of very similar to using a uh creating a GAA uh method but it kind of makes access to email much more simpler because it looks like we're accessing it directly and the advantage of this is if we actually remove the uh property and go back to you know kind of what we were at initially where we just have this self. email equals email so this is a public attribute you can see that any code that is using this uh using these user objects doesn't have to change um it it if we were originally accessing the rute directly uh then all of a sudden we know we needed to Pro provide some logic later on in our program to you know print email accessed then we can just add that in and all of our classes in our program which could be a lot of you know classes using this these user objects don't have to change it still looks like we're accessing uh the email directly even though we're actually now accessing a property so that's the kind of big advantage of using a property we can keep things simple initially for example if initially uh when we create our program we don't require any logic at all when we get uh email addresses we just get them and we read them then this is fine but then later on you know maybe a few weeks down the line the boss comes in and says that you need to now uh print something to the console uh every time we access an email we can just add in this get a property make the attribute private but all of the code using user objects does not have to change we still just say user one. email whereas with a gets and sets if we um made this uh protected then provided a get email method then all of the code using user objects would then have to call the get email get a method rather than just keeping it the same as it was before so that's kind of the hu huge advantage of property you don't have to worry about creating Getters and Setters uh initially when you create a class you can just keep things very simple initially and then later down the line if we need to you know add some extra functionality add some extra validation logic then we can add properties in and all of the code using these classes or objects doesn't need to change so that's the big advantage of using properties over geta and seta methods it's much less verose and it's kind of easier from the off if you like because um if I was using getter and Setter methods here then I would have to be thinking somewhere down the line it's very likely that we're going to need to add some logic to uh when we access or modify emails so therefore I'm going to have to make this protected you know right from the get-go and then provide these getter and set of methods whereas with properties I can just keep things simple access things directly and then down the line if we need to provide some logic we can just add the property in and all of the code using the user object doesn't have to change so that's a huge advantage of this method so let's now take a look at how we can create a set of properties so we have a geta property but let's now create a set of property so that we can actually set emails and if we just uncomment this you'll see that we have an error here and this is because we cannot assign to attribute email for class user and this is because we haven't actually created a set of property for this class we've created a geta property but we've provided no way of setting it so if we actually leaved our user uh class like this it kind of uh basically means that we can read email but we cannot update it uh but we want the ability to update emails so we need to create a geta property and the way we do that is we first state a decorator and first of all we start with the attribute name and then we say do setter this is just the way we create a set of properties in Python don't worry too much about it for now uh we create a method with the same name as the as the attribute and here uh within the method we have a parameter for the new email okay that we want to set email to and let's just add some validation logic in here so let's say if at in email so this needs to be uh let's see new email if at in the is in the new email then we can set self. email equal to the new email address okay so let's actually run this to see if it works so here we're trying to set email to this invalid email address we print the email and you can see that it's not been changed because this doesn't have an N symbol okay so we now have a controlled way of getting and setting data um for our user email uh attribute so let's just break down this code uh and summarize what we've done so far so you can see here self. email we've made this protected so this is a protected instance attribute um initialized to the value past um past when we create the object and the single underscore prefix uh means that it is protected meaning that it should only be used within the class like we're doing here and we don't use it outside of the class which is what we are doing so that's all good so far uh and then we have this property decorator so this at symbol uh at sign with property this is just the standard way in Python of creating a g a property so what this property decorator does is it turns the following method so this email method into a geta property and by making it a property we can access this uh underscore email attribute using user. email as we have done here and well as we've done here because we're getting it here we're setting it here so for the GAA property we can see we can just access it access it by calling email okay so that's great so um so by uh naming this geta property email uh without the underscore we are exposing a public email property while keeping this email attribute private so you can see this is a public email property me public meaning we can access it outside of the class and we keep the uh email uh attributes protected and you can see here we just return we are logging something to the console then we return the value of the email attribute okay we also then have a seter property um so the way we create these is we have a decorator uh starting with the name of the attribute that we want to create a seta for then we say do seta again this is just the standard python way of creating uh set of properties and this set of method is triggered whenever a new value is sign is assigned to user. email allowing us to add uh this validation logic or any other logic during the ass assignment to email so whenever we call user. email equals some new value this set of property method is called giving us a chance to control the assignment so far we've explored instance attributes in Python classes and you now know that each instance or object of a class can have its own set of unique data however python classes can also have static attributes which are shared among all instances of the class so in this section of the course we're going to cover the differences between instance attributes and static attributes when you should use each and how the self keyword fits into the picture so a static attribute which is sometimes called a class attribute is an attribute that belongs to the class itself and not to any specific instance of the class or any specific object created from the class so this means that static attributes are shared by all instances or objects of the class it also means that there is only one copy of a static attribute in uh memory regardless of how many objects or instances you create from the class and static attributes can be accessed directly through the class itself and also through the instances although they are stored at the class level so let's go through an example to make this easy to understand so say that we wanted to keep track of the number of user objects that are created from the user class um so first of all let's create a user class and also create a static attribute that counts all of the instances or objects that are created from this class okay so let's clear everything out here and I'm just going to create a user class and here we're going to create a static attribute so we're going to say user count and we're going to initialize this to zero because initially there's going to be zero user objects uh we're then going to create our uh instance attributes which if you remember are created in the init method so we create the init method we pass self first we then pass a username and an email for the user so each user object is going to have a unique email uh username and email but this user count attribute which is static remains on this user class whereas these are instance attributes which are going to be assigned to each individual object created from this user class so we say self or the current object do username is going to be equal to username and the same for email and these are our instance attributes when but we're all every time we create a new user object we want to increment the user count by one so the way we can do that is we can say user so the class and remember this is a static attribute which exists on the class not on the objects created from the class so we say user do user count is going to be plus equals one so essentially we increment it by one okay so let's uh also provide a method for displaying the uh user so we we can just display the user's details their username and their email in a kind of nicely formatted way so we can say display user and then we're just going to print a format string uh so we'll say username is going to be equal to uh self. username and we can say email is going to be self. email okay so here we can see that the static class attribute is created in the class body okay so in within the class body itself okay it's only in indented uh once effectively whereas uh the instance attribut attributes are created inside of the inet method okay so that's the kind of difference of how we create static attributes and instance attributes in Python so let's actually see if this all works correctly so let's create a couple of users so I'm just going to paste this in just to save a little bit of time so we'll create uh two user objects so user one and user two and since the static user count attribute is stored inside of the user class itself we can access this directly from the class so let's now count the number of users in the class so we can say user do user count okay so we're counting the number of user objects created because remember every time we create a user object we increment the static attribute by one so let's actually save this and run the script and you can see we get two back we have two user objects created which is what we would expect now we can also access the user count from the two instances that we created here uh even though this static us account attribute is um on the class we can access it via the objects but you should remember that it's still a shared static attribute it's still accessing this one you know uh uh static attributes stored in one place it's not stored you know uniquely on each object okay it's just stored in one place on the class um so let's show you how you can do that so we can print user one do uh user count and we can also do the same thing with user two okay so you can see this is actually accessing user on the class uh user. user count uh but it we can also access it uh from the instances created from the class so let's just check if that works and you can see it logs to each time we access us account so the main things to remember here are that static attributes are created once at the class level and are shared between the class it resides in and the instance objects of that class whereas instance attributes are created every time we create a new instance so here and here and instance attributes are sh um are contained within that instance so we can see that the instance attributes self. username and self. email are contained within each unique object okay so these are kind of recreated and stored inside of each uh object that we create okay so use self uh so this username attribute will be stored uniquely inside of this user one object and also for this user two object it will have its own username attribute assigned to whatever value we pass here okay so those that's the kind of difference between static attributes and instance attributes so you may be thinking when should you use static attributes compared with say instance attributes so static attributes are useful for data that is common to all instances of a class so let me give you some uh example scenarios where static attributes would make sense to use so um it makes sense to use static attributes for uh things like counters and totals like for example tracking the total number of objects created like this user count uh attribute is doing in our examp example here uh so it's static attributes are also useful for shared constants or values that are constant and applicable across all instances uh for example a default value or some sort of configuration setting um and they're also useful for class level configuration so any configuration or setting that should be the same for all instances of a CL of a class such as uh default parameters so just to summarize instant attributes are unique to each object and are accessed using uh well accessed within the class using self Dot and then the attribute name and they are ideal for storing object specific data so you know unique data effectively you know the username is unique the email is unique uh if it's a dog then the breed needs to be unique to that particular object um whereas static attributes are shared among all objects of a class and can be accessed with uh class name do attribute name and these are ideal for storing data that needs to be consistent across all instances a static method in Python is a method that belongs to the class itself rather than to any instance of the class so unlike instance methods static methods do not take self as a parameter meaning that they cannot access or modify instance specific data instead they are used for functionality relevant to the class but not tied to individual instances and to define a static method we use the static method decorator so now let's go through a realistic but simple example to demonstrate the differences between static methods and instance methods so let's now create an example to show the differences between static and in inst methods so we're going to create a class called bank account and this is going to have first of all a static attribute called Min balance okay and it's kind of a convention in Python to capitalize constants so this is going to remain constant in the class and it makes sense to have this as a static class uh attribute because it's going to be shared between all uh bank account instances it really doesn't need it's not going to change and therefore it makes no sense to have it as an instant attribute um next what we're going to do is we're going to create some uh instance attributes so we can do that in the AIT method and we're going to have each bank account is going to have an owner and also a balance and we're going to initialize the balance to zero so in here we can say the inst we could we create an instant attribute of owner and we assign it to the owner passed in and we can say self. uh balance is going to be equal to balance so here we're creating a protected instance attribute okay and we're going to provide some methods that allow us to uh withdraw and deposit into the bank account in a controlled uh way so next up we're going to create our uh deposit method which is going to be an instance method okay and it's going to be an instance method because it needs access to an instance attribute okay which exists on the object so it needs to be an instance attribute so we're going to call this deposit and we deposit an amount of money and what we're going to do in here we're going to add a little bit of logic so we're going to say uh if amount is greater than zero then we can increment the balance by the amount so self do uh balance plus equals amount and let's just print uh a message to the console so that we can see what's going on so we can say uh let's see so let's see so self dot owner and then let's say owners uh New Balance and then we can just print the balance uh let's put a dollar sign here self dot balance okay uh and if the amount that we're trying to deposit is uh less than zero we can say print uh deposit amount must be positive okay and I'm going to create one more method now and this is going to be a static method okay so we do that uh we can create static methods by using the static method decorator above the method that we want to be a static method okay so now we can create our static method we're going to call it is valid interest rate and we're going to put in the uh we're going to pass the rate here the interest rate and what we can do is we can uh just return true or false if it's a valid interest rate so let's keep things simple and say if the interest rate is greater than or equal to zero um and less than or equal to five then it will return true okay so this is a static method that just exists on the class and not an instance method uh like this one where we pass the self as a parameter which will exist on each of the objects or instances that we create from bank account so let's have a look at how we would use this solution so let's create a bank account and set it equal to bank account and the owner can be Alice and we will set the initial amount to 500 so let's actually uh deposit some money so we can say account. deposit and we can deposit uh $200 and let's actually log this to the console so you can see uh whenever we deposit money we get a nice message of the updated uh balance uh and now let's actually use the static method that we created down here so let's print now we can access static methods uh from the class itself because they exist on the class and not on each uh instance of the class so we can say bank account do is valid interest rate and we can pass three and we can pass do the same thing again and we can pass 10 and then we run this script and you can see three is a valid interest rate because it falls between zero and five and 10 is an invalid in interest rate so let's just recap what we have done here so we have an instance method called deposit and this method uses self um let's see use self to access the uh balance attribute specific to each bank account instance and calling deposit on account so here and passing in a value uh increases the account. balance allowing each instance to manage its own data independently uh whereas this static method uh called is valid interest rate uh this method does not interact with any specific account or instance instead it performs a check on the rate on the rate parameter which we pass in here uh independent of any bank account object making it suitable as a static method and we call it directly on the class using Bank account.is valid interest rate and passing in an integer argument so you might be thinking where are static and instance methods stored so both static and instance methods are stored in the class itself not in each individual object that we create from the class so this means that we have memory efficiency as only one copy of each method exists in memory no matter how many instances that we create so just to clarify uh for when you should use static methods so static methods are ideal for tasks related to The class's Domain but don't require any specific instance data so for example uh you can use static methods uh for like utility uh functions so on this bank account class we use a static method to check if an interest rate is valid um but you can also use uh static methods uh to help to process data or to format outputs that don't rely on any instance specific data okay so is it uh this method here doesn't rely on any specific object data such as the owner of the account or the balance it just um takes in a rate and returns true or false so it makes sense that this is a static method it's kind of like a helper or a utility method so using static methods can help to give a clear separation between behavior that require instant specific data and behavior that doesn't and this approach also reinforces encapsulation which is an important objectoriented program concept that we'll dive uh into shortly uh so it reinforces encapsulation by keeping related functionality within the relevant class so so far we've discussed how we can control access to attributes by making them either public protected or private but we can do the same thing with methods again using onecore for protected uh to be which means to be used within the class or subclasses but not outside of the class or two underscores for private which means to be used within the class only and again we'll get more into uh using sub uh what subclasses are uh very shortly in the course so let's take a look again at our bank account uh class and let's say that we wanted to create a protected method meaning that it should only be used in the class or it's subclasses um to check uh if the amount being deposited is valid so rather than uh having this here we have a method that does this for us so we can create a protected method with an underscore and we can call this is valid amount and we pass self we pass the amount and we return uh the same thing that we have here so we can say amount greater than zero and we can now call uh self do is uh valid amount okay and then pass the amount okay so this is a protected uh um method we can also create uh private methods so let's for example create a method that uh logs the uh transaction type and the amount being uh withdrawn or deposited currently we only have a deposit method just to keep things simple we didn't provide a withdraw method but let's create this uh log uh transaction method and this is going to take the self parameter and the transaction type and the amount and then in here we can print so let's see so we can say logging the transaction type of amount account and we can say new balance is self dot balance okay now rather than logging this uh message inside of the deposit method we can just call this log transaction um method okay so we can say self DOT log transaction and then we can pass the transaction type which is a deposit and we can pass the amount which is amount okay so this should work pretty much the same as before but we now have a few extra methods okay so we have a protected method here with a single underscore so if we actually look um what would happen if we try to access this outside of the class so if we have a scroll down what would we call it again so is valid amount oh is valid amount you can see that we can access uh this outside of the class but we are not supposed to because it's got an it's prefixed with an underscore meaning that it should be used within the class only um whereas the private method um which is called log transaction so if we uh let's see so let's say withdraw and 300 now if we run the program you can see that we get an error because this is a private method and we are not allowed to access it outside of the CL uh the class so you can see here we have the protected method which uh is used in internally to validate the uh deposit amount and is accessible by any subclasses if needed and then we have the private method called log transaction with the double underscore uh which is used to log transactions and is intended only for internal use within this bank account class and this method should not be accessible or overridden in subclasses okay and again we'll get to that uh very shortly in The Inheritance section of the course encapsulation is a fundamental principle of object-oriented programming that involves bundling the data or the attributes or fields and methods or the behaviors that operate on the data into a single unit called a class encapsulation helps in hiding the internal implementation details of a class by only exposing the necessary functionalities to the outside world so let's now create a simple example demonstrating encapsulation in Python so first let's create a bad example with no encapsulation so we're going to create a class called bad bank account this is our sort of bad example and then we're going to refactor this to use en capsulation and solve the issues that we find with this uh bad example so we're going to create an init method and let's get rid of that and we're going to pass in a balance an initial balance which we will set uh to uh a balance instance attribute and let's now have a look at how any users of this class so any uh other part of our program that uses uh this class is a kind of client of this class that's the kind of um terminology that we use so any other parts of our program you know let's say we created a new file you know some I don't know uh account dop and we imported this class you know this new file would be a client uh for this bad bank account class okay so any other parts of our code using this class effectively so uh users of this class or clients uh now have free reign to assign balance to whatever value that they want so first of all let's create an account and pass in an initial balance let's say zero and we can now set uh balance to any value that we want for example a negative number and this is not good because um our our programs logic let's just say uh should not allow the balances to be set to zero uh set to a negative number okay but if we print the account. balance we will see that H has been set without any uh errors being raised okay so this is not ideal so let's now create a better Bank accounter class with encapsulation of the fields and internal logic so let's just come down here and create a better example that uses encapsulation so we we have our init method um and in here we're going to set the balance equal to zero initially 0.0 so float and we're going to make uh balance a protected attribute so we can't access it directly outside of the the class we are effectively encapsulating this balance attribute inside of the class okay making it inaccessible or in Python at least it means we shouldn't access it outside of the class okay so now what we can do is we can either provide a geta uh method or a uh geta property for getting this balance and in Python generally you want to be create using properties because they are much uh as we discussed earlier much less for house and you can just create them as needed ra rather than GAA methods where we have to create everything up front so let's create a uh a geta property for balance so we say balance def balance self and we're just going to return self dot balance okay so there's our geta property and let's now create uh methods for depositing money into the account so what I'm actually going to do is I'm not going to create a set of property okay we what I'm going to do is I'm going to say that in order to modify the balance we have to call either a deposit method or a withdraw method so I'm going to create a deposit method here and that takes an amount and first of all we're going to check if the amount is uh less than or equal to zero so if we try to deposit zero or less which makes absolutely no sense so we're going to raise a value error in Python with a message of deposit amount must be positive okay otherwise if we pass this test we can set the the balance uh so self do balance and we can just Plus on the uh amount okay so we add the amount to the current balance okay and now let's create a withdraw method so we can say death def withdraw and we want to withdraw a certain amount and again these are instance methods because we are passing the self parameter uh and we need to access instance data so it makes sense that these are instance methods or they need to be instance methods otherwise we can't access the uh balance on each object so in withdraw what we can do again we can check if the amount uh being withdraw is less than or equal to zero then we want to raise a value error so let's just copy paste that and we will say this time withdraw amount must be positive uh and then we also need to check here if um amount is uh the amount that we are trying to withdraw if it's greater than the actual amount in the balance then we need to also raise a value error and we'll provide a message called insufficient insu insufficient ient funds okay and if we pass all of these uh conditional statements then we get to the end and we can just uh subtract the amount from the balance so we can say uh minus equals the amount okay so now let's go ahead and actually create an account from this uh bank account class so we can say account is equal to bank account and let's actually print the account balance okay so because we have provided a property a geta property for balance we can just you know uh access this balance property it looks like we're accessing the balance attribute directly but actually we're calling this method um and if we try to uh assign uh account. balance a value so for example minus one you can see we get an error so we cannot assign to attribute balance for class bank account and this is because we haven't actually provided a set of property okay we're we're kind of forcing the user to use these two um these two uh methods okay for depositing and withdrawing uh cash okay so that's the way we've designed this class to work so let's actually try to deposit some money so we can say account deposit and let's deposit uh one let's see uh 199 and let's print the account. balance and then let let's actually withdraw some money so account do withdraw and let's withdraw $1 and then print the balance okay so let's run this program and you can see uh let's see so let's just uncomment what we had previously so let's uncomment uh all of this and run the program again so we can see the initial balance is zero which we are setting in the uh init meth method when we create a new account object which we're doing here we deposit 199 print the balance and then we withdraw one and print the balance again and all of this is working correctly and if we try to do something stupid such as uh withdraw uh an amount greater than we have in the account so for example account withdraw uh 100 we should get an error message uh because we are actually uh trying to withdraw more than we have an account so we get this insufficient funds uh method so now we have a nice controlled way of uh it of updating this balance field in the account so let's just recap what we've got here so notice in the bank account class again we we've provided a get property for this protected balance attribute but no set of property and this allows uh users of this uh class to read the balance using account. balance but not set the balance directly with for example account. balance equals minus one you know which would still be bad so to modify balance bank account provides a simple public API these two uh methods deposit and withdraw and this ensures the Integrity of the balance attribute value and that our expected program logic can't be violated so step by step the bank account class encapsulates the account data which is this balance attribute and its related methods deposit and withdraw into a single unit uh of this bank account class the data members so balance are marked as protected encapsulating them within the class and preventing direct access from outside of the class a geta property method called balance um is provided uh is used to provide controlled access to the protected balance data and methods deposit and withdraw are used to manipulate balance ensuring that operations are performed safely and according to the business rule tools of our program so what we've demonstrated here is how to create an instance of the bank account class and interact with its properties and methods without needing to know the internal implementation details so here we have uh a sort of user of this bank account class so this can be you know other developers uh maybe use this class or other classes in our program other files in our in our program or software using this bank account class uh they can't directly access the balance field as it's marked as protected uh so this data is incapsulated within the class and the methods dictate the rules uh for how this data can be accessed and modified ensuring that our programs rules can't be violated by users or consumers of the bank account class for example it's no longer possible to withdraw more money than is in the account and encapsulation of the logic inside of the methods in bank accounts also means that users don't have to worry about the implementation details when interacting with a bank account object for example the user doesn't have to worry about the logic involved in withdrawing money they can just call uh account. withdraw and then Prov pass the amount that they want to withdraw and the implementation details are hidden and encapsulated in the class okay so they're all here they don't have we don't have to repeat this uh this logic or any users of a bank account don't have to worry about the sort of complex details uh within uh withdrawing money from the account okay and if the user tries to do something silly uh like uh deposit a negative amount the program will throw an error and the user will be notified so so encapsulation of logic within methods in the bank account class allows users to interact with a bank account object without needing to know or understand the internal implementation details of how withdrawals deposits or other operations are carried out uh so users of the bank account class can interact with bank accounts using a very simple uh intuitive API or intuitive methods like withdraw or deposit without needing to to understand the complex logic behind these operations so encapsulation abstracts away the complexity of the implementation details allowing users to focus on the higher level functionality provided by the bank account class users only need to know about the public interface of the bank account class in other words it's public methods or properties to use it effectively while the internal implementation details remain hidden so in summary in capture ation allows for Clear separation between the public interface and the internal implementation details of a class providing users with a simplified and intuitive way to interact with objects while hiding the complexity of how those interactions are handled internally the aim of abstraction is to reduce complexity by hiding unnecessary details so for example when you press a button on a TV remote you don't have to worry about or interact directly with the internal circuit board within the remote those details those complex details are abstracted away so let's go through an example of abstractions so let's create an email service class whose job is to basically send emails so to send an email we have to first connect to the email server then we have to authenticate uh then we send the email and then we disconnect so let's create a few methods for uh sending an email so we'll first create a method called connect and this is going to be a protected method and I'll explain why shortly so let's just print uh connecting to email server and we don't have to actually connect to an email server we're just going to print connecting to email server this is just a for demonstration purposes then we can create a method called authenticate and again we can just print so let's just print authenticating authenticating and finally uh we need a method for sending an email so let's create a method a method called send email mail and this needs to be a public method because uh uh users of this email service class are only really interested in sending emails they're not too interested in connecting to the email server or or authenticating those are implementation details so details that are kind of specific to this class but you know outside of the class no one really cares about those complex details so we create a public method called send email and what this is going to do is it's first going to connect to the email server so it can call first of all self. connect then we can call self. authenticate uh and then we can send the email so let's just print sending email and then we need to disconnect from the email s uh server so let's create a method called disconnect and this can also be a protected method because it's only needs to be used within the class uh other classes or other parts of the program are not concerned about this it's an implementation detail for this class and we can say disconnecting from email server and let's now call that uh method inside of our send email uh method okay so let's actually put this public method at uh actually we'll leave it here so we connect and let's see what's going on here what did we do wrong there we go okay so first we connect authenticate send the email and then dis connect okay that's all good so the user of this class can now send emails without any knowledge of the internal implementation details involved in sending an email so all of these details have been abstracted away and life is much simpler for users of this email service class so for example if we create uh a new email service object and we now say email Dot so let's look at the methods available on this email service object so we can see that we have some underscored methods so as a python developer I know that I should not be touching these methods I know that they are kind of to be used internally within the class but outside of the class I don't need to worry about them so I can see here I can look down and I see a public method here so no underscore that says send email so I know as a user of this class that I can just call the send email uh method and the email will be sent I don't have to worry about how emails are sent I can just call send email so life is really really simple and without abstraction the user would have more decisions to make as they are exposed to more information and complexity than is necessary to perform a task and uh the user would have to write more complex code so let's just for example change these uh these protected methods to uh public so if we get rid of the underscore okay and let's just comment uh these out for now so send email just sends the email but before the send email method is sent we would have to first uh connect to the server then we would need to authenticate and then after sending the email we would need to disconnect from the email server and you can see life is much more complicated for any users of this class now because we have to understand how emails are sent call all these these methods in the specific order correct specific order and we have to repeat this code every single time that we want to send an email so this is would be an awful uh solution really uh with no obstru abration whereas if we abstract all of those uh details away all of those implementation details uh related to sending an email then life is nice and simple for any users of this class okay so if the methods are protected by being prefixed with an underscore it's going to communicate to the python developer that these methods are for internal use within the class and don't need to be touched with it uh to use the class as intended and importantly by using encapsulation if any of these protected methods are changed for example they take another parameter for example let's say if we authenticate we need to pass say I don't know a uh username and password for example currently we don't but let's just say uh we did uh at some point in the future then only this email service class has to change we just need to pass uh these values into the authenticate method here okay uh whereas if um without abstraction if we had to actually call this authenticate method outside of the class and all of the users of this class would have to change okay so it it could potentially you know we' have to make a lot of changes in our code and it would be very easy to introduce books so um uh by using abstra abstraction we can change the implementation details of email service without it affecting other classes or other parts of our application so it may be difficult to see the differences between encapsulation and abstraction as encapsulation is often used to to support abstraction by hiding implementation details from users so let's just have a look at the differences between the two so encapsulation focuses on bundling data or attributes and methods that operate on that data into a single unit called the class and it restricts access to the internal implementation details so this is achieved by defining attributes and methods as private or protected and exposing only a control interface EG uh you know in other words public methods uh for example by marking connect authenticate and disconnect as protected hides their details from the user of the email class whereas abstraction on the other hand focuses on hiding complexity by providing a simplified highlevel interface to interact with so just by providing the simple send email uh method we are effectively concealing the underlying ing implementation of sending an email so it allows users to focus on what an object does rather than how it does it so for example the send email method as we mentioned abstracts away those multiple internal steps uh required to send an email providing a nice and simple interface for the user so just to clarify even further encapsulation and emphasizes bundling and restricting access while abstraction focuses more on simplifying usage by hiding unnecessary details so and it's also important to note that encapsulation is a mechanism that enables abstraction but they are still distinct uh Concepts inheritance is a fundamental Concept in objectoriented programming that involves creating new classes based on existing classes so subclasses inherit properties and behaviors from their super classes and can also add new features or override existing ones and inheritance is often described in terms of an is a relationship so for example uh a car is a vehicle okay and a bike is a vehicle okay so this demonstrates uh that inheritance uh kind of uh resembles or um kind of models this Isa relationship between classes okay so let's go through an example to show you uh how inheritance works so first of all we're going to create a base class or a super class representing a vehicle so we can say class vehicle and we can set up some attributes in the anit method for each object so we say self uh let's say each vehicle needs to have a brand a model and the year it was made so we can set those up here so we create a brand attribute assign it to the value passed in same for model and the same for the year and let's just say that every vehicle should have a St method so it should have the ability uh to start the vehicle so let's just print keep things nice and simple and we're just going to say vehicle is starting and we can also provide a stop method so every vehicle should have a stop method and we can just say vehicle is stopping okay now all specific Vehicles such as cars bikes or planes can inherit this common Behavior this common vehicle behavior and also these common vehicle attributes uh from this uh vehicle kind of parent class so now let's create a few subclasses so first of all let's create a core so we're going to say class core and what we can do is we can uh say that car should inherit V vehicle okay so it should inherit all of these attributes and also these uh two methods and the way we do that in Python is we add some parentheses and we specify the class that this uh core class should inherit okay so now what we can do is we can also add some extra um some extra attributes that are specific to a car vehicle but not necessarily uh other vehicles so for example what we can do is in the net method of car we can pass in the uh values that we need for vehicle so we need to pass in brand model and year because car inherits vehicle meaning that it needs to have these brand model and year attributes so if we paste those in but also let's just say a car should also have an attribute for the number of doors that it has and also the number of wheels for example okay so the way that so what we need to do here is we actually need to call the init method of its parent class so this vehicle class we do that by calling the super uh ma uh function so super is essentially refer referring to the super class of car which is vehicle okay and then we can call super. init so we call the init method on vehicle and we can now pass in the values uh received by the core object so we can pass in brand the model and the year okay and then we can uh also create some attributes on the core class the core object itself so we can create a self. number of doors and I've spelled this wrong and we can also have uh self. number of Wheels like so okay okay so let's now create a subass representing a bike which also inherits from vehicle okay so let's create a bike class class bike and this is going to inherit vehicle so it's going to that means it's going to have these attributes and also it's going to inherit uh these methods okay so let's create our init method because we need to pass uh the uh brand model and year into the Super class to the vehicle superclass okay so we need to set those up in that class so in here we can have again the brand model and the year and let's just say a bike only has one kind of uh attribute contained within its class uh called number of Wheels uh so again we can set up the attributes for the super class by calling super so super in this case is going to refer to vehicle and we can call init so we need to call the init method on the vehicle class and pass in the brand model and year for this particular bike uh object that is been created so we can pass in the brand model and year so let's just copy and paste in those and we also need to create a new attribute on the bik class itself called number of wheels so self. number of Wheels equals number of Wheels okay okay so let's actually create a few vehicles from these classes so first of all let's create a car class and in here we have to pass a brand a model the year the car was made the uh number of doors so you can see here these are the kind of inherited attributes that we have to pass so these come from the vehicle uh sort of super class or the parent class and now we have the cars classes so the specific the most specific car class uh has its own attributes that we now have to also pass so you can see here we passed those to the parent class and now and we set these uh attributes in the color class itself so in here we need to pass the number of doors so let's say this is a five door and the number of Wheels which is four okay and let's also create a bike so let's create a Honda Scoopy and let's say the year is 2018 and the number of Wheels is two it's kind of a silly attribute I guess but uh I guess it's possible to have different numbers of wheels on different bikes uh anyway let's print uh what this car uh class looks like so a car object looks like so we can do that by saying car do dictionary so you can see this is an attribute on uh objects okay and let's just run this uh program to see what we get so you can see by uh printing uh car uh so double uncore dict this is kind of like dictionary it kind of gives us back a sort of dictionary for all of the uh attributes that this object has so if we call this kind of dict uh attribute which is available on all objects in Python it it gives us back a kind of uh dictionary with all of the attributes on this object and we can do the same for the bike okay and we can see all of the attributes that we have on the uh bike object okay so as you can see uh just to kind of summarize what we've got here we don't have to write the commonly used uh fields and methods uh for every single type of vehicle we can just inherit them in from the vehicle class so we only have to write them in one place if we didn't use inheritance here we would have to create a start and stop method on car and we would also have to you know repeat all of these attributes that are shared by all vehicles in every single type of vehicle uh class um so now also the advantage of this is that if we want to change the uh start method then we only have to change it in one place in this vehicle class Okay so just to show you uh another thing uh so if we call the start method on car we we also have this start method on bike as well so you can see vehicle is starting and vehicle is starting so that is inheritance and inheritance also allows for a very important objectoriented programming concept called polymorphism which we will look at next the word polymorphism is derived from Greek and means to have multiple forms so poly meaning many and morph meaning forms and in programming polymorphism is the ability of an object to take many forms so first of all I'm going to show you an example that has no polymorphism so here we have a car class with an init method where we set up some attributes that a car should have so we have the brand the model the year and the number of doors and we also have a couple of methods to start a car and stop a car okay and we also have a motorcycle class which also has its own attributes so the brand model and the year and it also has a couple of methods for starting and stopping a bike okay or a motorcycle so let's say that we want to first of all create a list of vehicles uh to uh inspect so we're going to Loop through this list of vehicles and inspect them so uh the inspection can involve let's say starting and stopping the vehicle so first of all let's create a sort of list of vehicles so we can create first of all a car so let's create a Ford Focus and also let's add a motorcycle to the list okay and now we need to Loop through these so let me just make a comment here so create list of vehicles to inspect and now we're going to Loop through a list of vehicles and inspect them so we can do this in Python by saying for uh vehicle in the vehicles list now in here we need to actually check uh what the type of object is so the thing what the problem we have here is that this vehicle's list is actually made up of different types of Vehicles we have a car uh we have car objects and we have motorcycle objects okay so uh we don't really have like a common uh class to work with here this we have to kind of deal with separate uh types of objects okay so for example if I look at a vehicle and let's say I want to look at uh I want to start uh start the vehicle there are actually no com methods in this uh these objects in these classes right there's nothing to enforce these uh vehicle objects to actually have a start method for example in car we have a start a method called start and in motorcycle we have a method called start bike so there's there's nothing in our program that kind of gives us any certainty that uh the developer has kind of kept these methods cons consistent right so this is an issue um and that can kind of be solved in this case by checking what um uh what type of uh object that we are currently working with so for example if we want to check if this is a uh car object we can use is instance which means is an instance of the uh of the class so we can see is in is vehicle in this case an instance of the car class and if it is then we know that uh this is a car which means it will have all of the attributes and uh methods available on car okay so we can safely uh access those attributes and methods so let's just create a uh print here so inspecting uh vehicle. brand and then let's also log the type of the vehicle okay which we will know as a uh car object and we just want the name here actually and then we also want to check if we are dealing with a bike so we can say is the current vehicle that we're dealing with in this Loop uh of type or is an instance of the motorcycle uh class and if it is we will do an inspection so so we can print the uh vehicle brand the model and the type and also what I want to do is actually start and stop the vehicle so we can say vehicle do uh start so you can see here that python knows that we are dealing now with a car object because we've checked that it's a car object and python is sort of it's kind of known I think as type scoping where python knows that within this if conditional block we are dealing with a car object because we have checked and ensured that it's a car object here so you can see uh vs code now is providing us uh with all of the uh methods and attributes that are available on core objects so we can call the start method and we can call the uh stop method uh and then let's also do the same for motorcycles so we can say vehicle dot you can see on motorcycle we actually gave the method a kind of different name so start bike and vehicle dot stop bike okay and we could also just to kind of make our program a little bit more uh safe I guess we could throw or raise an exception if there is an object in this list that is an invalid vehicle okay so if it's not a car or a motorcycle we can throw an error so we can say else uh raise exception uh object is not a valid vehicle okay so let's run this program to see what happens and we can see that we first inspect the Ford Focus which is of type uh which is made of the class name car and then we inspect the Honda the motorcycle which is made from the motorcycle class and we start and stop the motorcycle so you can notice this really ugly code inside of this for Loop and the reason for this is because Vehicles this vehicle's list is a list of any type of objects we can put anything in this list and so we have to figure out when we Loop through this uh list of objects uh what type of object that we are currently dealing with inside of each Loop before we can access any information uh on the object or at least access any information uh safely okay because there's nothing to kind of enforce um there's no kind of consistency enforced between motorcycle and car we can kind of call you know these methods whatever we want we can call these attributes whatever we want and there's nothing kind of enforced or you know shared or consistent between the these two objects so that means we have to check what type of objects they are before we can safely access the attributes and methods on those objects and another issue with this is that that this code will continue to get uglier with more uh if conditional statements as we add more vehicle types so for example if we extended our code base to include a new uh plane class so like an airplane then we'd need to modify this existing uh code that we have here we'd have to add another um conditional check in this for Loop to check if the current vehicle that we are dealing with is an instance of the plane class so we can solve this issue that we have with polymorphism so cars and vehicles sorry cars and motorcycles are both vehicles uh so they both share some common properties and methods so let's create create a parent class that contains these shared properties and methods so we're going to create a kind of parent uh vehicle uh class or a sort of super class for vehicles okay so we'll call this uh class vehicle and it's going to uh have an init method where we initialize some attributes so each vehicle no matter whether it's a car motorcycle plane boat should have a brand a model and a year and we can set those up okay and also each vehicle should have the ability to start or stop so let's provide some methods to start and stop each type of vehicle okay so car and motorcycle can now both inherit these attributes and these methods from the vehicle class so if you can remember from before to inherit we just have some parentheses after the class name and add in the class that we want to inherit from and also if you can remember from before we can access the uh super class by calling super and then we can access the anit method on this super class and pass in the uh values that we need to pass to the superclass so brand model and year are all shared attributes for each vehicle and then you can see that we have number of doors specific only to this car class okay and we can do the same for uh motorcycle so let's go ahead and do that and you can see that motorcycle actually has no uh none of its own kind of specific um um attributes okay so let's see what is the issue here here so we actually need to inherit the vehicle class here okay so let's actually have a look to see if all of this still works so you can see all of this is still working um however uh I think what we'll do actually now is just comment out these methods for now so we're just going to inherit these start and stop methods from the vehicle class for now so let's comment those go out and we're actually going to recreate our inspection logic because this is pretty uh messy with all these if conditional statements so for vehicle uh for vehicle in vehicles so now we know that all vehicles inherit this vehicle class okay so we can actually now treat all specific Vehicles just as a type of type vehicle okay so we don't have to worry about the specific type of vehicle to perform an inspection on each vehicle so all we now need to do is just check that it's a type uh is an instance of vehicle so we can say if is instance uh the current object if it's a instance of the vehicle super class then we can just perform our inspection so I'm just going to copy and paste in the inspection Logic for now so you can see here we're doing basically what we were doing before so we inspect the brand the model and then we log the type of uh class that this vehicle is made from we then start and stop the vehicle so now if we've run our program we can see that we got vehicle is starting and vehicle is stopping and then we inspect the motorcycle which is of type motorcycle so it's made from the motorcycle class and we got vehicle is starting and vehicle is stopping but let's say that we wanted to provide more kind of specific methods for starting and stopping each vehicle well what we can actually do is we can override the methods from the vehicle superclass within each specific class so in car we inherit these start and stop methods but we can actually override them so kind of provide more specific implementations within the car class itself and we can also do the same thing for a bike okay but we need to actually uh give it the same name as the method that we are inheriting to actually override it so let's run the program now to see what we get and we can see now we get a more specific uh uh log to the console okay so you might be wondering um that about car and motorcycle uh are now both extending this vehicle class as they are both vehicles but you might be wondering what's the point in car and motorcycle both extending vehicle if they are going to implement their own versions of the start and stop method and the reason for that is because we can now uh treat um all of these uh objects as Vehicles whether it's a car or or a motorcycle we can now treat them in the same way we don't have to worry about each specific vehicle we can just treat them as Vehicles okay which means that they all share we know it's kind of guaranteed that each vehicle is going to have these set of attributes and this set of methods okay so despite the vehicles being of different types polymorphism allows us to treat them all as instances of the base vehicle class and the specific implementations of the start and stop methods for each vehicle type are invoked dynamically within this uh loop okay so what we can also do here in Python we can use uh kind of type hinting so we can say that vehicle is a list uh sorry Vehicles it needs to be a list of vehicle objects okay so now this is going to kind of further enforce that uh Vehicles has to be a uh list of vehicles okay so now what we can actually do is remove all of this code and because python knows that this vehicles list can only contain Vehicles we can actually just have our inspection logic so if we uncomment this and okay so you can see py actually knows um that these methods and attributes exist because we are saying that Vehicles is a list of vehicle objects and that therefore it's guaranteed that they have a brand a model and a start and start method so if we now run the code we can see we get everything as before without all of these uh conditional statements um so because this list can now only contain objects that extend the vehicle class we know that every object will share these common fields and methods meaning that we can safely call them without having to worry about whether each specific vehicle has these fields or methods so this demonstrates how polymorphism enables code to be written in a more generic and flexible manner allowing for easy extension and maintenance as new types of vehicles are added to the system so for example if we wanted to add another type of vehicle we don't have to modify the code used to inspect vehicles or the client code right we can just extend our code base so add another class to our codebase without having to modify the existing inspection logic so let me just show you another uh example here so if we actually add another type of uh vehicle so let's say we add a plane class okay so here I've just pasted in a plane class which extends the vehicle class we then set up the brand model here and planes also like cars have a more specific attribute for the number of doors and then we override these start and stop methods from the vehicle superclass now let's say in our list we add a plane okay and let's see um this can be a Boeing uh let's see 747 and the year can be 2015 and the number of doors let's say is 16 okay so you can see we're getting no errors in the program so far and if we run the program we can see inspecting the Boe 747 which is of type plane and then we start and stop the plane you can see that we haven't actually had to edit any of our current inspection logic whereas beforehand we would have to add another uh if statement for if to check if the uh current object current vehicle object that in the list is of type plane so the code to perform the vehicle inspection logic doesn't have to change to account for a plane everything still works without having to modify our inspection logic congratulations on completing this course you now have all of the tools that you need to create readable maintainable flexible top quality software and this will save you lots of time and headaches throughout your life as a programmer allow you to work can collaborate more effectively in a team environment and lend you more interesting better paying jobs on larger projects so I hope that you found this course useful and if you'd like to take your object-oriented programming skills to an advanced level then you can check out my full course on udemy or the book version on Amazon the links are in the description below and if you did find this course useful and you're somehow not sick of me and you'd like to hear more from me then you could subscribe to my YouTube channel at doable Danny so thank you very much for watching and I will see you in the next one"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Object-Oriented Programming (OOP) in Python",
        "Video Title":"Object Oriented Programming (OOP) in Python",
        "URL":"https:\/\/www.youtube.com\/watch?v=MikphENIrOo",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/MikphENIrOo\/hqdefault.jpg",
        "ID":"MikphENIrOo",
        "Publish Time":"2020-08-21T15:44:06Z",
        "Channel":"Traversy Media",
        "Channel ID":"UC29ju8bIPH5as8OGnQzwJyA",
        "Transcript":"[Music] hey welcome everybody my name is caleb curry and this video is going to be about object-oriented programming using python now if you've never seen anything from me here's my strategy teach the concept junk up here and then we go hands-on coding through what we talked about this allows you just to have a better understanding of what and why you're going to be typing before you just start copying code so i think it'll make learning a little bit more fun hopefully and also object-oriented programming is more of an approach or a paradigm of programming so if you learn the principles in this video you'll be able to apply these to other programming languages as well which will help you be overall a better software developer so let's not waste any time let's just get started so object oriented programming helps us represent things in our code what exactly do i mean well one of the challenges with programming is how do we represent data in our code if you're just working with very simple data this is easy you can use primitive data types and collections so for example if you just had to store the value 5 hey it's easy it's just a number if you need to store a string no problem and heck you can be wild you could even store multiple things together in a collection such as this and this would be a list in python so pretty simple data very simple to represent in our code just using simple variable types now what if you want to represent something a little bit more complex there's various ways to do this you could use json or xml you could use just numerous collections or you could use object oriented programming and that's what we're talking about in this video and another positive side effect of object-oriented programming is it allows us to represent data as a one-to-one relationship to business problems so for example if you wanted to create software to represent customers you can make customers in your code and i'll show you what i mean here in a second so the two big things in object-oriented programming are classes and objects classes represent something such as a customer and then objects are specific examples of that so let's go through an example here if we want to write software to work with customers we could create a customer class and then give it attributes such as the customer name or let's say you had some kind of subscription website or something you could have the membership type so this is an example of a class by creating our own classes we can group things in logical units customers in this case and then we can instantiate very fancy word this class into what are known as objects so now instead of having these general attributes we give it specific values so for example caleb and my membership type oh you better believe it's going to be gold premium you know and then we could have another object on here such as brad and we could give him like i don't know bronze so these are both objects and that is the very first thing you need to understand with object oriented programming we basically define a structure in what's known as a class and then we use that class to create objects so this is an object and this is another object and this is very ideal when you're going to have a common structure across numerous things you know every single customer is going to have a name and a membership type so that's the very first thing you create classes you create the attributes and then you give them specific values by creating objects alright so here we are with a completely blank python file so hopefully you can get to this point if not be sure to just check out some basic python videos because i don't want to distract from the point which is creating classes so here's what we're going to do we're going to say class and then give us some name which is usually what we're trying to describe such as a customer and by convention i'll use a capital letter now after the class you can put a colon and then everything after that is indented however many spaces you're using with your code so i got four spaces here now within this class is where we define our attributes so we're going to define the customer's name and the customer's membership type and everything else but before we get into that we need to create a special method and we're going to get in a method soon but for now just copy this code it's going to be def which is used to define a method and it has the exact name underscore underscore init underscore underscore and then put parentheses and a colon so what in the world did i just tell you to do well basically any time we create a customer this function is going to be invoked so any of the code that we want to execute every time a customer is created we put it in this indentation inside of the init method now this can often be known as a constructor or an initializer basically the function invoked when a customer is created so inside of the parentheses we can put anything we need for a customer to exist so the very first thing and this is just required for it to work you put the word self self is the equivalent to this inside of java or c sharp and sometimes in javascript basically self refers to whatever customer we're creating then what we do is we put any other attributes for this customer so for example we can have the customer's name and we can also have the customers membership type and any other attributes you want to define you can put here and then inside of this method we basically take these and assign them to that customer so we say self.name is assigned name and self.membership type is assigned membership type so it seems like there's some redundancy here but let's just talk about it when we say name by itself we're referring to this parameter and this function call claire come on i'm guest posting seriously all right it's been 27 years any time we have name by itself we refer to this parameter anytime we put name qualified with self we are referring to whatever customers being created so that's a lot of jargon so let's just see this in action and just to prove that everything's working we're going to say print customer created all right it doesn't necessarily prove everything is working but we can at least confirm that this method is being invoked so outside of the class here's what we do we create a variable we can just call it c for customer and then we say customer with parentheses and that is how we create a new customer but you can see we actually have some required parameters here so we need to pass those in so we can say caleb and gold so all of the stuff we were just describing we just did that we created a customer with the name caleb and the membership type of gold and we can print this we can say c dot name and we can say c dot membership type okay so let's run this and see what happens well let's first talk about what happens very first thing this method is going to be hit because we're creating a new customer here it's going to print customer created and then it's going to print the customer's name and the membership type hit run customer created and the name is caleb the membership type is gold all right so this is pretty much the framework you need to follow for any of the classes you're going to create if you want to create another object we can do that here we could say c2 and we create a new customer and this one's going to be brad and it's going to be bronze and we can also print c2 so we can say c2.name and c2 dot membership type run this and the very first one is caleb gold and then brad bronze now typically you're not going to have print statements inside of the init method so i just wanted to show you guys that so we're going to get rid of that we usually just like to keep this method as thin as possible its sole purpose is to basically take these arguments we pass in and assign them to the object which is going to be referred to in this method itself so when we create this person self talks about this object c and when we create this person down here self refers to this object c2 so the first time name is caleb the second time name is brad now obviously if you're going to have thousands and thousands of customers we probably aren't just going to have variables to store this information so instead you can have lists or any other data structure full of these so let's just go through an example with a list we could have customers and immediately we could take c and c2 that would work but then we still have these variables and it's still not the most scalable solution so i'm going to be teaching you how to create customers inline so here's how we do that we would basically take this code here cut it paste it right here take this code here cut it and paste it right here now all of this code we can just get rid of it and i'm gonna make a new line just to make this a little bit more readable all right so now we have a list of customers so we can grab that first customer's name by saying customers index 0 which will grab this one here then we say dot name and we get caleb you can do the same thing with the membership type or we can increment this one to grab the next customer brad alright so this is your basic class and how to create a few objects this is going to be the foundation for the rest of the object oriented programming stuff so make sure you have at least a pretty good understanding of what's going on here now again this is just something special you got to do this is an example of a method basically a function defined within a class and that's going to automatically be invoked but we can create our own methods that we can invoke ourselves and we're going to get into that now methods are one of the most useful things to give our classes and objects a little bit more functionality so now we're moving on to the section on methods so if the attributes provide the data and the values that we need to store about a customer then the methods provide the functionality what customers can do or what we can do with customers now the very first method you were exposed to was this underscore underscore init and this is just one of those methods where you just have to do it it's part of python's object-oriented programming and pretty much any time you see double underscores that is a method that already exists that we can actually override and create our own functionality so we created our own version of this init method that did things what did it do well it actually assigned a value to the name and the membership and this method the init method you'll often hear it known as the initializer or what you might probably hear more often because it correlates better with other programming languages is the constructor so a constructor it's just a method a section of code that is executed whenever we create a new customer inside of python the way we create a new customer is in our code we just say customer and have parentheses a lot of other programming languages this will actually be prefixed with the new keyword although that is not how we do it inside of python but if you're coming from like java or c sharp you'll probably see that new keyword a lot so the other thing is when we define this init method we put a couple of things in here the very first one was self and that is going to be put inside of any method we create to work with individual customers so we put self and then anything extra we want to add about customers so we have the name and the membership type yeah i think this is actually membership underscore type all right so this is what it looks like now now these here when we define these variables inside of some method we're creating these are known as parameters so hopefully you have some experience with just creating functions and this is not all brand new to you the parameters are the variables attached to the method we're creating now what about arguments arguments is another word that's often thrown around in exchange for parameters but they're technically different so when we create a customer we assign values to these parameters and those are passed in here so we have the value caleb and let's just say the value gold so these here are known as arguments so it's basically which side of the process are you on if you're in the definition side where we define the outline for the method they're known as parameters if we're actually applying specific values to these variables they're known as arguments so parameters definition arguments invocation we're not wanting to talk about overriding methods here because i'm tired of talking about stuff that already exists i want to create some of our own stuff so what if we wanted to create a method to actually do something with a customer let's say we wanted to create a method to upgrade the the members membership status so it might look like this upgrade membership first parameter in here is always going to be that self keyword whenever we're talking about methods to work with the customers and then anything else maybe the new membership so we could say new membership so we could define all the code what this does inside of our code and the way we would invoke this is we would take some customer in this case we have this c variable that's referring to a customer and we would say dot upgrade membership now as for the arguments the self is always implicit you never have to pass anything in for that so skip it the new membership we could put something like bronze and then as for the actual functionality what does this method do i mean that's ultimately up to you but as an example it could basically figure out what to charge the person because you know i'm downgrading my membership so maybe i need to get a refund and then it could basically invoke our our billing system to do that and return whether it worked or not so that's another thing with methods they can return a value so for example the upgrade membership might return the value negative one if it didn't work or it might return zero if it did work so zero tends to be like it it worked fine negative one is often it broke or any other number could mean something but if you have had experience with like c plus plus or c you'll often see something like return zero this basically means it worked but anyways the point here is not necessarily what this method does but more so that you can create methods to work with individual customers the way you do it is you define it inside of the class and you put this self word here the actual code for this method probably looks something like this so we're going to have a colon and then we would have maybe some api call and assuming that was successful we could say self dot membership type is now assigned the value new membership like so all right so that was this bunch of junk to say that hey we can create our own functions and put them inside of classes to call them methods so let's get some hands-on experience with this now so here we have the most basic customer class and we have one method in here the init method and this is where we define the attributes we want attached to each of our customers now inside of python it is a little dynamic in that we can add attributes after the fact so as an example i can say customers index one to grab this customer here and we can say something like verified and we could set this to some value like false and this is something we can use later on in print and there you go so python is more dynamic than a language like c sharp or java because you can add attributes on the fly it's more like javascript in that nature however it is best to put any data that you expect customers to have inside of this init method so it is considered best practice to have that there so let's go ahead and put this back to how it was we will get rid of this verified line because we're not going to need that and we're just going to print the name so beyond this init method we can create other methods and just do that below here so for example the one we talked about was i forget the exact type i think was upgrade membership or let's just do update memberships because you know maybe we could use it to downgrade the membership as well and we're going to have self in there and then we could have the new membership that we want to change it to so the most basic thing we're going to do is just say self dot membership type and change it to the new membership and we can just check to see if this works let's go ahead and print the membership and invoke this by saying customers index 1 dot update membership and pass in actually we'll pass in gold it's going to put bronze there but it's already bronze so we'll stick to upgrading this to gold and then after the fact we're going to do is we're going to print the membership type and just confirm that it was changed so let's run this all right we have an issue we have to print the membership type sorry so run this we start with bronze this method gets invoked on the customer and then the membership is gold now this method as is is kind of pointless because you can actually change attributes directly so instead of doing update membership you could just say membership type and assign it the value gold this works just the same way and we don't even need this method anymore you can just get rid of it however if you need to do custom functionality which is a little hard to see in our very simple application but here are some examples of custom functionality you could invoke an api you could update a database you could charge the customer you can calculate costs you can conquer the world and pretty much anything else so anytime you need some kind of functionality like this the appropriate place to do that is within a method so the easiest way to simulate something like this is to just print and we'll just say calculating costs just to simulate some math there and charging the customer so we'll leave that as that there and now you can see that functionality because if we invoke this method update membership pass in a value you can see that it actually shows up down here in the console now i wanted to take a second just to talk about this self here anytime you want these methods to appear on a customer then you put that self keyword there so you could create a method such as read customer and leave off the self well this is not going to be invocable on any individual customer so let me just write here print and we can just imagine reading customer from db well if we try to invoke this we say something like customers we'll just grab that first customer in that list and then we say read customer run this it says take zero positional arguments but one was given what in the world does that mean well when we invoke a method like so on an object a customer object the instance itself is implicitly passed so that's what gets assigned to this self variable here so when we don't have that there it's basically saying yo you're passing something but there's nothing to apply it to it's not working so that's what this type error here means so what would you do with this method instead well this is something that would be used if you want a method to describe customers in general but not any specific customer so for example if we're just reading a customer from the database that's not tied to caleb that has nothing to do with caleb so here's what we would do instead we would just invoke it on the customer class like so and run it now here it says reading customer from db this method is often known as static methods so basically methods that are not attached to any individual object but instead are invoked on the class itself so here's an example from some other code that i wrote basically it's this method parse camera it does not have self in the parameter list and this is the code that i used to basically read some data from a text file and parse it into information and it ultimately returned a new camera object so although we're not going into a complex example where we implement something like this i was hoping that just by showing you an example without self you would have a better understanding of self and as a result have a better understanding of your own true self but enough of this talk about self let's get back to methods the only other thing i wanted to talk about was first let's just get rid of this read customer we're not going to need that there are a couple of other methods we can override that are definitely useful so the very first one you should know about is str and this is also going to take self and this is going to be invoked anytime we try to convert a customer to a string so we created this method and now let's try to invoke it how do we invoke it well instead of printing customers.membership type let's just print that individual customer and now what happens when we run this it says returned non-string so anytime we override this string method we actually need to return a string so we can say return and in here we could say self dot name plus a space plus self dot membership type running this now we can look through our code here any time this is executed it says converting to string which is basically hitting this line here and then it prints the person's name and their membership type at once which is very very convenient if for example you did not have this method here let's just comment this out for a sec when we printed an entire customer so we printed this customer right here what it would do is it would just give us a memory address and say the type which is useful i'm not going to say it's not useful however oftentimes we want to get the actual data and not just the location of the data so that is why we would override the string method and we can also get rid of this print here i was just showing you guys that for simplicity so now we can very easily see our customers just by printing them here so what a useful line of code might be would be to print all of our customers so let's go up here into our class and we're going to define a new method we'll just say print all customers and this is not going to have self however i will take a list of customers and we can say for customer in customers print customer so you can see oftentimes we'll put methods in here that are somewhat related to customers just for organization's sake and we don't need to put that self in the parameter list so now inside of our code we can create a list of customers so what we'll do is just say customer the class with capital c there dot print all customers and we'll pass in our customers list we defined right here like so and running this we get all of the information for all of our customers another useful method is the equals method so we could say def underscore underscore eq underscore underscore self and this is also going to have another parameter we're just going to call it other which is going to refer to what we are comparing our customer to so this will see if two customers are equal so what we can do is we can say if self.name is equal to other dot name and self dot membership type is equal to other dot membership type then what we're going to do is we're going to return true otherwise we're going to return false so pretty much if you're comparing two customers and they have the same name and they have the same membership type then you can assume they're the same customer now that's a pretty weak comparison but you can do whatever kind of comparison in here you want you know maybe you compare addresses maybe you compare social security cards maybe you compare dna sequences whatever you got to do you can pretty much compare whatever you want here just remember that any of these attributes are comparing you're probably going to need to define them up in the init method so let's just test this out a couple of times we have two customers down here and what we can do is we can print to see if they are equal so we'll say print customers index 0 is equal to customers index 1. running this we get false which is to be expected because they're two totally different people but if we change their name let's go with caleb and gold again we run this now we get true if we did not override the equals method then by default it compares by memory location so we'll just comment this out for a second and even though logically it seems like these are the same customers we run this and we get false and the reason that is is you can actually see it if you pass these to id and just put a comma here run forgot a parenthesis there run this and you can see that these are two different objects in memory so by default it looks at these ids sees that they're different and says yuck nope these are not the same people so we're going to say false for the equals however we can override that behavior with this equals method and running this we still have different ids but if we were to compare the data like so getting rid of this id here we run this and we get true and the last method i want to discuss with you right now is the hash method i've done stuff on hash if you need to know the juicy details however for now i'd recommend just saying underscore underscore hash is none this isn't going to really ruin any functionality or break anything the only thing is that you're not going to be able to use your customers inside of hashable data structures so i mean you can use them in the value side of a dictionary but not trying to get into the weeds here but let me just show you real quick if we were to create a set and try to pass in customers zero this is going to give us an error unhashable type customer but if you need to understand hashing and all that do some extra research one other thing is you can actually print this list all together at once so you could say print customers and when we do this we don't get the pretty output like we would expect in our method print all customers so one way we can fix this is to override the underscore underscore repr for representation probably and we can just assign this to the same thing as the stirrer method so we'll just say underscore underscore stir and i think that should fix the problem now you get all of the data in a nice list and you can just change the data right here so there you go all right i think that's all the overriding methods i'm going to be talking about right now so let me just zoom out for you guys make sure you can get a good overall picture of the code we'll start at the top and just scroll down to the bottom real quick there you go all right so now we're going to be talking about some object-oriented programming principles these are the three pillars of object-oriented programming if you haven't heard of them yet you probably will a bunch in the future and they are encapsulation inheritance and polymorphism now for being honest each one of these needs a dedicated video to go into the depths so we're just going to scratch the surface but the main thing you need to understand here is that these are the why of object-oriented programming why would you want to use object-oriented programming well if you need to do any of these three things you can do that with oop it's like the value proposition this is what you can get using oop these things can also help you in your object-oriented programming journey by enabling you to do certain things so it basically allows us to have more scalable code and so forth but not all of the time because some of these are even controversial such as inheritance ah if you do it wrong you can actually make your code more complex and not really help anybody and the approach to this really depends on the language because i think different languages have different approaches and ways of thinking and for python it's a very open free kind of language the way you feel you know the vibe of python is very open and free as opposed to java it's very strict and what you can and can't do is very thorough so when we are creating this stuff in python our classes might end up being very thin and if you're coming from say a java background you might be like what and it does take some time to kind of adjust to the approach but basically in python our approach is if you don't need it don't do it and also the person using your classes you can trust them to be well educated and they're going to use your classes in an appropriate way whereas the approach for other languages might be to restrict anybody from doing anything wrong but as a result the classes end up being huge huge files with tons of code so i don't think there is one yes or no or right or wrong way of doing this stuff and i don't want to start any debates in the comments but i do want to try to keep our classes very thin and just do exactly what we need no extra alright with that prefix in mind let's just go through each one of these very briefly encapsulation the whole idea behind encapsulation is that you can hide the inner details of a class or of certain data and you only need to share or expose what is needed for the user of the class to use this class so we might have the backing field as you might hear it called store some data and instead of just people accessing this data directly they access it through getters and setters which are basically methods that will give us access to the data so when we have an attribute such as name well we don't necessarily have to have that same exact thing on the back end there is a separation here where you only set the data through a method and you only get the data through a method so that is the most basic form of encapsulation the most popular thing inside of languages you often have tons of getter methods tons of setter methods inside of python we don't really create those unless we need to and there's a specific way we need to do that with what's known as a property and the good thing about a property is that you can add in a property when it is needed and none of the invoking code changes so you would still access that data like so but now we added some extra functionality in a setter method and a getter method using a property so we're going to touch on that briefly inheritance allows us to automatically have certain attributes for objects because they're defined in a base class so we've been talking about the example of a customer and this is for some subscription website let's say it's a subscription website to get courses well we could also have a teacher and these are going to have a lot in common so we could create a base class with all of the commonalities and let's say this could be called user then when we define a customer it's automatically going to have anything defined inside of this user class so that is the basics of inheritance polymorphism is kind of just an extra step of that where we can treat customers and teachers as the same thing if we approach them as users so we could say hey users we need you to do this or we need to update this data and as a result since a customer is a user that's okay and a teacher is a user that's okay but the customers can do something specific and the teachers can do something specific you know there might be a time of the month where we do the finances for the customers we charge the money and for the teachers we pay them money but we can address all of them together as a set of users so yeah when you're just talking about the theory here without some examples it can be a little bit confusing but i just wanted to just get a really quick overview of these three pieces and now we're going to go hands-on just to get some really simple examples of these so my goal now is to give you what you need for encapsulation inheritance and polymorphism probably can't do it justice in just a few minutes but we're going to give you the essentials here so this is our class so far we have a customer class pretty simple and then we have a list of two customers and we print the customers here so the very first thing i want to do is show you guys how to create a property now a property is basically just like a normal attribute but instead of it being just a variable such as name here or membership type it actually has an extra layer and this layer allows us to basically abstract away the the variable itself using methods so it allows us to have additional functionality it's pretty cool if you need it but in my opinion don't use it if you don't need it and that's just the approach of python that's what i've seen other people do and that's what i have learned is best practice however if you're coming from let's say c sharp and c sharp you just make properties from the get-go so if you want to make every single one of your attributes a property then be my guess but i don't think you're going to be adding a whole lot of value and we want to make these classes as much potent value as possible if that makes any sense at all so let's just get into it enough of my rambling so if we wanted to make name a property what we're going to do is we're going to create two methods we're going to create one that's called name so we'll say name like so as always we're going to put self in there and what this is going to do is it's just going to return self dot underscore name when you see something prefixed with a single underscore this is basically a way to say hey this is private don't touch this if you're not within the class so outside of the class you should not be typing anything like customer index zero dot underscore all these underscore things don't touch them you can see our underscore name right there leave that alone so we're gonna get rid of that and go back up here and leave this as so and one extra step we're going to put at property this is an example of a decorator it gives extra functionality and this is how we say that this is a property so when we try to get the name this is going to be invoked the underscore name is basically the backing field it's the data behind the scenes and anytime we try to set this data we need we're actually going to invoke another method and the way you define that is you say at and then you put whatever the attribute is so name dot setter and then we say def name self and then the data that we're going to assign it so we'll just call that name here and then inside of here we're just going to assign a value to self underscore name and we're going to assign it the parameter value here so if we save this and run we get the same exact output which is what we want none of the invoking code should have to change to use this however we can know that there's an extra step to get and set this data where we can actually add functionality in here if we wanted so we'll just say print getting name and print setting name running it now you can see some extra stuff is going on behind the scenes these methods are being invoked anytime we get or set the value of name but note that we don't actually have to invoke it like a function we can just get it like normal so we can say customers let's say we want that first customer dot name around this we get caleb we did not have to say name with parentheses or get name or anything like that we just used it like normal and that's what we want so that is how to create a property you can do any kind of functionality you want in here you may also see what's known as a deleter which will be used if you use the dell operator so that'll look like this name dot deleter def name self and then we just say del self dot underscore name so we're not going to use that a whole lot but just in case you want to know about that now what that means is we can go down here and we could say dell customers index zero dot name and running this it's going to delete it and it's no longer available if we got rid of that line it works fine so let's go in here and just delete that extra printing because it's not really doing anything just know that that is where the functionality would go now let's take a moment to talk about inheritance and i'm going to keep this really simple but basically we can create another class that customer derives from such as user and we'll just give this user a method so for example we'll say def log so if we wanted to log some data or something and inside of here don't forget self we always want to put self there inside of here we could just say print self so as is if we go down to the very bottom of our code and we try to invoke that so let's just grab our first customer and we say log we run this and it has an issue but if we inherited from that base class then this would be available to us so here's how you do that let's go back up to where we define customer and inside of parentheses you can put user and now anything defined inside of a user is also going to be defined in a customer so when we run this now you can see that this this log here works and actually prints all of that user's data so that's pretty simple when it comes to inheritance nothing too crazy the next step of this is polymorphism so if we actually had a couple of classes that inherited from user let's say we went in here and we created a teacher or something and this also inherits from user and we'll give teacher a new log method and what this is going to do it's going to do pretty much the same thing but it's going to say i'm a teacher instead of just printing all the details about them it's just going to do this blanket statement for all teachers so now you can really see polymorphism if you have a list of teachers and customers you can treat them all as users so let's scroll down to the bottom of our code here and we have two customers in here let's go ahead and add a teacher and just to make sure that we can invoke the log method on each one of these we'll try it on the second customer that works and we can also try it on the teacher and you can see that works so what we can do now is we can basically take this concept where we take the log method and we're going to do that for all of these people so instead of customers here we're going to have users and we say for user and users and we say user dot log so we invoke the log method on every single item in this list and we run it and we don't get any issues so what exactly is the magical part here well we treat them all as users and we invoke dot log because that is part of the user definition but if a derived class has an override such as in this case here we override the log method and gave a new implementation then it's going to do the teacher version of that if we did the same thing for customer it would do the same thing so let's say we take this paste it in here we can say i'm a customer and running this we get i'm a customer i'm a customer and i'm a teacher nowhere does it just do this general print this would just be for the users and you don't see that anywhere so that is the basics of polymorphism basically the ability to create code that works with general users but is still fully functional when you're past something more specific such as a teacher or a customer now i know that's a lot and probably these principles will take a lot more practice to truly grasp and see where to apply these we've touched all the basics of object oriented programming and now some more advanced stuff might come a little bit easier if you're looking for other stuff to research you can look into object relational mappers this is basically going to take database data and correlate it to a bunch of objects in your code so instead of just working with hard-coded stuff in here you could be working with actual teachers and customers in a database you could also look into some different object-oriented design patterns these get pretty advanced and basically teach you how to design programs using these oop principles and there's probably like six quatrillion other things you can study so just look up some more advanced object-oriented programming things and start learning thank you guys for watching if you've enjoyed this content please be sure to subscribe to this channel also be sure to check out my channel caleb curry we got stuff on python javascript c plus java c sharp database design all kinds of different things and would love to have you guys there so be sure to check it out and i'll see you in the next one"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Classes, Objects, Inheritance, and Encapsulation in Python",
        "Video Title":"Python Object Oriented Programming (OOP) - For Beginners",
        "URL":"https:\/\/www.youtube.com\/watch?v=JeznW_7DlB0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/JeznW_7DlB0\/hqdefault.jpg",
        "ID":"JeznW_7DlB0",
        "Publish Time":"2020-03-29T17:02:09Z",
        "Channel":"Tech With Tim",
        "Channel ID":"UC4JX40jDee_tINbkjycV4Sg",
        "Transcript":"hello everybody and welcome back so in this video you're gonna learn about object-oriented programming in Python and how you can create your own custom objects by making different classes in Python now this video is geared towards beginner so people that have some knowledge of Python have written Python code before but I've not yet stepped up into kind of the intermediate stage which I'm gonna call is this working with classes and objects and are looking to learn that so I'm restarting completely from the beginning if you have no knowledge of object-oriented programming that's totally fine in this series is meant for you if you're someone who just wants a refresher I'd recommend maybe watching the video on two x speed and slowing down when things get a bit more confusing or one you know you need to really learn that topic more so let's go ahead and get started and what we need to do to discuss object-oriented programming is first to find what an object is now a lot of people may think that when we talk about or object-oriented programming that's a completely new thing you know you've never seen an empath on before and it's a new kind of thing to tackle and to learn when in reality you actually see objects all the time when you're working with Python code and you just don't know that they're objects just because they're a little bit disguised and I'm gonna kind of take away that disguise and show you what all these different objects are so we may have heard of the notion of type before we see this function type and we know when we ask it what type a certain variable is or we ask it what types say you know a string is like this it spits out an answer to us and I'll show you what I mean by that so if I do print type of hello so we know that hello is a string datatype let's just see what we get in our console down here oops I didn't mean to do that we get class string so notice that this says class now most people just disregard the fact that it says this but this is actually very important what this is telling us is this right here this string that we typed in is actually an object of the class string right STR now what do you think is gonna happen when I put in X well we know that X is an integer so let's have a look here we can see that we get class int so notice that these different data types that we've called them before a string and an int are actually a part of a class and what that means is even though it doesn't look like we've created an object when we do something like x equals 1 we've said X is equal to the object which is a type integer with the value 1 that's exactly what we've done and the fact that we act create these kind of objects is very important in writing Python code and I know this hopefully shouldn't confuse any of you too much but if I write say a function so you know define hello and in here we just print hello like that and what I decide to do is I go okay let's look at the type of hello so notice I didn't call the function hello with the two brackets I'm just looking at the actual name of hello and we run this well if we add the final bracket at the end here we get class function so pretty much everything in Python that we work with is actually an object of some kind of class and later on in the video what we're gonna do is make our own classes so that we have our own specific types so these are what are called the built-in types these are built into the Python language and that's why they work a little bit differently than other classes that we'll work with later but just understand that whenever you create something in Python you are really creating an object which is an instance of a specific class in that class defines the way in which that object can interact with other things in our program and just show you what I mean by that let's just look at some common error messages and we'll see exactly what that means so we're gonna say x equals 1 y equals hello and watch what happens when I try to do something like print X plus y well we get some air let's go up and see here we get type error unsupported operand types for plus int and string so it's saying because our object x is an INT and our object Y is a string we cannot add them because the program does not know how to work with objects of those two types or in better words the addition operation is not defined for objects of int and objects of string at being added together so it's very important and pretty much the type that we have defines what we're allowed to do with the specific variable or with that specific object and it denotes the actions that we can perform you know plus minus all of that if I were to change this right to 2 and then we just do X plus y don't need to print it out we can see that that's totally fine and there's no issue because these are both ins which means that operation is defined for them ok so hopefully that is clear and that makes some sense I hope that gives you kind of understanding of what I mean by objects and now I'm gonna talk about methods because those are something that we can perform on objects so I'm sure that many of you seen this before I'm just gonna type string equals hello like that and many of you know that we can do something like print string if I can type this correctly dots up right so when I write this dot upper here what is that actually doing well let's look at here we obviously know that puts that all to uppercase but we're allowed to use this what we call method and this is a method whenever you have this a dot operator you have some name and then you have the two brackets at the end here and maybe there's some arguments that go inside of there that is usually a method that is acting on a specific object and in this case what it's doing is we have the method upper acting on the object of type string that is stored in this string variable and the reason we're allowed to use this method on it is because this is a string now notice that I can't do something like you know X equals one and then do X dot up and the reason I can't do that is because while it's gonna say right here int object notice int object has no attribute upper so these methods these different operations the things that we can do with these objects is based on the type of class that they are so that's something that we really need to nail in there and I hope that makes sense and now what I'm gonna show you is how we can actually create our own classes because hopefully that gave you a good enough explanation for what objects really are so to create our own class I'm gonna kind of do like a template here and then we'll go back through and discuss what everything is doing at once but just try to follow along for now so I'm gonna say class and we're just gonna do the classic kind of animal example to start here so I'm gonna say class dog and we're gonna define this initialization which we'll talk about later and actually no let's not even do that let's just say define bark like that and then what I'm gonna do in here is simply print work okay so what I've actually done here and I know this is gonna be weird for many of you that have not seen this before is created a class called duck what this means is I'm gonna make my own kind of blueprint now for any objects that are of type dog and I'm gonna start defining the operations that a dog is able to do now in this case I've created a method now a method is essentially just a function that goes inside of a class that's the easiest way to define it and for our basic example right now all of our methods are gonna start with a parameter called self and we're going to talk about what this self parameter means and how all this works later on but let's kind of build our way up to that so I'm gonna say D equals a dog down here and what I've done when I did this here is I'm actually saying okay I'm gonna have the variable D and I'm going to assign it to a instance of the class dog so this is class dog again you don't need to know how this works right now we're gonna talk about that in a second but when I write this line here and I put dog which is the name of my class and then two brackets like that I am instantiating right creating a new instance of the class dog so D is now gonna be an object that is of type dog and notice that we don't get any errors there and when I decide to print out type of D we're gonna see that we get class underscore underscore main underscore R squared dog now the reason we have these underscores is because this is telling us what module this class was defined in now by default the module that you run is called the main module that's why we have these two underscores main underscore underscore but we can see that this is again an object of the class dog and that means that whatever we define inside of here is going to be what is allowed or the operations that can be performed by a dog and one of those operations is bark so this is a method remember we've talked to a method just like dot upper before so if I want to use that method on an instance of my dog class because this is an instance of the class dog then what I can do is I can type well not upper but dot bark like that so I can call this method on my dog object again because it is a class dog and I've defined a method that works for dogs so when I do that we can see that we get bark and then it still obviously continues to print the type of that object so this is what we're getting out here so these are kind of how classes work we name the class typically the convention is to use an uppercase letter and usually you go camel case so you do like dog like you say we're gonna do two words you do like dog hello right so camel case like that and then inside of the method or inside the method inside of the class you can define a few different methods and operations that can be performed by this object so what I'm gonna do is I'm gonna say define I don't know let's just say meow I know this is wrong because it's not a dog and we'll talk about self in just a minute but I can define another method here and instead of printing something I could say return let's just say yeah like that so I don't necessarily need to print something I can return something I can have these methods take arguments so maybe I have meow and then I put X and maybe what I do is I return X plus 1 or something like that so maybe let's just call this add call this add underscore 1 that'll be the name of our method so I can return X plus 1 and then what I could do if I want it here is like it's a dog add underscore 1 put 5 there and let's print out the value that we get let's have a look at this year and we can see that we get the value 6 so we can make methods that have different arguments associated with them or parameters like I've put X here and that just means that when I call that method I need to pass in a specific value or specific values so that that can operate and that can work so that is how the methods work so now we're gonna talk about itself but before we can do that we need to talk about what's called the anit method which you may have seen me typing at the beginning before I kind of gave up on X I didn't want to get that complex that fast so right now we have two methods we have this bark method and we have this add one method and I hope those makes sense on how those work and now we're gonna talk about this special method here and by the way this has two underscores so it has underscore underscore and then an it and then underscore underscore now this is a special method and what this pretty much allows us to do is instantiate the object right when it is created so this method will be called whenever we write this line so whenever we create a new dog instance by writing dog and then the two brackets let me get rid of this down here for right now this method will be called and it will pass any arguments that we put in here so maybe I put something like Tim in here it will pass that to this method so let's say that every time we create a dog and we want to give it a name immediately so to create a dog the criteria is that you must give it a name well what we would do in here is we would put the parameter name and then here we would pass in the name so what we need to do though is what we're passing in this name we need to store this in the dog object somewhere right we need to have this stored we need to be able to access this this is kind of the nice thing about objects and this is where we're gonna talk about attributes what we can do if we want to store this name is we can say self dot name equals name now it's important to note that this doesn't these don't need to match but what we've just done here is we've created what's called an attribute of the class dog which is name so what this means is essentially every time we create a new dog object we will pass a name through this parameter so self just stays here to denote the object itself so like every time one of these things is called we will pass a reference to which object it was called on so we can access things for each specific object and we'll talk about that more in a second but here what I've done is to find an attribute called name which is equal to the name that we passed in so what I'll do is immediately I'll just print inside of here the name so that we can see how this works and notice that when I run this now we get Tim printing out so even though I didn't explicitly call this an it method because I wrote this line here it passed this name that I put in here to the name parameter and then it printed out name here inside of the Anette and we also defined an attribute called name that is inside of this dog class so what self is doing is every time that any of these methods is called kind of invisibly you don't get to see it the actual reference to this dog object is passed so that we can access attributes that are specific to each dog and what I mean by that is I can make another dog so maybe I say d2 which is you know another instance of the class dog except this time I named it's Bill right and now we'll do the print statement again so we'll say print name just to show how this works and here we get Tim and we get Bill so we actually have two different dog objects now one named Tim and one named Bill and they both store different names inside of there you know instance if that's what you want to call it so let's just show how this attribute works so the point of this attribute is that it's stored permanently for each specific object so I can actually go ahead and go down here and print D dot name after that's defined and I can print D - dot name like that and when we look here we can see that those names get printed out so Tim and Bill notice that I remove the print statement from up here so these attributes when we do something like a self dot and then anything that we want we can call whatever we want is equal to some value we can reference them later on and we can reference them from methods inside of our class so an example of that is something like say define get underscore name so the first argument here is always gonna be self are the first parameter and the reason for that is because we need to invisibly pass the actual you know dog object itself so that we know which dog were accessing when we're gonna get say the name of the dog so here we're gonna say define get name and all we're gonna do is return self dot name like that so now rather than saying dot name we can call thought get underscore name which is a method right and we can do that down here as well get underscore name and then we see that we get Tim and we get Bill so that is the basics behind objects now of course I can make more attributes as well so I could do something like H so let's say my dogs I want them to have a name so let's say my dogs want them to have a name and an age well what I'll do now is I'll say okay so in our initialization for dog we're going to take a name and we're gonna take an H so we'll define the attributes in here so self dot age is equal to whatever age we passed in and now every time that I make a new dog object I need to pass a name and an age so these this Tim will be an old dog here bill will be a young one and we'll run this and we see that we get no issue and if I wanted to I can go ahead and define another method here so get age and we'll return self dot age like that and if we change this to get inch and we change this one down here to get age as well what is the issue here oops so I'm forgot to put myself in here so notice what happened when I forgot to put myself so that's actually a decent error to run into I didn't put self in here as a parameter and you can see I know that it's kind of messy here it says get age takes zero positional arguments but one we're given so what does that actually mean so it's saying it takes is your arguments which it did when I didn't himself here but one was given but I didn't give any arguments inside of the brackets well that's because when we call a method this right the actual dog object itself immediately kind of been Blee gets passed to that method as the self parameter so we know which dog it's talking about so now if I go ahead and I add self we can see that this works fine and we get thirty-four and we get twelve so that's important thing to remember now what we can actually do is we can create other methods that modify these attributes or create new attributes so I can do something like for example set age so I in sight define set age will give itself of course and then we'll put an age here what I can do now is say self thought age is equal to H and now what I'm gonna do for Tim and we'll get rid of Bill for now because I think we get the point on how it works for different objects isn't gonna say D dot set underscore age and I'm gonna change his age to 23 and when we print it out we can see that 23 actually gets printed out so we can modify and we can access these different attributes from methods inside our class and this is where thing gets things get very powerful because this allows us to access data that is stored within a specific object and do different things with it based on how different methods and different things are being called right and this just is pretty much the blueprint that defines how a dog actually works how it operates what it can do the methods associated with it and the attributes that exist now some of you may be saying well why do I need to do this right like this seems kind of redundant I could write in a different style well the nice thing about object-oriented programming is once you create one of these classes you can have an infinite amount of instances of this class without having to change anything so let's say for example that we'll leave that class up here right now but we want to simulate what we've just done here for the Tim dog right we want to have an age and we want to have a name and we want to be able to change his age and all that well many of you that were more beginner programmers would probably tell me we can do something like this we can say dog one underscore name equals Tim you could say dog one underscore age equals you know 34 and there you go you just defined these two attributes if you want to get it you can just access the variable if you want to change it you can just change the variable okay nice but what happens when I want to make 25,000 dogs or every time I run my code I want to make a different amount of dogs you can't find a way that you can write all these different variables that have one two three all the way up to 50,000 or however many dogs I have to represent that that's why we use objects is whenever we're going to be kind of reusing something there is some instances in which we make a class where that we're only going to use once or instantiate once but those are kind of more complex examples we won't get into here but then okay so some of you might tell me all right well Tim I can just do lists I can say dogs equals that we say dogs underscore name equals that right and here we can put well the first name is Tim and then we had fill so this will handle the idea that we can't just have all these different variables right so dogs age equals and then we go let's say I don't know 32 14 okay that's great but the issue with this is that it's really a pain when I want to access the dog's age the dog's name and then what if I had like 25 other attributes or methods associated with the dog this is just just a paint you don't want to deal with that because I have to now find the index of whatever dog I want in one list which is a very time-consuming operation in computing and then I need to reference that index and all the other lists for all the other attributes and it just becomes very messy very quickly and let's say I want to delete one instance like feed you know the dog object bill or something like that right then I need to find the index of this I need to find the index of all of the attributes and all the other lists and I need to delete them at the same time to make sure that all my data stays consistent and there's no kind of offsetting things or too many attributes in one list so it's just as a pain to do it like that so I hope this makes sense on why we would do object-oriented style and now what we'll do is go into one example where we create a more complex object and show kind of the advantage of that ok so a lot of people typically will stomp at kind of the previous example that I just gave you now I want to go a little bit further and show you the advantage of doing multiple classes so rather than just using one class I want to show you how different classes can kind of interact in an example where I have a bunch of students these students all have some grade assigned to them and they're all a part of a course and then that course will have some methods on it to do things like find the maximum grade of all students give us the average grade of all students tell us the lowest grade some things that you may actually want to do say if you were trying to model or create a system for you know a school or something like that right so this is obviously going to be a little bit more of an example as opposed to super practical but hopefully this should give you some more insight into how we would do something like that so I'm going to start by cleaning creating a class called student I'm gonna go a little bit faster here but I will slow down and talk about what I've done after so don't worry if you can't keep up so we're gonna have a student and each student is gonna have a name age and eighth grade so we're just gonna say self the name equals name self dot age equals age and then self dot grade equals grade now this numeric grade is gonna be between 0 and 100 so I'll just write that down here just so we know that and that should be good for our students so we could of course go in here and add some methods if we wanted something like get underscore grade and what does ID 1 just so we have it in here and what we can do is return a self duck grade like that okay so this is this is where we're gonna leave our student now we could add a lot more things to this we could add a change grade we could you know add a test we can have weightings we can do all kinds of crazy stuff but for now we're gonna leave it at that so again we've defined three attributes here we have a name and age and a grade those are equal to the name age and grade that we pass in when we initially create a student and then we have one method remember this is a method and it simply returns a student's grade now I'm going to make a new class called course now what I'm gonna do in this course class is I'm gonna have the ability to add students to a course so when we create a new course what we're gonna need to do is we need to define the name of the course and the max underscore students that can be enrolled so in here we'll say self dot name equals name and self dot max underscore students equals max underscore students like that all right so what we're gonna do now is we're gonna add a method that will allow us to actually add students to this course but how are we gonna do that how are we gonna have students stored inside of a course object well what we can actually do is we can make a list of students so I'm gonna say self thought students equals a blank list now notice that I've made an attribute and I didn't assign it directly to one of these things that was passed into one of these parameters arguments whatever you'd like to call them that is totally fine in fact a lot of times will create attributes like self dot you know is active something like that equals false right we can do that that's totally fine and attributes are just whatever we decide to define and if we want to assign them to say the argument or parameter that's here that's fine and we can do that so there we go we have self-doubt students which is a blank list and I'm gonna start by creating a method here that's going to allow us to add a student object into this list so I'm going to say define add underscore student like that and in here antic self and we're actually going to take student now this student right here is actually going to be an instance of a student object and I'll show you what I mean by that in a second but all we're gonna do is say if the length of self dot students is less than and in this case self thought max underscore students then what we'll do is we'll say self dot students dot append student so we're gonna create a list of students inside of this you know this list right here right that's what we're gonna do and we're gonna add them in only if this is less than the maximum students in the class and what I'll do is I'll actually return true if the student was added successfully and then down here I'll return false if not so that we can tell maybe if we make a program down below if that student was added properly or not now I'm gonna add another method and here I'm gonna say define yet average great now wolf code that one out in a second but let's do an example of how we can actually now add students to these class so I'll make that a bit smaller so we can read it so let's make a few different students so let's say s 1 equals student what do we need to pass for student and named agent grades let's call that Tim let's call that 19 and let's call that 95 Tim's a smart guy all right and then we'll do s2 equals student we're gonna say bill we'll put him at 19 as well and he's not as smart he is 75 and then let's do s3 equals and let's go Jill keep with the trend Tim billed Jill 19 and maybe she has a 65 ok so we've created three students here and these students are proper they should work fine let's run this make sure everything's all right now how can we actually add them to our course well the first thing we need to do is make our course so we're gonna say course equals course like that what do we need when we make a course we need a name and we need a maximum amount of students so let's name this course let's say science or something like that and let's say the maximum amount of students is actually gonna be 2 because I want to show what happens when we add a student past the maximum now we're going to add students so how do we add them well we have to call that method so course dot add students so there we go we can add student s1 and then let's do course dot add student again and let's add s2 so now let's run this we see everything works fine and let's actually make a thing that can you know print out some thing about our student or can show our students so what I could do is I could say let's print down here course dots and this students and let's have a look here and we get main student object on some gibberish location main student object at some gibberish location so what this is actually telling us is both of these things inside our list right now our student objects and notice what I can actually do is let's say I index the zeroth item in that list so the first student that we added and I decide to call dot name on it well then that should hopefully print out the name of that first student which is 10 so that's cool and that's how we do that right we can add things in to this course so now this course stores all of our students and since all of these students have a grade on them inside of our course we'll be able to access that so now that we've done that let's write this method that can get the average grade of all of the students that are enrolled in the course to do that what we're going to need to do is grab all the students from the students list we're gonna need to add that to an average and then we're gonna need to divide that value to figure out what that is so what we'll do is we'll say value equals 0 we're gonna say for student in in this case self dot students then we're gonna say value plus equals student the duck gets grade like that now notice that we could just type great if we wanted to but I usually just like to use the method because say we were to change any attribute later then this code wouldn't break so long as this method was still named the same thing and we can modify the method in here so they returned the proper grade like say we had a student enrolled in multiple courses then we could you know determine their grade in a different way and when we called get grade maybe we don't just return self grade we return something different so this still continues to work so we'll say value plus equals student get grade and now all will simply do is return in this case value divided by V Len of self dot students so let's see what the average grade of our courses so course get fabric grade will actually print that out like that and run that and we can see that the average grade is actually 85 and that makes sense with the grades that we have here so that's the idea behind what I'm trying to show you is that we have you know we can have different classes we can have attributes with them and when we can program an object-oriented style now it doesn't matter how many students we have or how many different courses we have and what students are enrolled in which in fact what we could do is we could make another course we can add the same students to it and then we would obviously have to change the way that their grade was calculated but that's something that we could do now let's just look at what happens when I decide to try to add that third student so course start add student like that and we decide to add student s3 we can see that we get the value false and notice that the average grade does not change because we didn't actually add that into the course right okay so we finished off the basics on classes and objects and how to create our own classes and hopefully that last example helped you to really kind of understand the advantage of doing this now what we're going to talk about here is something called inheritance now this is where we slowly start getting to a little bit more complex and some more difficult concepts so try to follow along but I don't find inheritance as that extremely difficult so the idea behind inheritance and we'll show what that is in a second is you have two classes that are very similar so let's say we have a general class called maybe alright let's do a better example let's say we have a class called dog and a class called cat and in fact let's actually code these out so that we can see this for real so let's say in the init method of the cat what we're gonna do is we're gonna have self name and age like that so we're going to say you know self dot name equals if I can type properly which apparently is not happening right now and then self dot age and then we'll do define speak and all we'll do in here is just print you know what is this cat yeah okay and then let's say we have a dog so we'll say class dog like that and we'll define underscore underscore net on our squander square put the self put the name put the age because that's all we want for that and we'll say self dot name equals name self dot age equals age and then define here speak and the only difference between these two classes is actually gonna be the fact that this prints bark instead of meow so notice that these two classes are almost identical in fact there's only one line of code that's different other than the class definition at the top so there must be a way that we don't need to write this twice that we can actually use what's called inheritance so that these dog and these cat classes can well inherit from an upper level class which means that all that functionality is defined in one place and we only need to write what's different about those two classes inside of them so ideally what I would like to have is to be able to remove this init class from both of these and just have the speak method because the only thing that's specific to a cat in a dog at least for my example is the fact that one of them says meow and one of them says bark so let's get show how we can actually do them so by removing that you know was an it method and just having these methods here what we need to do is make an upper level class which I'm actually gonna call pet so I'm gonna say class pet what I'm gonna do in here is define that an it method that we had before I'm actually gonna define a let's say show so this show method is just gonna show me all the things about my objects so I'm gonna say print and in here we're gonna say you know I'm actually gonna use an F string you may not know what that is but don't worry about it I am self taught name and I am self dot age years old okay so what I've done is I've defined this pet class and this pet class essentially is going to contain the functionality that I want the cat class and the dog class both to have and then in sign of the cat class and inside of the dog class what I'll do is I'll define the methods or the attributes or whatever it is that I need to do that are going to be different for this specific class so notice that pet is general we call this a generalization whereas cat and dog are more specific so how do I actually allow the cat class in the dog class to use this functionality well what I can do is simply add brackets and write pet now what this stands for is I am inheriting the upper level class pet so we're saying this is the general class this is a more specific class that's being created and inherits from pet and the same thing with dog let me show you how this works so let's create an instance first of all of the pet class and then we'll make one of the cat and the dog class and I'll show you how it works so let's say P equals pet notice that for pet we need a name and we need an age so let's say it's him let's put him at 19 and then let's do P dot Show so let's look at this year I am Tim and I am 19 years old so that is how the pet class works pretty straightforward now let's make a cat class so let's say C we're gonna say C equals cat I'm gonna say the cat's name will be Bill and that cat will be 34 like that and then let's do the same thing here see nutshell now notice that even though there's no method called show inside of cat it still pops up and says I am Bill and I'm 34 years old that is because it inherits inherits the properties from the pack class because I've defined that up here and notice that even though I didn't defined in an it method in here this still worked fine right there's you know this was okay we initialized because we use the anit method that was defined inside a pet and of course we can do the same thing with dog so we can say D equals dog what do we call this one before Jill 25 and let's do D dot shell like that we go I'm jail and I'm 25 years old so that works but now let's show what happens when we call speak on the cat and the dock so if I decide to call speak like that and we'll call it on both of them here you can see that we get me out and we get bark and again that's because this speak method is different for the cat class and different for the dog class and since its defined inside of here and we created an instance of cat when we make a cat instance well we're gonna use the speak method that's defined here and in fact what I could actually do is define speak up here and I could say define speak and I could say print I don't know what I say like that okay and then if I decide to change this from show to speak notice that we're calling speak three times speak is defined here and it's defined in both of our child classes is what we call them so when they when this is the upper level class the more general version any classes that inherit from it are known as the child classes or the derived classes um that's not that important to know but just you know figured out through that lingo out there and notice that when I run this we get I don't know what to say meow and bark so if there is a method defined in the lower-level class or the child class that is the same name as the upper level class it will automatically override that method so it will take over anything that's defined in here is more specific to this class so it will use that rather than using this upper one right and you might ask well why would we even bother defining one in here if it were just gonna take it over later well we might create another pet right maybe like a fish or something for example like I can do something like this class fish pet like that I can literally just define that and put pass inside of here and now what I can do is say okay let's say F equals fish and then we need a name so let's call this bubbles why not give it ten and now we can say F dot speak and notice that we get I don't know what to say for this fish class because there was no speak to find inside of here it used the speak that was defined in the upper level or parent class right the one that we inherited from so that is the basis behind inheritance now it gets a little bit more complicated I'm gonna show you the more complex out aspects because let's say I want to add one attribute to my cat so let's say that for cats we actually care what color those cats are as well well what I would need to do to do that is this initialization method right because I want to pass it and when I create a cat but I don't necessarily want to rewrite this whole thing so what I'm gonna do and I'm kinda need to rewrite the whole thing but you'll see why we would actually do this in a second I'm gonna say self name age cover like that and now all I'm gonna do let me say self dot color equals color so what some of you may say here now that we've defined the color in here is that what we should do is take this name and age right just copy it and paste it in here now that would be a correct answer but I'm gonna tell you why we shouldn't do that so the idea here is that sometimes in the initialization method of our parent other things are happening other than just redefining attributes right and in that instance it would not be correct for us to simply omit the fact that we're not gonna call this a net from the parent we're just gonna define the attributes because that could mean that we miss out on a very important you know function that's happening from inside of this initialization to give you an example like saying some web applications maybe this initialization actually calls a database right and an ask for some information for a database and it sets up the object using that it wouldn't necessarily be correct then for me to just you know take the attributes that we're in here and just redefine them as attributes here I would actually still need to call that initialization to make sure the object was set up properly so to ensure that that happens when we do an inheritance like this we do need to define the arguments that we need are the parameters that we need for the parents initialization so name age but there's a fancy way to call that so rather than you know rewriting this here I can actually explicitly call this and set up our object that way so to do that I'm gonna say self are super underscoring square net done underscore underscore name age now what this is saying is super stands for reference the superclass and the superclass is actually the pet class or the class that we inherit from here so that's what super stands for the class that we are have inherited from then underscore underscore net underscore underscore defines the method that we want to call right and then name and age are the arguments that we're going to pass to that so name and age notice I don't need to pass cell that's fine we don't self and it's gonna call that and what's gonna happen is it's gonna run whatever's inside this initialization then that's gonna set up the name and the age for our object so we will have those properties defined and then we will call self duck ah they're equals color or we will execute that line so now we have the cover right and if I just go ahead and want to define here show so I want to change this show method maybe for this cat object then what I can do is I say I am self that name and I'm self that age and I am and in this case self dot color right so we can change the show method in here and now let's go to cat let's change this to show let's add a color because we need to add a color now we have to find that in the Annette and let's run this and see what the issue is now that we're getting fish is not defined oh did I do I guess I've deleted fish or we got rid of it at some point I did not remember okay so anyways let's run this and we can see that we have I don't know what to say I'm Bill and I'm 34 years old and I am brown and then we get bark right so that is how that works for inheritance and this is how we call the super class or the upper level parent class right we need to call this initialization method before we just go ahead and do anything else because that parents initialization may be important it may do other things it may call another method right so we can't just simply skip that we need to call that explicitly by writing this line now this line is kind of complicated syntax you know it's easy to forget but try to remember it super again references the parent class pet and then we have an it and like that so I hope that gives you an idea on how inheritance works now it's hard to give really good inheritance examples without going more complex and more into detail so I'm gonna admit doing that for now but just remember that when you have classes that do a very similar thing they have almost everything identical except maybe a few attributes or a few methods it might be a good idea to what we call generalize and make a parent class that is a general class that defines functionality will be used in all of your child classes and that is a very common practice and object-oriented programming to use inheritance for example a very good example is for example a good example is something like person hierarchy so let's say you have you're working in an organization and the example we want to consider is we have managers and we have employees now managers have different access than employees but employees and managers have very similar properties they all have a name they'll have an age they'll have an ID they have a birthdate they have many different things that they are the same for both of them well if we were trying to model that system and we were gonna program that and make that what we would likely do is create an upper level general class called person that defines all of the attributes and all of the methods that are general to all people whether they are managers or employees and then we would create two child classes one for employee and one for manager and that would define the specific things that the manager can do and that the employee can do that are different from each other so that's the idea behind inheritance hopefully that makes sense and now let's move on to our next topic okay so now it's time to talk about static and class methods and class attributes and in fact we're actually going to start with class attributes now previously you would have seen that every time we defined an attribute for one of our objects we used self right and inside the class we had self every where self was referring to the instance in which we were talking about in that you know context right so here what we're gonna do now is talk about class attributes now class attributes are attributes that are specific to the class not to an instance or an object of that class so I'm gonna do a basic example where I just create a class person and I'm gonna say number of people equals 0 now in here I'm gonna define the NIT method and say to find an it like that and we're just gonna say each person will simply have a name keep it nice and simple like that so self that name equals name now let's make p1 person we'll talk about what I've done in a second here in case anyone's confused and let's say p2 equals person let's make this Jill okay so we have this number of people thing and I'm sure a lot of you're like what the heck is that well this is a class attribute and the reason it's not a regular attribute is because it does not use self so because it's not defined inside any method because it does not have access to an instance of the class it is defined for the entire class which means that this is not specific again to any instance it's not gonna change with from person to person whereas we know something except that name will be different for each instance of the person class this is not different for each instance of the person class in fact it's the same so what I can show you is that I can actually go ahead and print say you know p1 dot number of people and that gives me the value 0 but what I can also do because this is not specific to the instance of any class is right person dot number of people and the reason I can write personally because again this is specific to the class not to the instance so we can access it by just using the name of the class and that actually means that I can change it using the name of the class as well so person dot number of people equals 8 right and then if I go ahead and say okay P 2 dot number of people notice that we get 8 even though I didn't explicitly change it on P 2 it changed for P 2 because this was specific to the class and when I reference this all this says is when I say P 2 number of people the way that Python interprets this is what is the type of P 2 okay that's person notice you can see it's popping up here it says person then let's say does it have an attribute called number of people know this person itself does not does the class have an attribute called number of people yes it does let's display back and since we change that to 8 that's why we're getting that value and of course if we do this for P 1 like we've shown right we'll get the same number we'll get P 1 number people get 8 and if we decide to change this halfway through right so we do person equals 9 obviously that will become 9 now just because we changed it right before we printed the next value so that is the basics we be behind class attributes there's a lot of different uses for them now in this case what I want to do is have a number of people so what I was gonna do is inside of here say person number of people plus equals 1 so that we keep track of how many people or how many instances we have created of this class person so now if I decide to print P you know person dot number of people and we'll do that after we create the second person as well see we get one two and this automatically increments it so that's a basic example of one you would use a class attribute they're not extremely you but you know is something that you may want to consider and sometimes say you want to define a constant something like maybe gravity or something that's going to apply to every single person that you want to be a constant value then you define that as a class attribute so that if you ever decide to take this class and use it somewhere else that constant is still defined as opposed to putting it up here like as opposed to saying gravity up here and making it equal to you know negative 9.8 meters per second at the top what you would do is you would make that a constant inside as a class attribute so that now every time you want to access the gravity property for you know a person what you would do is you can reference directly the person's class constant of gravity rather than a global constant which may not be there if you put this class in a different file and that's the idea behind this these classes as well is that they are exportable I can write a class in one file and I can take it and move it to another file and hopefully it should continue to work assuming it does not depend on anything from the previous file so ideally you want to make your classes as robust as possible which means that they don't need anything outside of their initial class definition unless that's gonna be another class that maybe it's interacting with like in the example before we had course and we had student but that is the idea behind class attributes now let's talk about class methods so class methods are defined a little bit differently than regular methods and in fact I'll show you how they work we have a good example kind of set up here so I'm gonna say define and in this case we're gonna say number of people like that instead of saying actually self we're gonna say CLS then what we're gonna do right here is return CLS number of people and we're gonna use what's called a decorator to denote that this specific method is a class method and to do that we write act class method directly above the function or but yeah I guess function method whatever you want to call so I know this seems a little bit weird but the idea behind this is this method here is not going to be acting on behalf of one instance it's not gonna be specific to an instance and in fact you can call it on an instance if you want but that's not really going to be very effective what this is meant to do is be called on the class itself so that it can deal with something like you know returning the number of people that are associated with this class so these are class methods they that means they act on the class itself they do not have access to any instance and that's why I've written CLS here instead of self because there's no object what it's doing is just acting on this class so for example say we wanted to add to the number of people then what I could say is class method define add person like that CLS and we'd say CLS dot was it number of people like that plus equals one so that would be these are class methods we denote them with at class method just so we know that they're not referencing you know itself like that they're referencing the class so let's actually have a look at how we use that now sure need to necessarily print the number of people anymore what we can do is we can go down here and say person dot number of people and I don't know why there's so many brackets showing up there geez but if we look at this uh what we would need to print it out first we should hopefully get the value of 2 so let's look okay so we need to rename this so that this is not the same as the attribute because that's gonna be confusing so let's add an underscore there because I was realizing what the heck what's going on there and we can see that we get 0 oh so that is because I did not continue to add here so actually what I'm gonna do is and this actually be a good example so let's illustrate this here is I wanted to say too but I forgot that I forgot you know didn't continue adding this but what I can do is actually use the class method that I've defined here to add a person so I can say person dot add person like that inside of my in it and what that will do is call the class method on the class person and then it will add to the number of people so now when we run that we get two so that is how a class method works I don't need access to the instance to call it although I can use an instance to call it if I want I can simply reference the actual name of the class and this does not access any specific instance it only accesses these class attributes or anything specific to the class itself ok so that has big class methods now let's get rid of those and let's talk about static methods so sometimes I'm actually in delete the entire thing you want to create classes that kind of organize functions together so for example you know when you say like import math like that and then you get access to all these math functions like math dot abs or math dot square roots or whatever it is you're gonna use well what they sometimes end up doing in an object-oriented programming this is pretty common is when you have a bunch of functions that you would normally just define like you define like add one like this yeah I would do something you define add two like this well what you want to do is you want to actually organize them into a class and the reason you do that is just so it's a it stays a little bit structured you can move all those classes together to another module and continue to use them and to do something like this you want to use what's called a static method now let's make a class called math and what I'm gonna do in here is I'm gonna define some methods or some functions that I'd like to be able to use but that are not specific to an instance so I don't want them have to make an instance of this math class to be able to use these methods I want to be able to call them at any points and it doesn't matter if I have an instance of the math math class or not I would like to be able to use them so what I'm gonna do is actually create what's called a static method now static means not changing right it means staying the same and that is a really good way to describe what these methods do because they do not have access to an instance just like the class method all they do is something they do something but they don't change anything that's the idea behind a static method they don't change anything because they can't they don't have access to anything so in here what we're gonna do is just say define add five and in here I don't even need to put a cell for a CLS because this is not going to access anything all its gonna do is just act as a function that is defined inside of this class and again some of you I'm sure are yelling saying what's the point of doing that why don't I just define a function globally well it's more of an organizational thing and there's some more specific applications in which you would use a static method so I do need to show them to you so here we're gonna take a number and all we're gonna do in this method is return X plus five so now if I want to actually use this what I can do is I don't need to say like M equals math like that and make an instance that's not necessary I can simply write the name of the class and math dot add five let's put five in here let's have a look if I got rid of the s and we get the value ten so this is called a static method and we can make as many of these as we would like just as we can make as many class methods as we want so maybe we do add ten right and then we have bat like that and we can change this method to say add 10 and now if we run this we get 50 so that is a static method notice it doesn't need anything in fact what I can actually do is say define you know PR let's say that's gonna stand for print let's make this an @ static method and now let's just print run like I'm just showing that you that you don't need any attributes in there are arguments and let's just call PR and now you can see that we get run and since I printed the value of that it prints them none but there we go like that okay so that is static methods and class methods and to be honest with that that is pretty much everything you need to know about classes and objects at least at a beginner level now there is some more interesting things that we could talk about but in the idea of keeping this more for beginners and so that everyone can kind of understand doesn't get to confuse I'm number frame from discussing anything further but I hope this really gave you a fundamental knowledge of how classes and objects work in Python a little recap here is to remember that everything we work with is an object in some sense we have functions which are objects we have strings which are objects integers are objects and what an object does is it a in instance of some class and that class defines the properties and almost kind of the blueprint for that object it says okay so if we have a string we can use the method like upper lower if we have an INT we can add integers together and a class the type of an object is very important because it defines the behavior in which it can exhibit so that has been classes and objects in Python and introduction to object-oriented programming I hope you guys enjoyed if you did please make sure you leave a like these videos are not that easy to make and they are definitely time consuming so I would appreciate it subscribe to the channel and of course let me know if you have any questions or if there's anything you would like to see in the future"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Classes, Objects, Inheritance, and Encapsulation in Python",
        "Video Title":"Fundamental Concepts of Object Oriented Programming",
        "URL":"https:\/\/www.youtube.com\/watch?v=m_MQYyJpIjg",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/m_MQYyJpIjg\/hqdefault.jpg",
        "ID":"m_MQYyJpIjg",
        "Publish Time":"2020-11-01T13:35:56Z",
        "Channel":"Computer Science Lessons",
        "Channel ID":"UCSX3MR0gnKDxyXAyljWzm0Q",
        "Transcript":"the four fundamental concepts of object-oriented programming are abstraction encapsulation inheritance and polymorphism before considering what they mean first consider what is an object an object is a thing from the real world it could be a car a boat or a book but it might not be something physical that you can touch it could be a dental appointment a seat reservation for the cinema or a bank account in the realm of object object-oriented programming an object is anything of interest to the software application that you're building it's anything that you want to store and process data about another name for an object is an entity this leads us to the first fundamental concept of object-oriented programming namely abstraction abstraction means to simplify reality for example a person is an object but if you were designing a new application to process data about a person it's unlikely that you'd be interested in everything there is to know about a person rather you would only concern yourself with the data that are relevant and the tasks that you want to perform with those data to create objects programmatically you need a class a class is a template for creating objects a class is code written by a programmer to define the attributes and the operations of an object attributes describe the object they're sometimes referred to as fields because they contain data most programmers know them as properties properties are coded within the class either as public variables or as property procedures operations are actions that can be done to or performed by the object they're sometimes referred to as behaviors but more commonly they're known as methods methods are programs within the class that are coded either as procedures or functions a class is a template for creating objects and it's often compared with a pastry cutter because once it's been written it can be used to create many objects of the same type in fact a class is sometimes referred to as a type each object is an instance of a class in the computer's memory creating an object from a class is therefore known as instantiation once these objects have been created their properties can be assigned values making each object of the same type a unique entity each property is defined in the class by a property procedure which may include code to validate a property value while it's being assigned this helps to ensure the integrity of the data contained within the object the property values that have been assigned to an object are collectively known as the state of the object it's also possible to assign values to properties while an object is being instantiated by means of a special method called new this method is known as the constructor the second fundamental concept of object-oriented programming is encapsulation this means to hide the complexity of the inner workings of an object from the programs and the programmers that make use of it it's often referred to as information hiding because the data contained within an object and the functions that manipulate the data are bound together and therefore safe from outside interference in some big software development projects it's common for more experienced programmers to write the classes that will be used by the junior programmers a class might be made available in the form of a class library indeed some software development companies specialise in developing new classes to be used by other software developers compiled class libraries protect their intellectual property to write code that will create an object from a class then set its properties and call its methods it's not necessary to understand the inner workings of the class all the programmer needs to know is the name of the class the properties and methods available and any data that need to be supplied when they're called in other words all our programmer really needs to know about is the interface of the class the implementation code of those properties and methods can remain a mystery this greatly simplifies the use of objects and helps to ensure that the data and operations encapsulated within are safe the third fundamental concept of object-oriented programming is inheritance this means that a class can derive its methods and properties from another class inheritance can result in a hierarchy of classes for example this person class defines the methods and properties of a person object an employee in a business is also a person so through inheritance an employee class derives the methods and properties of the person class an employee is a type of person a customer of the business is also a person so through inheritance a customer class also derives the methods and properties of the person class a customer is a type of person an employee class can have some extra properties and methods of its own it can extend the person class and so can a customer but it need not stop there a programmer is a type of employee and so is a manager and a cleaner inheritance defines type of relationships the class at the start of the inheritance hierarchy is called the base class any class that derives from another class is called a sub class any class that is derived from is called a superclass the final fundamental concept of object-oriented programming is polymorphism polymorphism means that a class can implement an inherited method in its own way the person class at the base of this hierarchy has a method which will save details of any object created from the person class perhaps to a database thanks to inheritance all of the classes in this hierarchy do exactly the same thing but it may be necessary for a customer's details to be saved differently perhaps to a different database polymorphism allows for this the customer class can override the workings of any method or property that it inherits with a new version of its own different forms of the same type of object with the same interface can behave in different ways polymorphism literally means many forms to recap the fundamental concepts of object-oriented programming abstraction means to simplify reality and focus only on the data and processes that are relevant to the application being built encapsulation means that data and the programs that manipulate those data are bound together and their complexity is hidden inheritance means that a class can derive its methods and properties from another class this might result in an extensive hierarchy of superclasses and subclasses polymorphism means that different subclasses of the same superclass which therefore share the same interface can implement those interfaces in their own ways by overriding the code of the methods they inherit"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Classes, Objects, Inheritance, and Encapsulation in Python",
        "Video Title":"Python Object Oriented Programming in 10 minutes \ud83d\udc0d",
        "URL":"https:\/\/www.youtube.com\/watch?v=q2SGW2VgwAM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/q2SGW2VgwAM\/hqdefault.jpg",
        "ID":"q2SGW2VgwAM",
        "Publish Time":"2020-12-28T21:27:28Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain object oriented programming in python so sit back relax and enjoy the show if i could have just a moment of your time please like comment and subscribe i would greatly appreciate it welcome to today's topic on python object-oriented programming also known as p-o-o-p and in today's video we're going to be creating objects an object is an instance of a class by using programming we can create representations of real-life objects so look around you wherever you're sitting or standing right now you are surrounded by objects next to me i have a phone a television some snacks and i'm talking into a microphone point being we can use programming to mimic real world objects by assigning a combination of attributes what an object is or has and methods what an object can do now in order to create an object we'll need to create a class a class can function as a blueprint that will describe what attributes and methods that our distinct type of object will have you can either create your class within your main module or you could create a separate file dedicated solely for your class now to create a class we would type class and then the name of the object that we would like to create so today i would like to create some car objects because i like cars so we would type car and a common naming convention with class names is that they should be capital so car is going to have a capital c and for the time being we need to type in something i'll just type in pass as a placeholder so if you have a small program it may be better to write your class within your main module but if your class is fairly large you may want to consider placing your class within a separate module so if you were to take that route we would go to file new python file and we would name this car click python file and we would declare our class within the separate module so class car and for now i'll type in pass then we just need to import this class so within our main module we would type from the name of the module import the name of the class from car import car now objects can have some combination of attributes and methods attributes describe what an object is or has so what are a few attributes that cars might have they might have a make so let's create a few variables for the time being i'm just going to use none as a placeholder cars can have a model a year and a color now objects can also have methods what kinds of methods could cars perform perhaps a drive method and a stop method so let's define those def let's say drive and we'll have one argument self self refers to the object that is using this method now what do we want to do when we call this method let's say this car is driving let's create a stop method as well tef stop and we will print this car is stopped we now have all of the different attributes and methods we would like our car objects to have but there is one more thing that we need it is a special method called the init method that will construct objects for us in other programming languages this is known as the constructor so we need a special method that will create objects for us so we need to define this method def and the syntax on this is somewhat strange it is two underscores i n i t it's short for initialize 200 scores again and then we need at least self as an argument and then we can actually assign our car objects unique variables so take all of these attributes that we have and we're going to place them within this init method now we can receive arguments when we create car objects but we need to pass them in as arguments to our init method so we need to set up some parameters let's say in order to create a car object we need a make a model a year and a color then when we receive these arguments we can actually assign them to each car's specific attributes but we need to precede each of these with self self is referring to the object that we're currently working on or creating so self.make self.model self.ear and self.color and then when we assign these we're going to say self.make equals whatever make that we receive when it's passed in as an argument self.model equals model and continue that pattern for year and color all right that is all we need for our class car we have a constructor we're assigning arguments that we receive to the attributes of our car object and we also have two methods one for drive and one for stop now we can start creating some car objects so going back to my main file here to create an object we need a unique name for it let's call this first car just car one equals the name of the class car then a set of parentheses now in order to construct a car object we need to pass in a matching set of arguments you can see here that we need to pass in a make a model a year and a color so what kind of car should we make let's say that the make is going to be chevy we need a model perhaps corvette a year 2021 is good and a color let's say blue all right now let's actually access some of these cars attributes and i should probably put this one in a print statement so print car ones make and this should print chevy then we can do the same thing for model year and color so let's change some of these around model year and color yep this object is a chevy corvette 2021 and the color is blue and we should have two methods as well so car one i would like this car to use its drive method this car is driving and let's have this car use its stop method car one dot stop this car is stopped there's one thing that i should mention real quick because i forgot to mention it earlier so within our init method you can see that we need five arguments in order to construct a car object self make model year in color but when we pass in our arguments we're not passing in anything for self we only have four arguments here that's because with python we do not need to pass itself that's done automatically for us we're referring to the object that we're dealing with as you can see with our drive and stop method we need to pass in self in order to execute our method but when we call this method we do not need to do so so just remember with python with self we do not need to pass in anything for this argument that is all now the nice thing about this is that we can reuse this class as a blueprint to create more car objects we just call that init method that constructor so this time let's create a second car called car 2 and this will be a different kind of car what kinds of arguments should we pass it let's say this is a ford mustang the year will be 2022 and the color will be red all right let's check car to use attributes and let's have car 2 use its drive and stop method this is a forward mustang the year is 2022. the color is red this car is driving and this car is stopped one other thing that we can do too is that within our methods here let's replace car with the name of the model that we're working with so this plus self dot model plus is driving now this self keyword think of it as you're replacing self with the name of the object that we're working on if car one is using its drive method replace itself with car one if this is car two that called this method then replace itself with car 2. think of it that way and let's do the same thing for stop this plus self dot model plus is stopped all right probably don't need these anymore so let's have car one use its drive and stop method this corvette is driving this corvette is stopped let's try this with car two this mustang is driving this mustang is stopped now you can have them do things independently too let's have car 1 use its drive method and car 2 use the stop method this corvette is driving and this mustang has stopped in conclusion a class can function as a blueprint to create objects we can assign attributes what describe an object is or has and methods what each object can do and then within our class we have a special method called the init method we can pass in some arguments and assign these arguments to each object's attributes and then we can reuse this class as if it was a blueprint so we can create more objects out of it so that is the basics of object-oriented programming in python if you would like a copy of all this code i will post this in the comment section down below but yeah that's the basics of object oriented programming in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro [Music] you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Classes, Objects, Inheritance, and Encapsulation in Python",
        "Video Title":"Python inheritance \ud83d\udc6a",
        "URL":"https:\/\/www.youtube.com\/watch?v=an59YHkdK9A",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/an59YHkdK9A\/hqdefault.jpg",
        "ID":"an59YHkdK9A",
        "Publish Time":"2020-12-28T21:27:25Z",
        "Channel":"Bro Code",
        "Channel ID":"UC4SVo0Ue36XCfOyb5Lh1viQ",
        "Transcript":"hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain inheritance in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running let's talk about inheritance the term inherit means to receive derive or be left with and we can apply this concept to programming classes can inherit something usually attributes and methods from another class these classes can form parent-child relationships where a child will receive everything that the parent class has much like you inherit jeans from your parents and classes can have children and give whatever they own to their children and in today's video we'll be creating a parent class called animal and children of the animal class will inherit the common attributes and methods that all animals might have to kick off this video i think what we'll do is keep all of our classes within the same file just so that it's easier for us to read and understand let's begin by creating a class called animal so at the top type class animal and what are some attributes and methods that all animals should have let's say we have a class variable called alive and we'll set this to true if you're an animal you begin by being alive and what are some methods how about an eat and sleep method so let's define those def eat what are we going to do when we call this method let's print something let's print this animal is eating let's also create a sleep method def sleep what are we gonna do when we call this method let's print something as well this animal is sleeping and we now have our animal class now let's create separate classes for specific types of animals let's say a class for rabbit a fish and a hawk so we can make objects of those classes so let's begin with a rabbit class class rabbit now to use inheritance with the class that you intend to be the child class after the class name add a set of parentheses and then pass in the name of the parent class in this case it's going to be animal so we will add that to the parentheses so now rabbit is the child class and animal is the parent class so the child class is going to inherit everything that the animal class has so for the time being i'm going to type pass so this rabbit class will have access to a class variable called alive and an eat and sleep method so let's define a fish and hawk class and i'm just going to copy what i have here and just change rabbit to fish and then do so again and change rabbit to hawk this is our family tree animal is the parent class and it has three children a rabbit class a fish class and a hot class and for the time being we're just going to write pass as a placeholder so i bet we can create objects from these classes so let's do so let's say we have an object called rabbit rabbit equals rabbit let's do the same thing for fish and hawk all right we now have three objects rabbit fish and hawk and let's take a look at their class variables i bet they have in a live variable let's check that so i would like to print rabbit dot oh would you look at that this rabbit class has a class variable called alive even though there's nothing within this class well that's because we used inheritance so each of these three children classes inherit everything from their parents all of these attributes and methods i bet they have eaten sleep functions as well so let's check that with fish let's have fish use its eat method and hawk will use its sleep method hawk.sleep so the rabbit is alive the fish is eating and the hawk is sleeping now even though we have nothing written within each of these specific types of animal classes all of these animals have access to these attributes and methods because of inheritance and another benefit of inheritance is that we don't need to keep on copying and pasting this code for example let's say we were not using inheritance so we would not need an animal class we could write our code this way where we would just copy and paste everything underneath each of our classes so what if we need to make a change to one of these methods as in your boss says you know what let's change sleep to slumber okay well we would have to go to each of these classes and make the change manually it's not too bad if you have like three classes but what if you have hundreds that's going to take a lot of effort so wouldn't it be nice if we just list everything that each of these classes has in common and then have all of these classes inherit from one common class and then if you need to make any changes you can do so just within this class and this change will apply to all of the different child classes so that's another benefit of inheritance and not only does it make any changes easier but each class can have their own unique attributes and methods as well along with the attributes and methods that they inherit from their parents so for rabbit fish and hawk let's have each of these classes have their own unique method as well so for rabbit let's define a run method if you're a rabbit then you can run so let's print this rabbit is running and i'm just going to fix some of the spacing here all right if you're a fish then you can swim def swim let's print this fish is swimming and lastly we have hawk if you're a hawk then you can fly def fly let's print this hawk is flying like i said before not only do these specific types of animals have access to all of the attributes and methods that they inherit from their parents but they can have their own attributes and methods as well so let's test some of these methods so we have our rabbit fish and hawk objects let's have rabbit use its run method fish we'll use its swim method and hawk will use its fly method and here we go this rabbit is running this fish is swimming and this hawk is flying so in conclusion classes can have children the children classes will inherit everything that their parent class has all of the parents attributes and methods but not only that the children classes can implement their own unique attributes and methods as well so that is inheritance if you would like a copy of this code i will post all of this in the comment section down below but yeah that's the basics of inheritance using python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro [Music] so you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Virtual Environments: venv and Conda",
        "Video Title":"Python Virtual Environments - Full Tutorial for Beginners",
        "URL":"https:\/\/www.youtube.com\/watch?v=Y21OR1OPC9A",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Y21OR1OPC9A\/hqdefault.jpg",
        "ID":"Y21OR1OPC9A",
        "Publish Time":"2024-03-16T14:47:21Z",
        "Channel":"Tech With Tim",
        "Channel ID":"UC4JX40jDee_tINbkjycV4Sg",
        "Transcript":"what is a virtual environment well this is simply a self-contained location that enables you to maintain separate and isolated environments for your python projects this isolation lets you manage dependencies versions and packages without conflicts across different projects when you work on multiple python projects it's likely that some of them depend on different versions of external libraries or even python itself without virtual environments if you were to install every dependency globally you might run into issues where one project needs a different version of a library than another project this can lead to compatibility issues virtual environments solve this issue by allowing each project to have its own set of installed packages independent of what's installed globally or in other environments so now let's look at how you create virtual environments so to begin we need to open up a terminal or a command prompt if you're on Mac or Linux open up your terminal if you're on windows open up command prompt or a Powershell instance from here we're going to navigate into the directory where we want to create a new version virtual environment it's worth noting that virtual environments are simply directories on your system so you want to put them in a place that's logical like the location of a python project that requires this environment in my case you can see that I am in the example directory which is on my desktop so simply go to a directory where you want to create your virtual environment from here we're going to create a new environment using the built-in venv command or V EnV now it's worth noting that there are other tools that can do this like cond virtual EnV pip en V and poetry but VV is built into Python and it's the most common one now the commands for creating and activating the virtual environment are slightly different for Mac or Windows but I'll run through both sets so if you're on Windows you're going to use this command which is python hyphen M venv and then EnV now the EnV part here at the end is the name of the environment you can name this anything that you like but it's convention to name it EnV now if you're on Mac or Linux you'll simply change the command to be Python 3 so my case I'm on Mac so I'm going to run python 3-m VV EnV now at this point it will create a new directory for us so if we type LS you'll see that we have the environment EnV in this directory now what we need to do is activate the virtual environment and to do that again the command will be slightly different depending if you're on Mac or Windows if you're on Windows you're going to run the following command now the command is this the name of your environment which in this case is EnV SL scripts activate. bat now for some reason that doesn't work you can try just SL activate so remove that bat extension now if you are on Mac or Linux the command is a little bit different this is going to be Source EnV SL bin and then slash activate like that and once you've activated the environment you should see that you get a prefix with the name of the environment appearing before the normal line in your terminal so whether you're on Mac windows or Linux you'll know this is working once you see the parenthesized version of your environment name before your main terminal line now that we're here I'll show you how we deactivate the environment so to go back into our Global python installation to do that you simply type deactivate the command will be the same whether you're on Mac windows or Linux then we can reactivate by using the source command again or that activate script that I showed you on windows so now that the environment is created and activated we can go ahead and install some packages into it now to do this we're going to use the PIP command which stands for the preferred installer program or the recursive acronym which is PIP installs packages now if we want to view the packages that are in the current environment we can start by typing pip list now it will show us that we can actually upgrade pip if we like to we don't need to do that right now but we can see that we just have two packages pip and setup tools the reason we don't see any other ones is because we're in the virtual environment now not in our Global version of python if we were to deactivate this and run the command again we'd see any packages in our global environment but here we're in the virtual one now that we've done that we can install a package so one some of us have probably used before is the request package so let's go pip install request when we do that it should install everything and if we type pip list you'll see now that we get all of the dependencies for requests as well as the request package itself you'll notice now if I deactivate the environment and I type pip list it's actually needs to be pip 3 here I'll get a huge long list of a bunch of other packages that are installed globally whereas if I go back into the environment here and I type pip list we just see the ones that are part of this environment so now this point let's imagine we've done some intense python development and we're ready to push this to GitHub or share our project with someone else now in order for them to run this code they'll likely need the same requirements as us now rather than exporting our entire environment we can simply save a list of all of the dependencies we used into a requirements.txt file now to do that we're going to use the following command which is PIP freeze we're then going to use the greater than sign and then we're going to type requirements.txt if I spell that correctly and what this will do is take the output of pip freeze which gives us all of the different packages and their version and save it in this file so when I do that and I type LS you'll see that now we get a requirements.txt file and if we have a look at requirements.txt it has the output of pip list that we looked at before now let's get out of this here and let's see how we could use the requirements.txt file to actually install these various packages so let's imagine we're someone else we've now got access to this code we want to start working in it and we have requirements.txt file well first we'll make sure that we're out of this environment and we'll probably end up creating a new one so we'll start again and we'll type the commands so in this case Python 3 hyphen M venv we'll just call this mycore EnV we'll create a new environment we will then activate it so this will be source and then my EnV \/bin SL activate again on Windows this going to be a different command for Activation now we're inside of this environment this is a new environment and you'll notice that now we have EnV my EnV and requirements.txt if I pip list inside of here you'll see that we don't have those requirements so the request module that we need but we can install them using this requirements.txt file to do that we very simply just type pip install dasr and then requirements.txt the DHR stands for install from a file so we specify the file name which is requirements.txt and now what pip will do read this file find all of the requirements and install it in this environment so when I hit enter here it's going to go ahead and install that and now if we type pip list you'll see that we get a list of all of the different packages that were from our requirements.txt file so this is very common practice you'll actually download a python project you'll see a requirements.txt file what's expected from that point forward is you're going to create a new virtual environment you're going to activate it you're then going to install all of the different packages using the requirements.txt file again that command was pip install hyphen R requirements.txt now at this point you've learned how to create an environment activate it install individual packages install packages from a file and save your packages or dependencies into a requirements.txt file you pretty much know everything you need to about virtual environments but I'll share with you a few last helpful tips that you'll probably want to know so first of all it's common practice to create a virtual environment folder inside of the directory where your python files exist so for example maybe I'll make a new directory called project and this is where I'm going to have all of my code so I'll CD into project and maybe I have a python file so I can say maybe just touch main.py now what I would do is create my virtual environment inside of this directory so it's alongside my python files and all of my source code now it's common practice that we call this EnV or VV you can call it whatever you want but but typically this is what it will be named now once we create that and activate the environment we want to make sure we don't save any of our source code inside of that directory so I'm not going to do it right now but let's say that we have this ven V folder right so we have main up high and ven V where our virtual environment is we're not going to put any of our custom python code inside of here it's just going to sit inside of the main directory this folder is only used for storing the things related to our virtual environment that's about it if you're finished with the virtual environment and for some reason you need it anymore you can simply delete this folder and that's all you have to do so if you're on Mac you can type something like rm- RV EnV that's going to delete the directory you also can just simply find it and delete it so right click it move it to trash whatever you want now that's it that's all I have for you if you enjoy my teaching style and you want to become a developer then consider checking out my software development course from the link in the description leave a like on this video subscribe to the channel and I will see you in the next one oh"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Virtual Environments: venv and Conda",
        "Video Title":"How to choose an environment virtualization method \u2013 Venv vs. Conda | CompatibL",
        "URL":"https:\/\/www.youtube.com\/watch?v=q9iFnMEEkwQ",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/q9iFnMEEkwQ\/hqdefault.jpg",
        "ID":"q9iFnMEEkwQ",
        "Publish Time":"2023-04-06T13:47:02Z",
        "Channel":"CompatibL",
        "Channel ID":"UCnKUBpryb96Jj-ymOpsEeEA",
        "Transcript":"foreign work on multiple python projects at the same time right an issue of this project will require a set of third-party python packages to achieve a stable in the producible regression test results the project will require specific versions of these packages right and before upgrading a third-party package this new version must be tested to confirm all regression test pass so you need the virtualized python environment which is a Sandbox right so third-party packages installed into that sandbox do not affect uh actually this is a typo here do not affect other sandboxes popular options for virtualized python environments right so if you go to uh to pyram it will tell you you can do the end you can do panda and you can do a bunch of others so Vienna is a lightweight environment manager of python requires a separate package manager which is actually built into python it is recommended when you only need to virtualize python right so this is sort of like uh I don't know containers for Linux where it's a very lightweight piece of code that it just provides packages as an extension on top of the standard python installation on your machine right and quanda which is the second option is both package in environment manager right so now it's uh with VM there is a separate tool in a separate environment manager actually has its own version of both and only in my opinion right even though you know sometimes people like Wonder also sometimes for example there are a lot of organizations in which you only have conda or only have uh VM threads you don't have a choice but if you do have a choice um conda is great because it's not specific to python right so for example if you write C plus plus yes yes uh you know many many Engineers who work on math uh on finance uh you have to write C plus plus code that you invoke from Python and if you need to version not only python libraries but also C plus plus libraries Gonda is better because you do it all together and you don't have to use a Conan so there's something called Conan which you can work in parallel with VM right but Honda has both of them in the same package and your virtualized environment for both of them is based on a specific version of python and we recommend to stay one version behind the latest stable release for example right now the stable release later stabilities is 310 I'm using three nine because there are a lot of third-party libraries that take time to upgrade and certify the latest python version for example machine learning libraries math libraries you know there's some answers change a little bit they want to verify why so my recommendation is to always stay one version behind the latest stable release"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Virtual Environments: venv and Conda",
        "Video Title":"Python Virtual environments ! Why ? And how? conda? pip?....Explained clearly",
        "URL":"https:\/\/www.youtube.com\/watch?v=zzY0iWWvuRk",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/zzY0iWWvuRk\/hqdefault.jpg",
        "ID":"zzY0iWWvuRk",
        "Publish Time":"2023-12-17T07:01:16Z",
        "Channel":"Biomedical AI Basics",
        "Channel ID":"UCwEJkf9kUh7z9KN1uf93hgQ",
        "Transcript":"so what is a virtual environment in python in the real life when we have to do cooking we like to have a room called kitchen where we have a stu a pan clothes for washing hands and a lighter similarly when we want to take a shower we need a room called washroom where we may have towel and shampoo similarly when we want to sleep we want a room which has a bed and a blanket we are keeping three different rooms so that the items don't get mixed with each other similarly when we are creating projects in Python we don't want different versions of libraries to interact and break the code so that's why we create virtual environments where all the libraries are compatible with each other but to maintain these rooms or virtual environments and their tools or the libraries we need to understand VNV K and pip VNV and K are environment creators whereas K and pip they are package managers so in the example of a washroom the environment creator creates the washroom whereas the package manager puts the towel and shampoo inside the washroom and as you might have noticed K can perform as an environment Creator and as a package manager so how do we get these tools working on our computer so to get K on your computer we have two options we can install either anaconda or miniconda both these tools contain cond and some other libraries so you can install any of them and you will get cond working on your computer and if you have python installed on your computer V andv and pip come pre-built in Python so your computer can use them directly so now we know that to create a virtual environment we need a environment Creator and a package manager so what are the options that we have so we have these many options to use however K as an environment Creator and pip as a package manager is used very often because it has certain advantages you might think why not use K for both environment Creator and package manager however K has certain limitations as a package manager hence pip is preferred as a package manager so let us see how we can create three virtual environments named kitchen washroom and bedroom we will use cond which we can get from anaconda or miniconda as we discussed so I will fire up my miniconda prompt and and miniconda prompt comes with a base virtual environment and that is why we see the word base at the starting now I will create environments in a test folder on the desktop so I will change the directory to this test folder and then I will type cond create name whose name is kitchen and then press enter it will ask you yes or no to proceed you we'll write yes and then press enter and the kitchen environment has been created now similarly we will create the washroom environment so we'll write cond create-- name which is the washroom and then press enter then we repeat the same process for a virtual environment named bedroom now we can check which all virtual environments has been created by cont and we can do that by typing cond MV list so as you can see we have four virtual environments first being the base and the other three that we created just now that is bedroom kitchen and washroom and the star in front of Base means that this is the active environment that we are in presently so as you can see it's very easy to create an environment now if we want to move from our base environment to another environment we just write cond activate and then the name of the environment so now the word basee has changed to kitchen because the environment has changed to close this environment we'll write cond deactivate and then the cond will return to its base environment now suppose we want to enter the bedroom environment and write some code over there so we activate the bedroom environment and then write Jupiter notebook but this gives an error because in the bedroom environment there is nothing known as Jupiter which is installed so now we need to install packages and just like we discussed first we have options of using either K or pip as a package manager so let's see how we can install using K so we'll type cond install - c space cond Forge cond Forge is the repository and space notebook so notebook for jupyter Notebook and then we press enter this process will run for a few minutes and download all the files and after that the Jupiter Library will be installed in this environment so everything is done we again type Jupiter notebook inside the bedroom environment and wait for the execution and now we can see that Jupiter notebook has been launched without any error so that means that jupyter notebook has been installed in the bedroom environment now we close this and press contrl C which stops the Jupiter notebook now let us see whether installing jupyter notebook in the bedroom environment gives us a jupyter notebook in the other environment so we close this environment using cond deactivate and then activate the kitchen environment and run Jupiter notebook so as we can see there is no jupyter notebook in the kitchen environment because we did not install it so over here we'll use the other package manager that is pip or pip and then we'll type pip install Jupiter and then again it will download all the packages be sure to be connected to the internet and after a few minutes the Jupiter notebook will be installed in the kitchen environment also now if we again type Jupiter notebook we see that the notebook is launched so I hope this answered a few questions about virtual environments if you have any doubts please post them in the comments below"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Python Virtual Environments: venv and Conda",
        "Video Title":"The Complete Guide to Python Virtual Environments!",
        "URL":"https:\/\/www.youtube.com\/watch?v=KxvKCSwlUv8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/KxvKCSwlUv8\/hqdefault.jpg",
        "ID":"KxvKCSwlUv8",
        "Publish Time":"2021-04-13T14:32:23Z",
        "Channel":"teclado",
        "Channel ID":"UCINg1S61mpN7dZW8vR2ikCw",
        "Transcript":"[Music] most python projects we develop will have dependencies that's code written by other people that we can install and use so that we don't have to rewrite it ourselves for example the requests library is a super popular third party library that we can install to make http requests the flask library is another one that we use to create web applications and there are thousands upon thousands of libraries to do all kinds of things written by tens or hundreds of thousands of people so we install and use them so that we don't have to rewrite it because that would take a really really long time the libraries change over time as new and better ways to do things are discovered and implemented as such when we install a library for one of our projects it'll be a specific version and months or years down the line if we try to install it again it may well be a different version with different functionality therefore it's possible that when we update a library our code will no longer work because the way that we should use the library has changed virtual environments exists so that we can separate the dependencies of one project from the dependencies of another that way they can have different versions of the same library and that often happens when we start projects at different times but what actually is a virtual environment well there are two key parts to a virtual environment the first one is the python version every virtual environment has a python version that it runs on for example python 3.9 every virtual environment also has a folder of third-party libraries that you've installed in that virtual environment so every virtual environment we create can be created with a different python version and it can't be changed after the fact that lets us work on projects that use different python versions very easily just by switching between virtual environments similarly because every virtual environment has its own folder of third-party libraries they can have different libraries or the same libraries in the same or different versions to really understand how virtual environments work it will be helpful to look at how python imports work i've created a project here in vs code doesn't matter where you created just create an empty project in your editor of choice and i'm going to create a python file called app.pui in here we're going to do import cis and notice how vs code says that no python interpreter is selected that means that we haven't told vscode which python we're going to use when we create a virtual environment which we will do in a moment we'll tell vs code to use that virtual environment but for now we're just going to make it go away so import says and then we're going to print sees path so this is going to print out the import paths or where python will look when we try to import things so if we wanted to import the requests library then python would look for the requests library inside sees.path so now i'm going to save this we're going to go over to our console i'm using cmd.exe although vs code has a console integrated to the editor that you can use if you're comfortable with that but i'm going to use the command prompt so i've opened my command prompt here and now we're going to go into this project and the way we change directories with the command prompt is we do ch there and then we go to the desktop now you can see that my path has changed i'm now in my desktop and then we can ch there into the virtual lens project and now i'm in here if i do dar then you can see that app.py is there i know that this looks all a little bit complicated but that's essentially what's happening there so how do we run this file we do python app.py and that is going to run this code using the python program and it's going to do whatever the code does and you can see this is what sys.path contains the first path is the current folder that i'm in so that's the virtualmin project folder and then there's a few other import paths and you can see that most of those are to do with python 2.7 so if we try to import the requests library python is going to look for the request library inside this folder and obviously it's not there because there's only this file in there so then it'll move on to this other folder then it'll move on to this one and so forth and whenever it finds it it will import it and use it and it will stop searching in the future folders if it isn't found in any of these folders then python will raise an import error with a message telling you that the thing you're trying to import doesn't exist so this is going to be relevant in a moment but first let's take a look at how we can create a new virtual environment for this project so if you haven't created a virtual environment before and you're not following along do so open up a command prompt open up your editor and create a virtual environment with me so we're in the project folder and what we're going to do is we're going to ask python to create a virtual environment the way we do that is we need to use python 3.3 or later so you can see here this is all python 2.7 stuff so what i need to do is i need to grab my path to my python 3.8 installation you can see it's in my app data programs python python38 python.exe so this is my python program that runs python 3.8 and then we're going to do dash m vm and then we're going to put in our virtual environment name this is going to be a folder that gets created and inside that folder we're going to put our virtual environment so you can call it whatever you want it can be vm name or it can be vn it can be dot vm that's a pretty popular name as well i'm going to call it vm name just to show you that this is what the folder ends up being called so when we do that notice that vs code immediately notices that a new virtual environment has been created that's all well and good in our vs code folder there you can see vm name is a folder that's been created which is fantastic so inside there we now can see that there's a few things there is a library there with a bunch of things that the virtual environment comes with there's a scripts folder that has python.exe inside it and it's got pip.exe inside it as well so we can run python 3.8 just by running this python.exe program notice that if i type python-v to get the python version that i'm currently running that gives me python 2.7.16 so even though we've created a virtual environment with python 3.8 the python version this console things we want to use is 2.7 so that's not right so we've got our virtual environment created but how do we use it the first thing we have to do in order to tell the console that we want to use the virtual environment is we have to activate it and when we activate it some configuration changes happen in the console when we deactivate it afterwards the configuration changes are reverted also the changes to that configuration are only applied in the console on which we activate the virtual environment if you open a separate console it won't have those changes so what changes am i talking about well let me first print out a special variable in the console called path so in windows i need to echo and then in between percent symbols i put path then on mac and linux there's a slightly different way to print this out but i'm going to echo path you can see there's a lot of stuff that gets printed out here which is going to be a little bit confusing but this is where the console will look for programs to run when you type a program name in there so python is a program name and the console doesn't inherently know what that is so when you type python the console is going to go through each one of these paths looking for python.exe so the first path is in this program files x86 blah blah blah compiler and then you can see a semicolon so that tells us that we're moving on to the next path so this is the first path there then this is here the second path and then we've got the third path etc when the console finds python.exe in any of these paths again just like what we had here with the python imports then it's going to run it and it's going to stop searching so why are we running python 2.7 because the first python.exe that console is finding in this set of paths is python 2.7 and you can see that down here see if i can spot it and there's a python37 there so clearly python27 will be earlier on okay so here it is took me a while to find it it's in c python27 scripts so this is the first python exe that the console is finding so you you may spot python32 scripts there in front but this folder actually doesn't exist so i should probably delete it from my path and you can also see 3732 script that folder also doesn't exist so it's actually python27 scripts that gets found first that's where python exe lives there are other python 38 and 37 folders down here and those actually do exist but because they're after the python27 then it is python27 that gets found so let's activate the virtual environment and see those configuration changes i talked about you can activate the virtual environment using the source command so source vm name bin activate on mac or linux if you're using windows with wsl or git bash it's the same thing but with scripts instead of bin and if you're using cmd.exe or powershell then you do um vm name slash scripts slash activate.bat so that's what we're going to do here and you can see that i get this bracket vm name in front that is just the way of the control telling me that i've got this activated and now if i do echo path you'll see that the very first path is to my virtual and project vm name script so therefore python exe which is inside the scripts folder is going to be found first and indeed now if i do python-v you can see that we get python 3.8.2 because that is a python version that we used when we created the virtual environment so that's the version of python the virtual environment uses if you run the vm command that we ran earlier to create the virtual environment using a different python version then this would be something else but it's important to note that this python 3.8 is not exactly the same executable as the python 3.8 that we used earlier it is a copy a new python binary that gets created and put in here so it's not exactly the same one it's just the same version also now we can run pip and the pip that is going to run is this pip.exe we could run pip 3.8 and that would be this pip 3.8 exe pip3.exe etc you can see that these three here are the same these all refer to the same executable and similarly python exe is its own separate thing when we install a library using pip the library will end up installed inside the virtual environment so let me do pip install flask for example and that is going to go ahead and install the flask library and you'll see that we've got flash.exe that's landed up now on our scripts folder that's because flask has been installed in the virtual environment but not outside the virtual environment whenever we import flask now from our code as long as we've got the virtual environment activated and we use this python version here this code will be able to import the flask library alright so what do we do now with this virtual environment well often we'll create a virtual environment for every python project we create and we do that when those projects have dependencies which is basically 99 of the time we should keep track of the dependencies that a project has so that if we share that project with someone else they can install those same dependencies also if we have to come back later on down the line and reinstall the dependencies for some reason we'll know what we need to install to run the project we do that with a requirements.txt file this is the name of the file that we usually use it doesn't have to be called this though and in here we'll put the different dependencies of our project for example flask requests g unicorn these are three frequently used dependencies for web applications sometimes if you have dependencies that are only used for development but not to actually run the code for example for testing or deployment you'll create a file called dev dot requirements.dev.tx that's the name that's usually used but again you don't have to call it that when you want to install all the dependencies listed in your requirements.txt file all you have to do is activate the virtual environment and then do pip install r and then requirements.txt and that is the way to give it a file to install so it'll go through and install all the dependencies obviously the dependencies that are already installed won't get reinstalled so now we've installed requests and g unicorn as well in there inside the requirements.txt file we can also put the exact version numbers of the libraries that we used this can be useful because libraries change over time and your code may not work with the latest versions so usually we'll write down the versions that we used when developing the code for example 1.0.0 if that's the version that we used with the double equal sign there that tells the installer that it should use exactly 1.0.0 and not for example 1.0.1 more on that in a second updating the version number of any of your dependencies should be a conscious decision so don't just update to the latest version of every library every time because sometimes we'll need to make changes to the code in order for it to work with a new version of the library it's also useful to know about semantic versioning because that's what we use for python libraries so in library versioning the major version is the first number so these two would have the same major version but they are on different minor versions and patch versions oftentimes we want to install the latest version of a library while staying within a major version that way if we install the dependency in the future we'll install the same major version that we were working with in the past but we'll gain any small improvements the library has made in its minor and patch versions usually libraries don't add breaking changes to minor and patch versions that's why this is a common thing to do but do make sure to check every specific library you do this on to make sure that nothing important has changed so to install the latest miner or patch version of a library we can do this you can say flask greater than or equal to 1.0.2 for example but with a comma less than 2.0 and that is going to keep us within these two numbers always giving us the latest version one flask all right that's about everything for this video i hope you've learned a little bit about virtual environments and how they work i'm going to leave a couple of links in the description of this video to some official documentation and some guides that you can read through to learn more also you can use things other than vm to work with virtual environments for example pippen is a very common alternative but i think it's best to keep it simple and use vm so i would recommend sticking to what i've shown you in this video please like and subscribe if you want to see more videos like this and i will catch you on the next one"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Package Management with Pip and Conda",
        "Video Title":"Which Python Package Manager Should You Use?",
        "URL":"https:\/\/www.youtube.com\/watch?v=3J02sec99RM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/3J02sec99RM\/hqdefault.jpg",
        "ID":"3J02sec99RM",
        "Publish Time":"2017-12-21T22:53:02Z",
        "Channel":"Google Cloud Tech",
        "Channel ID":"UCJS9pqu9BzkAMNTmzNMNhvg",
        "Transcript":"YUFENG GUO: Every data scientist has different preferences when it comes to their programming environment-- vim versus emacs, tabs versus spaces, Virtualenv versus Anaconda. Today I want to share with you my environment for working with data and doing machine learning. You most definitely do not need to copy my setup, but perhaps some bits of it can serve as useful inspiration for your development environment. To start with, we need to talk about Pip. Pip is Python's package manager. It has come built into Python for quite a while now, so if you have Python, you likely have Pip already. Pip installs packages like tensorflow and numpy, pandas and Jupyter, and many, many more, along with their dependencies. Many Python resources are delivered in some form of Pip packages. Sometimes you may see a file called requirements.txt in someone's folder of Python scripts. Typically, that file outlines all of the Pip packages that that project uses, so you can easily install everything needed by using pip install -r requirements.txt. As part of this ecosystem, there's a whole world of version numbers and dependencies. I sometimes need to use different versions of a given library for different projects that I'm working on. So I need a way to organize my groups of packages into different isolated environments. There are two popular options currently for taking care of managing your different Pip packages-- virtualenv and anaconda. Virtualenv is a package that allows you to create named virtual environments where you can install Pip packages in an isolated manner. This tool is great if you want to have detailed control over which packages you install for each environment you create. For example, you could create an environment for web development with one set of libraries, and a different environment for data science. This way, you won't need to have unrelated libraries interacting with each other, and it allows you to create environments dedicated to specific purposes. Now, if you're primarily doing data science work, Anaconda is also a great option. Anaconda is created by Continuum Analytics, and it is a Python distribution that comes preinstalled with lots of useful Python libraries for data science. Anaconda is popular because it brings many of the tools used in data science and machine learning with just one install, so it's great for having a short and simple setup. Like Virtualenv, Anaconda also uses the concept of creating environments so as to isolate different libraries and versions. Anaconda also introduces its own package manager called conda from where you can install libraries. Additionally, Anaconda still has the useful interaction with Pip that allows you to install any additional libraries which are not available in the Anaconda package manager. So-- which one do I use, virtualenv or anaconda? Well, I often find myself testing out new versions of tensorflow and other libraries across both Python 2 and Python 3. So ideally, I would like to be able to try out different libraries on both virtualenv and anaconda, but sometimes those two package managers don't necessarily play nicely with each other on one system. So I have opted to use both, but I manage the whole thing using a library called pyenv. Conceptually, pyenv sits atop both virtualenv and Anaconda and it can be used to control not only which virtualenv environment or Anaconda environment is in use, but it also easily controls whether I'm running Python 2 or Python 3. One final aspect of pyenv that I enjoy is the ability to set a default environment for a given directory. This causes that desired environment to be automatically activated when I enter a directory. I find this to be way easier than trying to remember which environment I want to use every time I work on a project. So which package manager do you use? It really comes down to your workflow and preferences. If you typically just use the core data science tools and are not concerned with having some extra libraries installed that you don't use, Anaconda can be a great choice, since it leads to a simpler workflow for your needs and preferences. But if you are someone who loves to customize your environment and make it exactly like how you want it, then perhaps something like virtualenv or even pyenv maybe more to your liking. There's no one right way to manage Python libraries, and there's certainly more out there than the options that I just presented. As different tools come and go, it's important to remember that everyone has different needs and preferences. So choose for yourself-- what tools out there serve you best? So what does your Python moment look like, and how do you keep it from getting out of control? Share your setup in the comments below. Thanks for watching this episode of Cloud AI Adventures. Be sure to subscribe to the channel to catch future episodes as they come out."
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Package Management with Pip and Conda",
        "Video Title":"Everything about PIP python package manager",
        "URL":"https:\/\/www.youtube.com\/watch?v=XPfB_Xr2QFU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/XPfB_Xr2QFU\/hqdefault.jpg",
        "ID":"XPfB_Xr2QFU",
        "Publish Time":"2020-12-15T08:30:02Z",
        "Channel":"The Data Guy",
        "Channel ID":"UCX93oEN0tza6KfuAWfI61vQ",
        "Transcript":"[Music] hi there i'm manoj and welcome back in this video we'll talk about famous python package management system pip so there are many other package management systems like conda and easy install but i personally use pip and conda although we'll talk about conda in the upcoming videos in this video we'll focus on pip so what is pip pip stands for preferred installer program pip securely downloads and installs python modules and dependencies onto your computer from this website the python software foundation pip searches for published python packages on pi pi or also known as python package index which is a sort of a free app store for python modules so now as we know what is pip let us now look into some most used pip commands so the first command is pip help this command shows you all the possible commands you can use with pip and their users like install to install packages and uninstall to uninstall packages and many other commands and i'm going to explain all these commands in this video so if you want to get help for a specific command you can use pip help and you can add that specific command you want to know about and it will give you the explanation about that command as i have typed install so it's giving me all the explanation that i need to know before using install command so the next command is pip search so what pip search does is it searches the database for the package you need and provides you the information about that package like if i want to know about pandas so it gives me all the packages and the informations related to pandas so these are the packages and dependencies of pandas so if i want to know about any other package i can just use this command with the name of that package suppose if i want to know about pi email i will get a description of what that package is used for like python library to send emails using smtp library so that's the use of pip search command so the next is a command which we use in our day-to-day lives called pip install there are many versions of pip install like if you use people installed directly with any package name suppose if i want to install pandas i can just execute it and pandas will be installed so now as we have successfully installed pandas we can use the pip list command to check for all the existing libraries in our current environment so if i execute this command it will give me a list of packages that are currently in my environment so i've just installed pandas and numpy and other python modules have been installed because they all are dependencies of pandas module so another way of using pip install command is along with the specific python version suppose that you are working with multiple python versions on the same system and you want to install a package specifically for a particular version of python so in that case this command can be handy for example i'm using python 3.9 and python 3.8 on my system and i want to install a package only for my python 3.9 so what i can do is py space hyphen 3.9 space hyphen m tip install django so what this does is it installs django only to my python 3.9 so let us now check the pip list for my python 3.9 so the command is similar python space iphone 3.9 and iphone m pip list so this will show you django in here so this installation of django won't affect my python 3.8 similar to install command we can also uninstall packages using uninstall command suppose if i want to uninstall numpy i can just execute this command and numpy will be uninstalled and it will ask you for your permissions to uninstall and and it will be uninstalled so now if i check my list numpy will be missing so number is missing you can also check for the outdated packages from your existing list of packages you can just execute this command tip list and hyphen iphone outdated so this will list all the packages that are outdated like setup tools which is 47.1.0 but the latest version is 51 and pip is also the older version so you can get all the outdated packages using this command or else you can also use single hyphen o for the same purpose [Music] so now we know that setup tools should be updated so how can we update setup tools there is one simple command to update python packages that is pip install iphone uppercase u and the name of the package setup tools so what this does is it just update the package so setup tools is now updated you can also update all the older modules using one single command this is a quite big command so i'll leave this in the description so it'll be easy for you guys to copy paste it in the terminal and update all the older versions of modules in one click so you might be using a particular set of packages for your current project and you want to use the same packages that you're using now for your next project so how can you do that you can just use the pip freeze command which will give you the names of all the current existing packages and their version numbers and you can transfer them into a text file like this pip freeze and i'm going to create a requirements.txt file or keep it short and a text file is created so whenever you create your new virtual environment for your next project you can install all the required packages in one single click so how do we use this requirements.txt file so let me show you one thing i'll just uninstall pandas [Music] and i'll reinstall all the modules we've copied into this environment again so how can we do this just pip install iphone r and the name of the file which is req dot txt so what this does is it installs all the packages mentioned in that text file so some of the packages are already there in our environment so the packages pandas and numpy will get newly installed again so we have successfully installed all the packages using requirements.txt file you can do the same for uninstalling too you can just add this uninstall command and if you execute this command it'll just uninstall all the packages that are mentioned in the text file [Music] you just need to give permissions to delete each and every package so all the packages are deleted so let us now check the pip list so it'll be mostly empty because we have deleted most of the modules which are present in the text file because numpy is not mentioned in the text file it isn't deleted yet so the next command is pip show what this command does is you can just provide the package name that you want to view the details for and it will show you the details of the package the version number the other the license etc and the next command is click check this check command will provide you the information about all the packages which are missing dependencies so if we pick check no broken requirements found which means that all the packages we currently have are satisfying the required dependencies so that's it if you enjoyed this video please make sure to like and subscribe the channel and i'll meet you in the next one you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Package Management with Pip and Conda",
        "Video Title":"Install Python Packages with pip and conda",
        "URL":"https:\/\/www.youtube.com\/watch?v=Z_Kxg-EYvxM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Z_Kxg-EYvxM\/hqdefault.jpg",
        "ID":"Z_Kxg-EYvxM",
        "Publish Time":"2016-10-17T23:42:35Z",
        "Channel":"APMonitor.com",
        "Channel ID":"UC2GuY-AxnNxIJFAVfEW0QFA",
        "Transcript":"this is a brief tutorial on how to install and manage packages in Python we can do that with pip or we can do that with Conda Conda works with anaconda and pip works with the Python org or it also works with anaconda as well so I'm going to show some of the commands first one is going to be searched or list where you search packages that are available or lists packages that are on your own computer or your own distribution so what I'm going to do first of all is just do pip the list these are all the packages that I have installed right now if I do pip search and then I'm just going to search for pi serial I found a couple I'll go ahead and do pot pip install and PI serial if you already know the name you can always just install it directly the other one that you can use is anaconda and you just replace Pip with anaconda they're they're very similar or the Conda okay and that's going to go out and it's going to fetch some of metadata and then ask you if you want to install it and I'll select yes okay so it's going to go ahead and install it for us okay the other one that we can do is also update a package so here there's a little bit of difference between anaconda and pip so pip is going to be pip up to install PI serial and then upgrade okay and then in anaconda its Conda update and that'll update that package you can also use this to update you know Python itself okay if you want to or next distribution if you're on the two series you'll just update it to the latest 2.7 version if you're on the three point you know three plus it'll upgrade you to the latest in the in the Python 3 series as well another way to do this you know if you're in a script you want to give a script to somebody and you don't know if they have the package installed or not is you can just put something at the top of the script that will install it if they don't have it on this on theirs so if you just open up I'm going to open up a Jupiter notebook right now using ipython and what I'll do is just use the PIP package that comes with okay that comes standard in these distributions and you can do import pip and then use pip main and then in square brackets type install and then the package name so for example PI serial okay and then it's going to run this it's going to use pip within your script so let's say you don't know if they have PI serial or not you can always do try and import PI serial and then accept if there's an error there then you can import pip install it and then import it okay so that's one way to just catch some of those packages that might not be there for a Python script so just to review let's go back through these commands we have pip and Conda they're very similar except for this you know the update or upgrade command here and one other thing to watch out for is that you're using the right version of pip so that if you have multiple distributions on your computer so this is I'm going to go to my C Drive anaconda and then here in the scripts folder right here is going to be where Conda is EXE is located and you know if it also has a version of PIP as well then like here then you have to update your environment variables to tell it which one to use and likewise if you have let's say a Python 2\/7 this one's from python.org and then I come in to scripts there's also a pip executable here so sometimes what you can do is just use the pip 2.7 ghz to make sure you're using you're updating your Python 2 7 packages ok another way to do that is just come into the ok environment just search for environment variables and then this will open up something that allows you to get in to edit the path ok so you can see I do have anaconda and I do have you know the 3 5 and then a python 2 7 so that's where it will go by default to look for that pip package"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Python Programming",
        "Topic":"Package Management with Pip and Conda",
        "Video Title":"Understanding the *Difference Between Pip and Conda* for Python Package Management",
        "URL":"https:\/\/www.youtube.com\/watch?v=_QQHW9GSb84",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/_QQHW9GSb84\/hqdefault.jpg",
        "ID":"_QQHW9GSb84",
        "Publish Time":"2024-08-27T14:10:00Z",
        "Channel":"blogize",
        "Channel ID":"UCRVREQ2WrFSv7raspQTTzyg",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"NumPy Library",
        "Video Title":"Learn NUMPY in 5 minutes - BEST Python Library!",
        "URL":"https:\/\/www.youtube.com\/watch?v=xECXZ3tyONo",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/xECXZ3tyONo\/hqdefault.jpg",
        "ID":"xECXZ3tyONo",
        "Publish Time":"2019-01-17T22:10:47Z",
        "Channel":"Python Programmer",
        "Channel ID":"UC68KSmHePPePCjW4v57VPQg",
        "Transcript":"hi guys Giles here and today I want to do a tutorial and I wanted to do a tutorial about numpy if you want to do data science on machine learning you're gonna need to know numpy numerical python it's one of the most useful libraries in python especially if you're crunching numbers why is it so good because it's fast you can crunch numbers much much faster than say using a Python list or Python loops and it's got so many built-in functions we're gonna do numpy in five minutes let's get five minutes on the screen come over here let's look at the computer and let's get started we will be doing this tutorial in jupiter notebooks I would highly recommend Jupiter notebooks if you don't have it installed and you want to know how to do that I've made a video about that but otherwise let's just get on with it we're going to be doing Python 3 and to begin with we need to import numpy as MP I mean actually to begin with we need to install numpy if you haven't done that you can do that using a pip install and it comes with anaconda anyway which I would definitely recommend so we important numpy as NP it is always imported as NP and to begin with I'm gonna show you how to create numpy arrays and numpy arrays are really important so there are several ways and we're gonna look at a few of them the first way is using this MP zeros you can do that and you will end up with something like this so it creates an umpire array populated with zeros those zeros are actually floats so if we have a look at well first of all if we have a look at the type of what we get here we get a numpy array and if we have a look at the type of the integer or the rather the number inside the array we see that it is a float so just bear that in mind when you when you create an umpire array this way you get floats inside the array we need to do this faster so we can create different sizes of arrays and this is an example of creating a slightly bigger array populated with zeros we can look at the shape of that array but we might want to change that shape if we do we can change that shape to ten by one which may well be a more useful shape and that's something to remember when you're using numpy arrays you might need to change the shape in fact you often need to change the shape you can also create an umpire a populated with ones and you can see that we've got floats there as well and just to prove that if we look at the type of Z in there of the numbers inside the array we can see that we get a float a slightly less common way of creating an array is this NP dot empty and this creates an empty array for us to fill then there's the linspace way of creating an array and what that does it creates a range with a starting point and end point and then the number of elements that you want this is very good a lot of the time if you're making plots or you want to create an x-axis for a graph I mean there are lots of other uses as well but that's just one example that I think you might encounter and here we've now created an array as you can see it's got five elements which is what we've specified it starts at two and goes up to ten and again these numbers inside this array are floats and that's just something to bear in mind I'm taking too long and the final way I'm gonna show you of creating an array in numpy is this MP dot array and that will create one where you put a list inside these brackets in fact you can also put the name of a list inside these brackets and that will also create an array and just to check that we have a numpy array we look at the type they're at it's a numpy array here is a two dimensional array created from a two dimensional Python list and you can see how that works there we can look at the shape of this array and I want to show you a couple of tips on Jupiter notebooks if you're looking for a particular function that you can apply to this array if you type the name of the array and then a dot and then the tab key all of the available functions will come up for you another useful thing is in Jupiter notebooks if you type question mark and then the name of the array you will get the docstring about you know what it is that you've got here this is a numpy array we'll give you the attributes and the parameters that you can apply to it and that is really useful you can also narrow this down so for example if you were to do question mark Z dot and then shape you just get the bit that was relevant to the parameter shape so just bear that in mind that's quite useful faster now you can create random arrays using the random dot Rand int method in numpy and we've preceded it here so if I were to do that with this I would get a random array and I just want to show you how you can access elements of an array you've seen this one before z1 is the name of the array and then in square brackets 0 this will give us the first element of the array which is 5 we can get a range by doing 0 : 2 and that gives us an array of that range there and if we want to get the last element at the array we can use minus 1 and all that's really similar to Python lists so if you're familiar with Python lists this won't seem too odd we're getting there we're getting there The Times ticking I know that it's not going to be 5 minutes all right it's not going to be 5 minutes it's gonna be longer what I want to do now is use a photo to show you other ways that you can slice up a numpy array because I think that visual element is really helpful I've got this photo of York Minster and I am just reading that in now as an umpire array and just to show you here type of photo is a numpy array let's find out a little bit more about that photo what's its shape well it's 324 rose by 574 columns and then it's a color image so we've got three channels of RGB let's now have a look at this photo and there you can see it so let's do some slicing on this photo just to see how this works so so start stop step the step is minus one so we're going backwards so we've reversed the rows in this image what will this give us comma colon colon - one let's have a look well we've got all of the rows and we have reversed the columns so we've got a mirror image because the columns are in the reverse order what else can we do well we can just take a section of this photos if we take the rows from 50 to 150 and the columns from 152 to 80 which is from here to about here we should just cut out this tower and if we do that and have a look we can see that's exactly what we've done numpy though numpy it's numpy you've got to learn numpy just keep learning number I know it's taking longer but it's numpy and if we were to take every other row and every other column we've halved the size of the image if you have a look now this goes to about 300 where it was almost 600 on the x axis and on the y axis it goes up to just over a hundred and sixty whereas before it was over 300 so we've taken every other row and every other column so I hope that gives you some insight into slicing now I want to show you about applying mathematical functions to a numpy array we'll be there soon I promise I promise we'll be there soon and you can do that by applying it to every element of the array by using these numpy methods so we have this photo here we know what that is if we wanted to take the sine of every element that made up the numpy array of this photo we could just do it like this and we've taken the sine of every single number now obviously it's not much use doing that to a photo but if that's your data and you needed to take a sign the sign of every element in your data that's a very quick way of doing you don't have to worry about loops you can just broadcast the whole thing across the numpy array so that's really quick and then there are loads of other things that you can do so you can take the sum of the array or the product that mean the standard deviation the variance the minimum the maximum you can get the arc min and the arc max so let's just have a look at that so the sum of all the elements in photo I is this the product of all the elements is 0 the mean value is this not long to go now and then you'll know numpy and that that'll be a great thing all right it will I promise I promise I really do the standard deviation is this the variance is this figure here the minimum value is 0 the maximum is 255 or we would expect that because this is an image the odd min gives you the index value of the minimum which is that one and the arc max gives you the index value of the maximum so you can do some very quick statistics using numpy arrays and and these methods in numpy so now we're going to create another numpy array this is 1 2 3 4 5 should it be taking this long let's get back to it and there are some interesting things you can do as well you can you can test for where this is lower than 3 and you get an array that is true true false false false and you can do the same with let's say greater than 3 and you get the reverse here you want the array where the array is greater than 3 and you get 4 & 5 so you can apply these masks to numpy arrays which can be really useful when you're handling data you know if you wanted to find all of the if you had a data set of heights for example you wanted to find all of the heights greater than a certain value this would be very easy you could do it in a line of code and you know and again it's much much quicker than using a loop in python so we're gonna do something with this photo now to show you this in action so MP where photo is greater than 100 we are going to replace it with 2 5 5 and where it isn't greater than 100 we're gonna replace it with 0 let's do that and let's have a look at what we get and we get this image here so we've taken a threshold of 100 and we've replaced everything that's over 100 with the value 255 and everything that's under 100 or 100 and under with zero more numpy that's what we need more numpy the time's running down but we need more numpy you know and we could change that threshold if we wanted to and if we look at the output now you know we get a different output other things that are useful to know about numpy is now let's take these two arrays we've got a array and b array we can add those together and if we do we just get each element added together to give us seven nine eleven thirteen and fifteen if we add 30 to this array it will add 30 to each element if we multiply these arrays it will multiply each corresponding element together and give us a new array of those new elements if we multiply one by ten so if we multiply a array by ten each element is multiplied by ten do we have enough numpy yet are you numpy it out have you had enough of numpy no let's get back to it and then if we use this at symbol here we get 130 and that gives us the dot product of these two arrays so that's a nice way of getting the dot product and I just wanted to show you one other thing as well this dot T which gives us the transpose of an array so what that does is it interchanges rows and columns and just to visualize that a bit better you can see that if we apply it to this photo that's what we get so that is the transpose of an array so in in photo terms it turns a landscape into a portrait and and that's what it does with data as well and I find that a useful way to visualize this and finally you can sort an array again without having to use loops you can use the inbuilt methods here and if you do that we take this array that's unsorted and we can sort it using MP dot sort and then the array name okay I'm sorry that wasn't five minutes I know it was longer but I think that's given you the basics of numpy and you can go off and really practice with it I hope that was useful if it was like the video subscribe to the channel share it as far and wide as you possibly can and I'll see you next time bye bye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"NumPy Library",
        "Video Title":"Python NumPy Tutorial for Beginners",
        "URL":"https:\/\/www.youtube.com\/watch?v=QUT1VHiLmmI",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/QUT1VHiLmmI\/hqdefault.jpg",
        "ID":"QUT1VHiLmmI",
        "Publish Time":"2019-08-07T13:00:04Z",
        "Channel":"freeCodeCamp.org",
        "Channel ID":"UC8butISFwT-Wl7EV0hUK0BQ",
        "Transcript":"how's it going everyone and welcome back to another video today we're going to be going through the numpy library which is considered to be kind of the fundamental package for all scientific computing in python so it's a super super important library uh it's kind of the base for a lot of the other like major data science libraries in python so like pandas that i've done a video on before it builds pretty much like entirely off of the numpy library so it's super important and kind of because it's important it's because it's this like base uh the way we're gonna do this video is i'm gonna start off with kind of a background information on how numpy works and i think really having that intuition is helpful for when you actually start writing code with it so we'll do the background information and then after that we'll jump into all sorts of useful methods and ways you can utilize this library as far as actual code goes as always make sure to smash that subscribe button throw this video a thumbs up uh follow my tweeters tweetergram instagram twitter github too hit the bell for the notifications throw this another thumbs up yeah to begin numpy is a multi-dimensional array library so what that means is you can use numpy to store all sorts of data in one-dimensional arrays two-dimensional arrays three-dimensional race four-dimensional rays etc and so the common question you kind of ask or i'm commonly asked when you know you first bring up numpy is why do you use numpy over lists so the main difference comes from the speed so lists they are very slow meanwhile numpy is very fast and so why are lists slow and numpy fast well one reason is because numpy uses fixed types so what that means is imagine we have this three by four matrix three rows four columns and it's all integer values and we're going to kind of look at how those integer values differ between numpy and lists so let's just zoom in on that 5 that's there in that matrix so our computers they don't c5 they see binary that represents five and so this is the number five in binary and it's eight bits which makes up a byte so our computers read uh information in bytes so when we use numpy this this one bit five is actually by default going to be casted to this int 32 type which consists of four bytes uh and so it represents five in a total memory space of four bytes so in 32 and you also you can even specify so by default it's in 32 but you could even specify that you didn't need all four bytes to represent this value so you could specify within numpy that you wanted maybe an n16 which is 16 bits or two bytes or even if you had really small values into eight which is just a single byte on the other hand with lists there's a lot more information you need to store as an integer so in lists lists use a built-in int type for python and so that built-in in type consists of four different things it consists of the object value which you know has its own bits associated with it object type the reference count how many times that that integer has been specifically like pointed at and the size of that integer value and so if we break this up into the actual binary that it represents we can take the object value and that's represented as a long which is like 8 bytes the object type same deal reference count same deal and then the size i believe is a little bit smaller i think it's only 4 bytes but as you can see that's a single integer within lists using the built-in int type it requires a lot more space than numpy so basically the takeaway from this is that because numpy uses less bytes of memory the computer can read less bites of memory quicker obviously so it's faster in that regard another reason that i didn't specifically say is that when we're iterating through each item in a numpy array we don't have to do type checking each time so in python built-in lists you could have a list of like an integer then a float then a string then a boolean and you'd have to check each element you're looking at what type it is but numpy we don't have to do that so another reason it's faster is that there's no type checking when integrating through objects moving on another reason that numpy is faster than list is because numpy utilizes contiguous memory so what that means is imagine that this kind of array-like structure is our computer's memory so we could store information in any one of these memory blocks so if we had a list the way that that would look in a list's memory is that our list would be kind of scattered around so maybe we have a list that takes up eight memory blocks the thing is that these memory blocks aren't necessarily next to each other so you have some information here you have some information here you have a good amount of information in here then you skip a block here here and skip two blocks you have some information here so it's all kind of scattered around so kind of if you have an eight item array what that looks like is that that array is actually just or that list is just um containing pointers to the actual information that's scattered around our computer's memory and so it's just that all the information is not right next to each other kind of you have to bounce around your computer's memory a bit and it's not super super fast to like rapidly go through and kind of potentially perform functions on all items at a time or subsets of the items a numpy array however uses contiguous memory so all eight blocks in this case would be right next to each other and this has all sorts of advantages um and also just to mention real quick you'd also kind of have to have to store somehow where the start of that memory is and then like the total size and the type of memory block but it's a lot easier than this kind of pointer structure that's up here and so the benefits of numpy using this contiguous memory are a couple of different things so the first benefit is that our cpus our our computers have these cindy vector processing units and so when this memory is all like right next to each other we can utilize this unit and basically what cimd stands for is single instruction multiple data so we can like if we have to do an addition of like a lot of values instead of just doing one addition at a time we can use this cmd vector unit and basically perform computations on all these values at one time so it's quicker in that regard another reason it's quicker is that we more effectively utilize our cache so our kind of our quicker memory in our computer basically if we load in all these values we can keep them close to where we need to access them and like perform all sorts of operations while as in the list case you'd maybe load in like half of this but then this other half because it's scattered around in different places you'd have to like go back and like reload that in uh to your cache like you know just be overall slower because you'd have to do more like longer memory lookups within your computer okay so we kind of went over some of the performance benefits but how are lists different from numpy well lists we can do insertion deletion appending concatenation etc and we can also do those same exact things in numpy i guess the big difference though is that within numpy we can do all that and we can do lots and lots more and we'll see the lot slots more throughout the video but as a simple example imagine we have these two arrays one thing that we can do that's really nice in numpy is that if we try to multiply these one item at a time we could do that in in lists you couldn't multiply one and one three and two uh five and three um etc but when we do the exact same computation within numpy it allows us to do these you know single value like item-wise computations which is pretty neat and pretty useful so that's one example and you'll see a lot more throughout the video uh so applications are known by there's all sorts of applications i think the first one the kind of the first one that comes to my mind is that is a kind of a matlab replacement you can do all sorts of mathematics with numpy i think i should say that i think the scipy library has even more mathematics like functions and whatnot so if numpy isn't cutting it for you try to look through the scipy documentation you might be able to find even more but yeah it's pretty powerful the math that numpy can do it's useful in plotting it is the back end of many different applications so pandas which i've done a video on before it is just like the core component of pandas library it really allows pandas to work um if you've seen my connect 4 how to program that video i use numpy to store the board and then in future videos i'm going to do you can you can actually store images uh through numpy so like png images you can use numpy to store all the information and like do all sorts of cool stuff that i'll uh post future videos on uh let's see also another i think useful reason to know numpy is that it's kind of like pretty important for machine learning applications both directly and then also kind of indirectly because one of the key libraries or key kind of concepts you learn with machine learning is the idea of like tensors and tensors are pretty connected to kind of like the tensor libraries are pretty similar to like the numpy library it's just a way to store all sorts of values so knowing numpy will help you kind of be able to do some stuff with machine learning all right to get started with the code the first thing you're going to do is import the numpy library and just so we're on the same page i'm using a jupiter notebook to use to code this up but you can use whatever editor you prefer also all this code that i'll be going through will be on my github and the link to that will be in the description okay so import numpy as np if that works for you great if it didn't work you'll have to do a pip install so you can go ahead into your terminal and type in pip install numpy and so uh it's already installed for me so and if pip doesn't work for you try pip 3 install numpy that should work so the first thing that's important to know is how to initialize an array so we'll just say that a equals np dot array and then within this we just basically pass in a list so one two three this would be a one dimensional array containing the values one two three as you see uh and you can go ahead you're not using jupyter notebooks and print a okay cool so we could also initialize a little bit more complex arrays so we could do like a 2d array of floats and i could do that the following way we're going to have a list within a list so here's some floating values and then we're going to make this two dimensional so here's some more float values and let's go ahead and print b cool so now that we know how to initialize arrays uh and you can keep doing this like i can nest lists within a list within a list to create a three-dimensional array etc some other useful things to know about this is how to how do you get the dimension of your numpy arrays so if i did a dot number dimensions so this tells me that it's one dimensional for a and if i did b dot and m it would be two shape is another important function so get shape uh if we do the first one a dot shape this is all we have to do it's a vector so it's only going to tell me the one dimension because it only has one dimension so it's size three if i do b dot shape it's going to tell me the rows and the columns so this is two rows and three columns so it should print out two by three as it does okay other things we want to know how much memory our numpy arrays take up so we can get the type and also get the size so if we want to get the type we do just a dot type oh sorry a dot data type in 32 by default so even though these are small values by default it specifies that it should take up four bytes or be an n32 if we wanted to specify what type we wanted to store at so maybe we knew that we didn't have many like big values so we could do like an n16 and so that would take up less size and you can see the difference in size and i say so right now it's in 16 and if i want to see the size there's a couple different i guess important functions with this we could do a dot item size so this should tell me two bytes as it does if we left this as an int 32 it will tell me four bytes down here as it does you can also do i think the total size um i guess a dot size is uh the total number of elements so the total size would be a dot size times a dot item size um another way to do that is i think just number of bytes as you see that's the same thing and um you can also do this with b it's like b dot item size bs are floats and i believe that this is an eight byte type so if i do b item size as you see yeah it's eight so floats are going to be bigger than um floats are bigger than integers usually unless you define this as like an int 64. and so yeah you really i usually don't even worry about the data type too much i don't specify it but if you really want to be efficient try to specify this so that it fits all your data but um if yeah i guess it fits all your data as tightly as possible all right so now that we've gone through some of the basics let's actually show how we access change specific elements rows columns etc so imagine we have the array there's gonna be a two dimensional array so i'm gonna make this kind of long and you'll see why in a second okay so this is a two by seven array if i print that out okay and i could prove that it's a two by seven by doing a dot shape that's just a reminder so what if we wanted to get this a specific element well to do that we can use this notation of row comma column so this is the row index this is the column index so i could just do something just like a let's say i wanted to get this 13 right here well that would be in the second row but because we started python indexing at zero be the first row and then the zero one two three four five fifth column so yeah that gives us the 13 as you see down here and one thing that's kind of cool is you can also use the negative notation similar to lists so i could also say the negative second element would be 13 as well because this would be negative 1 and then negative 2. so there's a couple different ways to do this but we'll stick with the first one okay let's say we wanted to get a specific i can't spell row that's pretty straight forward as well so in this case if we wanted the first row we would do zero and then because we want all columns we use the basic slice syntax similar to lists i can just do a single column and that will get me everything in the row that's nice what if we want a specific column well if you know how to do rows you probably know how to do columns a let's say we wanted this row right or this column right here three and ten that would be all the rows and then the zero one two column that gives me the 310 and from here we can do even some more like tricky stuff so um [Music] uh let me just say getting a little more fancy and we have the start index this is just a reminder start index end index and then finally the step size so if i wanted to let's say get between the numbers two and six every other element so two four and six well to specify that i would do well i want the first row and then i want to start at the first element the two and i actually screw that up it should be one so i start at the two then i want to end here at the six which is the it's exclusive so that would be uh i want to actually go to the sixth element and then i want to step by two because i wanted two four six so i do one six two and that gives me two four six and i can also use the negative here and do like negative two ah what happened there oh shoot that was going backwards i didn't want to change it there i wanted to change the six to be negative two ah okay it's exclusive so i wanted this to actually be negative one a little bit more of a fancy way to do that okay so that's how you access elements and then if we wanted to change something it's pretty straightforward too let's say i wanted to change that 13 that i originally accessed well i can just do like 20. if i print out a now that original element that was 13 is now 20 and you can do the same thing for um series of numbers so like for an entire column let's say we wanted to replace this 310 column i would do something like a colon two equals let's say i wanted it to be all fives i could start like this and as you see it's all fives five five and then if i wanted it to be two different numbers you just kind of specify the same shape as what you've subsequent so it'd be like one two so now you see that we have a one two in that's position really quickly let's just show a 3d example if i had a 3d so we'll say b equals numpy array of all this and if i print b so if we want to get a specific element here the recommendation i have is work outside in so work outside in so let's say i wanted this four right here well the farthest outside would be which one of these do i want and i want the first set so i want this area right here so if i wanted that i would do b zero and then now that i'm in here i want the second row so i want the three four so that would be one and now that i'm within this i want the first or the second yeah the second element but the first index like that so that gives me the four and you can do similar type stuff with like the colons in here so each one of these dimensions that you're indexing you can be all fancy with uh how you access elements so i can do something like this and you know get three four seven eight you can kind of play around with this and see how changing different things changes what you get and if you wanted to replace in this case um basically you just have to create a subsequence that's the same dimension so if i did b one this that gives me three four seven eight let's say i wanted to change that to nine nine eight eight as long as it's the same dimension it's gonna work so nine nine eight eight if i try to like do something like nine nine nine eight eight it's gonna have an error all right so that's the basics of indexing i think by the at the end of the video i'll do a little like um challenge problem on like some advanced indexing so look at the end of the video for that all right next let's go through how to initialize all sorts of different types of arrays so to start off let's uh initialize in all zeros matrix and to do that there's a nice built-in function called np.zeros and we can first i guess actually all we really need to do is specify a shape so i did like mp05 it's gonna just give me a vector of five length five but i also can pass in a more complex shape so if i wanted it to be like a two by two or two by three let's say as you see there i could do three dimensional two by three by three you could even do four dimensional if i wanted to two by three by three by two it gets pretty crazy but yeah uh you can do all sorts of zeros with that next let's do an all ones matrix pretty similar to the last one and p dot ones of let's say four by two by two and there you go and you can also specify the data type here so if you wanted like all ones but in 32 uh you can go ahead and do that so all ones all zeros however you might want to initialize a matrix that's not ones or zeros any other number so for that you can do np.full and this one takes in two parameters so the first is the shape so two by two and then the next is the value so if i wanted all 99s [Music] then it's a two by two with 99 another useful and you can you know that has a data type too so if i wanted that to be float 32 there you go and i'll put a link in the description to a list full of these like array creation routines uh useful to know is there's also this full like um there's this full like method and basically that just allows us to take a shape that's already built so let's imagine we wanted to reuse that this array that we i guess had in in the last section a well i think it's still loaded and let me just make sure well i can pass in and make a array that's the same size size of fours let's say by doing full like or actually i think i don't even have to pass in a dot shape i just have to pass in a there we go if i didn't use full like i would have to do full of a dot shape i don't know if that's that useful for you but i guess it's potentially good to know okay next one let's say we wanted to initialize a array or a matrix of random numbers so random decimal numbers to start to do that we do np dot random.rand and we specify the shape so let's say four by two oh no what did i do wrong uh huh actually confused tuple state oh okay yeah this one's a little bit different so instead of passing in a tuple you can pass in directly the integers you wanna the integers of the shape so it's a kind of a weird thing to remember so if i did the 4x2 this way i would actually pass it in like that and when you get errors like this oftentimes you can just do a quick google search and realize that that's what you need to do so i can even keep going so i could do a four by two by three of random numbers between 0 and 1. i could also pass in something like a dot shape i don't know if this would work let's try yeah so if you wanted to pass in like a shape you can do a random sample a dot shape and that now you see gives us the same shape as our a from up here so yeah rand and then there's random sample which is another method we'll keep it as random four by two okay what if you didn't want just decimal numbers but you wanted random like integer values well to do that we can do random.rand i'm getting np.random.brandint and in this one we're gonna pass in the start value or if you don't specify a start value it's gonna just start at zero um and so if you don't specify a shape then it's just gonna do one number so let's say we wanted a three by three ah what did i do wrong and this is not shaped it's actually size and yeah all the documentation has these like you know you're not expected to memorize all of these things what i think it is helpful to see is that you see that you can do these types of things so like when you're thinking about a problem you can like kind of point back like oh i remember that that's possible uh maybe do a google search on how to get it but yeah random.random07 with size 3x3 is here you can also specify like a different parameter so let's say i wanted four to seven and i think and if i keep running this too it's kind of cool you can see it changing and so it looks like that seven is exclusive so if i wanted to include seven i would stop a little bit later you could also throw in like negative numbers here cool all right uh what else other than a random integers maybe you wanted to do like the identity matrix you do identity of three this one only needs one parameter because the identity matrix by its nature is going to be a square major matrix what else is useful maybe it's useful to repeat a array a few times so to do that you could do say we had the array um one two three let's say i wanted to repeat that three times pass in the array you want to repeat and then that's print r1 see what happens okay and then if i specify the axis equals zero oh no it did do anything uh what i can do is make this a two dimensional array i think because it was a vector it didn't do what i wanted to what i wanted to do is one two three or one two three one two three one two three so if i wanted to do that now i made this a two dimensional array and it will repeat the inner part uh on the zeroth axis so it'll be basically making it rows there you go so if i made this equal to one that's going to be what we saw before cool okay so next here's a picture of an array i want you to try to initialize using everything that we kind of just went through so all these different methods so look at this picture and then try to put it together without just manually typing out all the numbers because you can imagine like this isn't too too big but if you got into a matrix that was massive you'd want to know how to build it up using these kind of like fundamental concepts okay so here's the solution to that so i can do output equals i'm going to start with making everything ones so ones and it's gonna be a five by five of ones print output so this is what i have now okay and now basically what we're gonna do is fill in this middle part with zeros so z i'm going to just say equals np dot zeros and that's going to be a three by three and if i print z now we have this now what i can do is fill in the middle element so that's 1 1 with a 9 and now if i print z we get this and then finally we need to replace the middle part of the ones matrix so output the middle part so that's going to be the first row to the third row so i want the first row to the third row and then i want the same thing with columns because it's the middle first column to the third column and actually this is an exclusive value so it needs to go to four and that's going to equal [Music] z and now what happens when i print output is yay we got what we're looking for and actually one thing that i think is nice is instead of using four i can also do negative one so basically the from the first element to the last element uh do that and as you see it didn't change this last initialization i want to go through i guess is a little bit different it's uh over on the concept of copying but something you got to be really careful about so i'm just going to quickly mention it i want to do explanation points there we go um okay so imagine we have two arrays or we have one array let's call it a and so now a is just a normal array as you can see and let's say we want to make b a direct copy of a so now i'm going to just do b equals a and then print out b and as you can see it's still one two three and so i'm like okay i have this copy like things are cool it's fine i want to change the first element in b so i'm going to do b zero equals 100. here's the issue my printout b looks good the issue lies in if i print out a look what happens i just printed out a and a now has a 100 instead of the 123 that i initially set it as and that's because when we did b equals a we just said that the the variable name b points the same thing as a does we didn't tell like numpy to make a copy of what is the contents of a so that's that's why because we're just pointing at the same exact thing that a is pointing when we change the value it also changes the value of a so if we want to prevent that we can use this dot copy function oh sorry i shouldn't do it yet um b equals a dot copy and then when we run the cell as you can see one two three it's still there because now we're just copying the contents of what's in a and if i print b it has the 100 200 100 2 3. okay so one of the big uses of numpy is all the math capabilities it offers um so just to kind of show some of that um one thing that it can do is element-wise um i'll just make those four values element-wise addition subtractions element y is i guess arithmetic so here we have a print out a um and if i wanted to do something like a plus two um adds two to each element you can do a minus two subtract two from each element a times two as you can see uh a divided by two um divides everything by two uh one thing to note with and you can also do stuff like uh a plus equals two so now i printed out a in this column it's going to be 2 plus everything it's kind of cool you can do like the same type of math that you can do in python you can also create another array an mp.array and that's like let's say one zero one zero and i could do something like a plus b and that should be two two four four oh and because i added if i rerun this okay two two four four like we expect uh so all sorts of useful things you could even do like a to the second power 1 4 9 16 and that might have made it a bigger data type i'm not sure um cool we can do stuff like take the sine of all the values so let's say we had a we do np dot sine pass in a gives us all the sinusoid of all those values which you know and you have like the cosine of all those values all sorts of useful things that you can form on an entire array or entire matrix all at once and if you want all the different things that you can do i'll paste in a link here this will all be part of the as i mentioned before i have this on my github so if you look in the description you can find this exact notebook so yeah look up the routines right here for math all sorts of cool stuff all right moving on we're gonna still be in math but let's jump into linear algebra type stuff so here we are doing linear algebra so this is kind of like basic all sorts of functions you can do on elements uh linear algebra so this is like really i feel like when i'm using matlab it would be doing these linear algebra type stuff so let's say we have two matrices and the big difference with linear algebra is like we're not doing element wise so like in this case this b we're doing element-wise computation so like a times b in you know linear algebra you're trying to multiply matrices and that's a different process so let's say we have two matrices we'll have a and i'm going to use the syntax we learned about earlier i'm going to say this is a 2 by 3 matrix of all twos or actually let's make this 2 by 3 matrix of ones so we have a as you can see and then we'll have b which is equal to np dot full it's going to be a 3 by 2 and it's going to be a value 2. so if i print out b now we have this and if you remember linear algebra you have to have the columns of the first matrix be the equal to the rows of the second one so as you can see this says three columns and this has three rows so we're good there so we would multiply this row by this column um and you know you do the the process of matric multiplication we're not going to walk through the whole thing but we should end up with a 2 by 2 matrix at the end if we want to do matrix multiplication and it doesn't just automatically occur if you try to do a times b it's not going to work because these are different sizes so we can do is mp has a matrix multiply function and if i pass an a then pass in b we get 6 6 6 6. did i say enough sixes i don't know but uh yeah it uh multiply those two matrices um you know and if i try to switch up this dimension in the middle uh it's not gonna work because it's now incompatible uh yeah that's matrix multiplication you could also want to do maybe some other stuff with matrices so let's imagine i wanted to create the or to find the [Music] um let's say determinant of a matrix so we could as a sanity check you know make c equal the identity matrix and if you are familiar with linear algebra you know that the identity matrix has a determinant of one so if i do linear algebra dot determinant of c we should get one 1.0 as we get so find the determinant you know there's all sorts of other good things like eigenvalues you know the inverse of a matrix so what what do you multiply by a matrix to get the identity matrix um and so yeah all sorts of good stuff on that like i guess i'll do and if you want to have all this information on the other types of linear algebra stuff here is some useful information definitely go to this link and as i've said a couple times in this video this notebook is on my github page so you can find all this there but yeah there's so many different things that you can do with matrices and linear algebra using the numpy library okay continuing onwards let's look at some statistics with numpy so kind of the easiest things we might think about when we think about sorry um statistics there's like min mean max etc so let's say we have this array so let's say we want to take the min of it you can just do np.min of stats that's going to give us the one that you see there you can do mpmax of stats six you could also do it on like a row basis so if i said axis equals one that's going to give me the min of the first row and the min of the second row or maybe this is a better way to see it if i said x is equal to zero well it's going to give me all the values that are up top here because those are all the the mins uh so yeah you can do all sorts of cool stuff with min and max with this same thing with max let's say x is equal to zero x equals one three and six is the biggest value three is the biggest value and the six is the biggest value you can also do np.sum of stats if i do it just as is it's going to sum up all the elements in the matrix and then same thing i can do row or column so actually equals 0 is going to add up all these terms going downwards next let's talk a little bit about reorganizing arrays so kind of the i would say the key method within reorganizing arrays so if i have the array i'm going to call it before and let's say that that is equal to this value right here so we have before i'll print before out looks like that so let's say we wanted to instead of this shape that it currently has which is a two by four um let's say we wanted to make it a i don't know a eight by one or something or maybe a four by two um or a yeah all sorts of different things we could do i'll start with eight by one so we have before and if we wanted to make it something else we can do after equals before dot reshape and then we pass in the new size we want it to have so if we wanted it to be an eight by one you can pass it in like that and we can print out after as you can see it's an eight by one now i could also say maybe i wanted it to be a four by two so now you got that you could even pass it in as a two by two by two as long as it has the same amount of values like it's fair game so as you see two by two by two still works with the reshape uh what doesn't work is like if i wanted it to be two by three um the values don't fit in so when you get errors with using their shape it's usually because there's a mismatch between the shape you're trying to resize it to versus the original shape moving onwards let's look at vertical stacks so vertically stacking vectors or matrices and you know dimensions are important in vertical stack as well so vertical stacking matrices let's say we had these two arrays if i wanted to stack um you know one two three four on top of five six seven eight i can do mp.v stack and i can pass in v1 v2 and as you see now they're part of the same matrix and one two three four is on top of five six seven eight what i can even do is keep passing these in so let's say i wanted like three copies of this five six seven eight and only one copy of this or i could enter tweet weave them that's a vertical stack horizontal stacks are pretty similar and also note here like i can't do that the size is mass mitch miss match so yep horizontal stack very similar um let's say we had um we'll use uh some notation we've learned before we had these two matrices so if i printed out h1 you got like that and then h2 is this well i want h2 to be on the back of h1 i can just do an mp.h stack horizontal stack and that will be h1 and then h2 and that did not work because i did not surround this in parenthesis either parenthesis or brackets i think they both work yeah there you go so now we've horizontally stacked the zeros on top of the or to the right of the ones all right let's get into some miscellaneous things so first off imagine you have uh you know some sort of text file with all sorts of data and for whatever reason you choose you don't want to use pandas but you want to load all that data from that file into a numpy array well we can do that without too much trouble so i have this text file that i created as you can see here this is on my github page you can download it there this is just really simple data but it shows kind of what you can do with it all delimited by commas called data txt what i can do is i can do mp and i can use this function called gen from text and i pass in the name of the file which is data.txt and then i pass in a delimiter which is the separator and that's a comma and if i do that you see that i get that data that i just showed you um you get that i can increase the zoom here i get that um as an array so that's pretty nice so i'll just call this file data equals and file data yeah one thing you notice though is it automatically cast it to a float type and what if i wanted it to be an integer well i can do another function as type which basically copies all the data into a whatever format you specify so i'll say n32 and as you can see now all this stuff is here and if i go ahead and print file data now it is back to what we had originally and the reason it's back is that this actually makes a copy because the float type and the n32 type are different sizes it can't just like in place um copy everything it doesn't really make sense to so if i did file data equals file data uh dot as type into 32 and then printed out file data as you can see now it's all floats so that's how you load data from a file and you can change up this delimiter based on how your data is split but i think that this gen from text will handle your new line breaks properly if that's how it's formatted write in the comments if you have any questions about this okay the second thing i want to go through is um what happened there i didn't want that to be marked down ah the second thing i want to go through with this miscellaneous section is some advanced indexing so there's some really cool stuff you can do with numpy i'm going to say boolean masking and advanced indexing so what can we do here so let's say i wanted to learn where in file data the value is greater than 50. so if i just type in file data greater than 50. it's pretty cool that you get false or true based on whether that specific location was greater than 50. so as you can see there's four falses and then a true if we go to our data four falses and then 196 is in fact greater than 50. so that's like one way and you can do all sorts of cool stuff with it it's like you could do greater than equal to you know all sorts of different combinations one thing that's pretty neat is you can do file data and then you can index based on where it is greater than 50. and by doing this you grab only the values that actually have a value greater than 50. so that is pretty cool and kind of the reason that this right here works is that one thing i did not mention until now is that you can can index with a list in numpy which is pretty cool so if you have the array one two three four five six seven eight nine and i wanted let's say the zeroth spot the second spot and then the last spot i could do mp or let's say that this is a i could do a of 0 1 and or i wanted 2 3 and 9 so i would do 1 2 and then 8. as you see that gives me two three and nine i passed in a list and it indexed those spots so basically it also works if you like had trues and falses it like basically if it is true then it knows to take it if it's false doesn't so that's why this up here works we could do all sorts of other things so let's say um i wanted to figure out if any value in any of these columns was greater than 50 so i can do a np.any file data greater than 50 and the axis of zero so that should tell me like if we looked downwards on all of these are any of the values greater than 50. let's see what happens so false false false false true that's correct true these two values are greater than 50 this even though this one isn't um false true [Music] yeah true true false true cool so this is telling us you know where what columns have a value greater than 50 and i can also do np.all and as you can see there's less trues in this case i think the only time that all the values are greater than 50 are right here yeah you see there's one true in the fifth spot which corresponds to this right here uh what else can we do with this um if you did axis equals one it's gonna be the rows you can also do multiple conditions so i could do like i want file data to be greater than 50 and let's say file data is less than 100 and this syntax is very similar to pandas here and as i said before numpy builds is what's the base of panda so it makes sense ah no the truth value of an array with more than one element is ambiguous how do i do this i think if i do something like this it will work not positive let's see yeah what happened no i need to end it yeah cool so this is all the values that are greater than 50 but less than 100 so like the first true should happen at the sixth spot one two three four five six as you see uh and i could do something like all the spots if i wanted to make all this not so this means not greater than 50 and less than 100 this is going to be the reverse of what we just did so yeah now the um sixth spot is the first false so this meant not so yeah all sorts of cool stuff you can do with this boolean masking and advanced indexing i mean yeah any sort of like condition i'll put a link and some more information about this all right quick little quiz on uh indexing this is kind of using all sorts of advanced stuff that you just learned in that last section include and then also like some of the original stuff so first question uh basically pause the video after i ask it and then try to figure out what the command would be so we have this matrix and how would you index this part of the matrix so this is the second and third row and the first and second column or zero and first column so it looks something like this rows columns next question how would you index this this is something we haven't done before but you potentially with that last section might have an idea if not no worries so to do this one you need to use two different lists within your uh indexing so it's gonna look something like this we need the zeroth first second and third row and then the first second third and fourth columns that's what that is and then final question how would you index this this is like also something we haven't immediately looked at but you might be able to get especially with that last one take a second all right that would look something like this where you get the zeroth fourth and fifth row zero fourth and fifth rows and then you want columns three onwards so this would like three onwards works you could also do like three to five you'd also do three or like a list of three four but yeah that's one way to do it it's a fun little quiz i don't know it's i guess good to revisit this type of thing and like think critically about it all right thank you guys very much for watching i think this is all i have for this video peace out"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"NumPy Library",
        "Video Title":"What is Numpy and Why?",
        "URL":"https:\/\/www.youtube.com\/watch?v=SqhVpJSHuyI",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/SqhVpJSHuyI\/hqdefault.jpg",
        "ID":"SqhVpJSHuyI",
        "Publish Time":"2024-11-04T13:40:45Z",
        "Channel":"Telusko",
        "Channel ID":"UC59K-uG2A5ogwIrHw4bmlEg",
        "Transcript":"welcome back aliens my name is D ready and in this video we'll talk about numpy or nump now basically numpy stands for numerical python see when you talk about the world of AI machine learning data science it is all about numbers right ultimately you crunch the numbers there and if you want to perform those operations we use certain Library called numai see python is very famous in the AI world right it's not because it has everything in the language it's famous because it is easy and there are lot of libraries which are already built to do all those tasks and numai being the foundation of those libraries now question Aris why do we need dpy and what is lacking in the Python language see when you want to store a data you normally store them in a variable of course right if you have one value you will store that in one variable it can be any type of data it can be integer string character float value you can store that in variables what if you want to store multiple data of course you can create multiple variables or or you can store them in one variable right and that can be with the help of list and it's very famous right so if you want to store multiple values we normally prefer to go with list it's not like we don't have arrays in Python example if you're coming from other languages let's say C C++ Java or any other language we do have this very famous concept called arrays for me my first language was C and I thought array should be a part of all the languages and array not just onedimensional multi-dimensional is supported in multiple languages but coming to python this is something we are missing we do have array module but unfortunately the array module in Python supports only one dimensional array you can't work with multi-dimensional and that's where numpy solves that problem now you'll be saying okay we can use array for onedimensional normally least we use least to store multiple values what's wrong with least yes you can store mul values but then in list you can store any type of data oh that can be done in Array as well but in list in one list you can have different type of data so it's like heterogeneous on the other hand in the python array we need to have same type of values so which is better of course if you're working with huge amount of data structure data and when you want to perform operation you perform the operation on similar kind of data okay so let's try to understand the array in Python and we have done that before in the earlier videos but if you talk about array this is how you create an array basically you have to specify that you want to create the array but also you have to mention that which type of data you're going to store example with the array you have to also mention the type code so if you want to store integers you normally say I if you want to store unsign in you can go with capital I for long you can use small L capital L if you want to store float double you can use F and D respectively uh but what if you want to create the array so you can just go down there are multiple methods available in arrays but if you go down down yeah this is how you create the array of course you have to import the module which is array module uh and then you can perform you can create the array so you can create a blank array by saying okay this is of type long and you can upend the values later or if you want to have values example you want to create a long array but with the values you can specify the values here and same goes for double you can specify the values here so quite straightforward but only it supports your single dimensional if you want to have multi-dimensional so what I mean by multi-dimensional so if you have one value that's single value if you have series of value that's your single dimensional array what if you want to create something like a metrix or a table in that case you'll be having multiple rows and multiple colums something like this and this is where you need a two-dimensional array what if you need a cube in that case you need three dimensional and Le goes on so how do we solve this problem and that's where we can use numpy now numpy is a library which is not by default part of python you have to install it separately and once you have numai you can perform those operations so if you go to the official website of numai uh the new version is 2.1 I've never seen the versions but yeah 2.1 is there that's what it says but let's look at the important things uh you can see it is a powerful n dimensional array basically it is saying that it can go with nend dimensional not just one so as as you can see it also says performant basically if you talk about the list in Python they are very slow and I will show you the demo there but is V so and to and numai on the other hand it is well optimized C code so basically it is very fast compared to python it is easy to use and it's normally used for numerical Computing I'm not sure if I mentioned the full form of numpy before but numpy stands for numerical Python and if you go down of course you can try out numpy Cod here as well but if you go down you can see there are multiple domains which they specify scientific domain so most of the scientists prefer to use numpy and of course it's a foundation Library uh you can also use it for data science example the pandas and uh psychic learn all these are based on numpy and for machine learning there are different libraries and all these are based on numpy so it's very famous so that's why if you know numpy properly it is easier for you to work with other libraries okay uh once we have talked about numpy let's do a simple code and to show I mean of course I'm not going to explain everything the code itself uh just see the difference the speed difference between the least and number five so and we'll see a simple demo number as well okay so let me open the Jupiter okay I want a notebook okay so we got a simple file here and let's write some code so basically I want to create a list okay two two list and then I want to add them so all the values now you would be saying okay how many values we be having not five 10 let's go for a million okay so I already have a code I will just copy paste the code so that it will make it faster so I want to create two list here and let me just get at the code okay so there are two list one list has all these values and I think it's 100 million uh the second list has from 100 million to 200 million I guess it's 100 million I'm not even counting it so it's a huge number right and creating this list itself will take a lot of time how much time it takes let's try so I will just import the time package and I will say start equal to time. time let's use this function so this is my starting time and I'll print current time current time let's subtract it with start and let's see how much time it takes normally it will take a lot of time uh let's run this and by time it is running uh we can change that code it will take a lot of time because we are creating two two huge list and here I want to do something but I think if I click on it okay so it took it it took around 10 seconds to just create this list okay that's a huge time uh but I want to perform an operation as well so what I want to do is I want to add these two list and keep them in another list so let's say we got the Le C here and let's perform the add operation so I'm using a for Loop and add these two values of A and B and keep it in C and it will take a lot of time so let's see how much time it takes so if I run this and it will take a lot of time so just keep it running and now on the next cell I will write the same code but using numpy so for numpy what you normally do is you import so by default nump is not available so you will simply say numpy as NP now I already had napai in my machine so I can directly use it and this is a code similar code as you can see but the difference is in numai if you want to create an array you can say a range which is array range and you can specify the values so we got second list here which is B and mind you the earlier cell is still executing okay and my machine is also slow and suddenly my machine started giving fan noise I don't know if you can hear that but I can hear the noise so it is taking lot of time and also resources on the other hand numpy I'm not sure if I should run this now I should wait for the first cell to complete when I was trying it before the video it took around 30 seconds I think 30 seconds already done right it's still executing how do I know it is executing okay it says busy maybe executing okay so it took around 55 seconds that's huge it should not take that much of time last time it took around 30 seconds I know I don't know what what went wrong maybe my machine is very slow now uh because I'm also recording the video maybe now let's run the numpy 1 and let's see how much time the numpy 1 takes okay still busy it should not take at least 55 seconds should be less I think addition time is not that much it's mostly the creation of the list still busy I think my laptop will die now I should have reduced the number okay this is a sound it's making I'm not I'm not sure if the mic is picking it up maybe it's also doing the screen recording so it's also consuming a lot of power so you can see it took around 15 seconds so 55 seconds and 15 seconds huge difference right so that's what I talking about so numpy is fast numpy supports multi-dimensional array uh and most of the libraries are dependent on numpy that's why you should learn it so that's it from this video where we talked about the basics of numpy and how it looks like in the upcoming videos we'll focus more on numai and we'll try different examples bye-bye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"NumPy Library",
        "Video Title":"NumPy vs Pandas",
        "URL":"https:\/\/www.youtube.com\/watch?v=KHoEbRH46Zk",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/KHoEbRH46Zk\/hqdefault.jpg",
        "ID":"KHoEbRH46Zk",
        "Publish Time":"2023-04-12T11:00:15Z",
        "Channel":"IBM Technology",
        "Channel ID":"UCKWaEZ-_VweaEx1j62do_vQ",
        "Transcript":"Mathematical-based Python libraries like NumPy and like Pandas. These are libraries that can help spot trends over time, gain insights into data, and maybe one day, even solve the mystery of just why seven eight nine. So today, we're going to take a closer look at NumPy and Pandas. And if you've ever seen a simple ray of sunlight plus a glass prism, you've seen how that combination lets us see all the colors of the visible spectrum hidden inside. Well, when a data scientist comes across some interesting new data and they want to get a deeper look, they've got a number of tools they reach for. Now, this would be a great time for some background music, but I'm... I'm being told that that's not in the budget. Now Python, P-Y-T-H-O-N --Python is probably the language most associated with data science, but it's not really Python itself providing these deep perspective shifting capabilities. It's usually some sort of Python library which specializes in numerical and data processing. And two of the biggest ones out there are, oh yes! NumPy and Pandas. So which one is the right one for us? Is there a clear winner in this mathematical match up? Well, for starters, we're not in for too intense of a brawl here since Pandas is actually built on top of NumPy. So even if we're fully Team Pandas, we're still using NumPy. Now, NumPy was released as an open source project back in 2005 with the goal of bringing scientific computing to Python. It was based on two earlier packages. Those packages were Numeric and the other package was Numarray. And its strength really lies in its ability to work with multi-dimensional array objects. From there, users can sort search, filter, apply linear algebra, Fourier transforms-- the tools the data scientist needs to handle large amounts of data much faster than they could with Python's built-in functions. Specifically, it leverages something called BLAS-- that is an acronym for Basic Linear Algebra Subprogram, and LAPACK, which is also an acronym, Linear Algebra PACKage. And it uses those to supercharge its linear algebra capabilities. So all good, why not just stop there? Why not stay comfortably NumPy? Well, as its name suggests, NumPy is all about numbers. And where it really excels is numerical analysis, linear algebra and simulations. But when it comes to data analysis of manipulation, working with a wide range of data sources, that's where Pandas really starts to differentiate itself. Now, Pandas got its start in 2008 when developer Wes McKinney was looking for a powerful and flexible tool for programing quantitative analysis on financial data. Now Pandas is named after the three dimensional PANel DAta of which it works in. And then it was made open source the following year. Now, Pandas makes the process of working with data more straightforward for data scientists by providing methods for loading, reshaping, pivoting, merging and joining data. Or even working with missing data. It excels at working with tabular data, whereas NumPy is really more firmly rooted strictly in numerical data. Where NumPy excels at things like simulation, well, Pandas steps up its game in things like data analysis. So why not start right with Pandas? After all, most of NumPy's methods get surfaced outward through Pandas, so one might see this as a superset. Well, Pandas does build on top of NumPy, but that also means that it brings with it some overhead, both in terms of performance and learning curve. Pandas capabilities come at a cost of complexity. However, Pandas also implements a number of functions optimized with C and Cython, which can be faster than the NumPy equivalent once we get into very large datasets. The general consensus on the best approach seems to be start with NumPy and look for the features you're most likely to need. If that search leads you to Pandas, then there's your answer. So if you came here looking for a knockdown, drag out fight between Pandas and NumPy, I hope you're not too disappointed. That landscape of mathematical and scientific tools available to us keeps us busy and well equipped. So when you're thinking Pandas, NumPy or anything else, it's really any color you like. If you have any questions, please drop us a line below. And if you want to see more videos like this in the future, please like and subscribe. Thanks for watching."
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Linear Algebra Operations using NumPy",
        "Video Title":"Numpy: Linear Algebra operations",
        "URL":"https:\/\/www.youtube.com\/watch?v=hH_cfhjijyg",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/hH_cfhjijyg\/hqdefault.jpg",
        "ID":"hH_cfhjijyg",
        "Publish Time":"2021-02-06T06:24:11Z",
        "Channel":"jyostna bodapati",
        "Channel ID":"UCDV06Gt_q-J-kMhPl7IaQHw",
        "Transcript":"so in the last video we have seen various operations that are supported by the numpy package so basically the regular operations right in this video we'll focus on how numpy can be used for the linear algebraic operations so like how to apply various operations on the matrices there are extensive list of operations that are supported by the numpy module on matrices so we'll especially focus on how to apply the vector dot product the matrix multiplication then we'll see how to do the inverse of the matrices then the determinant of the matrix the trace of the matrix so how to apply all these kinds of linear algebraic operations will see with some examples in this lecture we will discuss various linear algebraic operations on array objects that are supported by numpy in this video with some examples so we'll see basically how to create the identity matrix how to apply the transpose of the matrix how to find the trace and determinant of the matrix and then we'll discuss how to find the dot product of two vectors applying the matrix with the vector and then how to multiply two or more matrices and then how to find the inverse of a matrix and finally we will discuss how to find the eigen vectors and eigen values for a given matrix so all these linear algebraic operations so we'll see with some examples in the earlier videos itself we have discussed how to create the identity matrix so let's have a review of this to create an identity matrix in numpy you can use the i method by passing size value to the i method we can create the identity matrix of certain dimensions so here in this example we are passing three as the argument to the i method to create a three by three identity matrix and similarly we can create the four by four identity matrix by passing the value 4 to the i method that is how you can create the 3x3 or 4x4 or n by n identity matrix by using the i method and now let us consider this 2 dimensional matrix a 2 which has four rows and ten columns and now i would like to apply the transpose on these matrix and now let's see how we can identify the transpose of this four by ten matrix there are two ways to apply the transpose of the given matrix by simply using a2 dot t you can get the transpose of the matrix a two so here you can observe all the rows of the given matrix a two becomes columns here and all the columns becomes the rows here so that is how you can apply the transpose of a given matrix otherwise you can even use the transpose method by passing the array name to the transpose method you can get the transpose of the given matrix so here also the matrix a2 is transposed so now let's consider how to find the trace of the matrix and the depth of the matrix so consider this two-dimensional array object which is of size three by three so now to find the trace of this three by three matrix you can use the trace method you just pass the matrix name to the trace method so that gives you the trace of the matrix trace is basically the sum of the elements on the diagonal so if you observe here 9 plus 5 plus 1 it's 14. so that's how you can get the trace of the matrix to find the determinant of a given matrix you can use the debt method in the numpy package there is a module which contains various operations related to the linear algorithms so we have a module with the name lin alg which stands for linear algorithms and in that you have a method with the name debt so you pass the matrix name to the debt method to get the determinant of the given matrix now consider these two vectors x and y so i am taking the vectors so now i am going to identify the dot product of these two vectors x and y so you can use the method dot provided by the numpy package to find the dot product of two vectors so here i am finding the dot product of x and y and y and x so here in these examples i am finding the dot product of x and y so you need to remember that dot product of x and y is equal to the dot product of y index you need to remember that the dot product of two vectors is symmetric so that's why you are getting the value 32 when you are applying the dot product on either x and y or y and x so now let's see how we can multiply a matrix with a vector let's consider the matrix a which is of two dimensional so here you can observe its a two dimensional matrix and x is a vector with three elements so here the matrix is a two by three matrix whereas the vector is having three elements now i am going to apply the dot product on this matrix and this vector so you can use the dot method of the numpy package to find the product between a vector and a matrix you can use the dot method to find the multiplication of a matrix with the vector and similarly you can also use the same dot method to find the multiplication of two or more matrices so consider these two matrices a and b which are two dimensional in nature so a and b are both of size three by three and now i am going to apply the matrix multiplication on these two matrices i can use the dot method to get the multiplication of the matrices a and b so you just need to pass the matrices a and b to the dot method so you need to remember dot method is very much helpful for the linear algebraic operations you can apply the dot product of the two vectors or you can even use the same method to find the multiplication of a vector with the matrix or you can even use the same method to multiply two matrices now let's see how we can find the inverse of a matrix before applying the inverse of the matrix you need to check whether the matrix is singular or not to check whether the matrix is singular matrix or not you can find it using the determinant of the matrix so you know how to find the determinant of a matrix use the depth method and compute the determinant of the matrix so if the determinant of the matrix is non-zero value then only you can apply the inverse of the matrix in the module linear algorithms you have a method with the name inv which stands for inverse using that method you can compute the inverse of a non-singular matrix so here i am passing the matrix a to the inverse method to get the inverse of the matrix a now let's see how we can find the eigenvalues and eigenvectors of a given matrix computing the eigenvalues and the eigenvectors is very very important in case of the machine learning or the image processing applications in the same linear algorithmic module you have the method with the name eig which stands for the eigenvectors or the eigenvalues by passing the matrix name to the eig method you can compute both the eigenvectors and the eigenvalues this eig method returns two arguments so you can see here it returns the eigen values and the eigen vectors so i am displaying both the eigen values and the eigen vectors that is how you can find the eigen vectors and eigen values of a given matrix so far in this lecture we have seen how to apply various linear algebraic operations on the given matrix now i hope you understand how to apply the transpose of the given matrix how to find the trace and determinant of a given matrix then how to find the matrix or the vector multiplications then how to find the inverse of a given matrix and the more computationally intensive applications like eigenvector and again value computations can also be done very easily using a single statement itself so you are just calling the method eig to compute the eigenvectors and the eigenvalues of a given matrix that is how you can apply various linear algebraic operations on the array objects so you need to remember one thing so this can be extended to multi-dimensional array objects also so you need not to apply it on one d or the two dimensional array of this you can extend the same to the multi-dimensional array objects also so now i hope you understand how to apply various linear algebraic operations using the numpy package on the n-dimensional arrays so we have seen in detail about how to apply the matrix multiplication addition then the matrix inverse matrix determinant trace of the matrix so all these operations in detail we have seen so i hope you understand all the details so thank you thank you for watching this video"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Linear Algebra Operations using NumPy",
        "Video Title":"#8 Numpy Linear Algebra Operations | Numeric Python Tutorials Series",
        "URL":"https:\/\/www.youtube.com\/watch?v=pjnW6aFqpnw",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/pjnW6aFqpnw\/hqdefault.jpg",
        "ID":"pjnW6aFqpnw",
        "Publish Time":"2020-09-15T11:15:02Z",
        "Channel":"Future Scope",
        "Channel ID":"UCmUsD_7MAcOPc27ue6uq5NQ",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Linear Algebra Operations using NumPy",
        "Video Title":"Intro to Linear Algebra using Numpy",
        "URL":"https:\/\/www.youtube.com\/watch?v=pBBuPumlnEc",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/pBBuPumlnEc\/hqdefault.jpg",
        "ID":"pBBuPumlnEc",
        "Publish Time":"2019-03-30T01:56:19Z",
        "Channel":"rmotr.com",
        "Channel ID":"UC9upMOgrXYMCfB-xwTlgT1w",
        "Transcript":"we're gonna really quickly introduce all the concepts related to linear algebra that are part of the numpy pretty much core of the library right we know already that numpy is all about arrays and we also saw that an array can have multiple dimensions which let us basically create matrices this is going to be fundamental as we said in our previous lessons to the to the explosion of data science popularity within the python universe because everything you're gonna see from from now on all the important data science computations including machine learning for example and and neural networks and deep learning it all uses matrices and matrix multiplication and actually also high-level structures like multi-dimensional tensors with more even more dimensions so again it's gonna be very important this might not apply directly to you maybe you donate linear algebra right now but it's it can be a good introduction if you are into scientific or mathematical feeding so we're gonna use these examples the matrices a and B and the vector V and we're gonna do a couple of different operations we are gonna just again we're gonna see them in high-level perspective you can fork these lesson and play it with your own there are also some exercises for you to practice as usual so the basics just doing regular arithmetic operations with numpy and with matrices and vectors it's very simple like adding them or just subtraction of matrices or multiplication of multiple matrices in this case as usual you you always have to understand what type of multiplication you're making with matrices it's not the same thing to do element wise operate multiplication like in these in this way it's also the Hadamard product then doing for example matrix multiplication which in this case we just sometimes called the dot product and actually starting in python 3.5 we had the odd operator that also serves as a built-in matrix multiple a multiplication operator transposing transposing matrices is also very simple we're gonna see a couple of examples where we might need these later what about all those operations to operate if you are again in in this scientific space and you need the usage of more advanced mathematical concepts with linear algebra it's going to be very simple to get that going with an OPA so for example creating an identity matrix is extremely simple an identity matrix just defines this matrix that has the diagonal right containing number ones and the rest it's all zeros so again very fairly simple you're just gonna say they indicate the order of the identity matrix and it's gonna generate it for you in this case were creating another matrix that is just we're creating this is a very interesting operation we use it from time to time the reshape one what we're doing is creating a regular non play array and then we are reshaping it we're changing its shape right and we're doing it we're making it into a three by three matrix so one two three becomes the first row and four five six becomes the second row and the rest of course the third road of it so you might already the properties of an identity matrix right it just pretty much will not change the original matrix when you are doing multiplication what about the inverse for matrix this is pretty interesting we have a couple formula here if you wanna follow them up we're gonna start first with matrix which is one two three four to get the inverse of a matrix you need to first get the determinant of the matrix what you're gonna find out right here the determinant is going to be divided by one divided the determinant the problem is that sometimes the the determinant of a matrix will not be defined in that case it's when we say that the matrix is singular in this case one two three four it does have a determinant minus two so we can actually get on inverse if you check this formula this all adds up but the inverse of the matrix one two three four it's actually minus tu1 one point five minus zero point five but again if we have a singular matrix like in this case this is a matrix 1 2 3 4 4 5 6 7 8 9 we checked that the determinant is actually 0 if you plug 0 into this formula of course that's something you cannot compute it compute you cannot divide by 0 so that means that this is a singular matrix again and if you try to get the inverse of it you're gonna get an error because it actually tells you that the matrix you are trying to use is a singular matrix and another property of the inverse of a matrix is that a matrix multiplied by its inverse the result will be the identity matrix here we have some rounding to do this is again numeric computing or using floats so it's approximate if you use the round method you're gonna see that it approximates vary in it approximates to the in the identity matrix so to wrap it up and again this is a lecture you can pretty much fork and work on your own if you are interested in this concept is a couple of functions we use all the time a range for example to create ranges this is similar to the range function in Python the big difference is first it returns an umpire array the range function in Python specialty Python 3 is going to return a generator right 2 range 5 doesn't actually produce numbers it creates a generator you have to pull those numbers now in order to get them so it generates the version of numpy generates an array first and second it has like these decimal steps so you can have like a little bit more of control of what you want to generate in this case from 0 to 1 with in one step this is pretty neat a couple of other functions might be interesting linear space this is something that personally I've used a lot sometimes from time to time I use it it's it's a very interesting function it lets you divide write range of numbers into multiple numbers right so you say from 0 to 1 from this interval I want to split it into five different parts and you get the points right were to split them and it's very interesting what you can generate there is this final this final parameter that will basically tell you if you will be including the rightmost limit or not basically so the in this case we're using the same parameters the interval one zero to one split into 20 different steps and the this example you're gonna see that for example doesn't include one and of course this is the opposite something else to check out are the function zeros one's an antique zeros is going to generate as it says matrix or an array actually with zeros in this case we're generating a matrix and you can of course specify the type that you are trying to use once is similar it's gonna generate a matrix with once on this is pretty interesting the empty one is gonna generate entry empty matrices but these don't look empty what is actually happening is that numpy is pretty much picking any free space of memory to use the problem is that in this case the memory was already had some garbage in it and it's pretty much being you were used so numpy says you know you have matrix out here or an array actually you have this array you can use it with whatever you want but it's not plain cleaning it you're if you are looking for to get something empty like like zeros right you will have to use the zeros function so in this case again numpy is reusing free memory the memory hard something allocated so it's generating these numbers right here full is gonna be pretty much we're gonna use a couple of different functions here full together it's gonna have a matrix which has or an array which has these dimensions and you can specify what value to use to fill it right so if I do something like here we're gonna do three by three with number ones it's of course pretty much the same thing as doing the ones function rights just once is pretty much a synonym or a simple a simple shortcut of the phone method again identity and I matrix all things for you to check out these are the basics of linear algebra there are a couple of exercise for you to use and to do if you think it's gonna you're gonna be benefited of the linear algebra of capabilities of numpy this is not required if you're doing if you're starting with data signs the designs doesn't have a lot of linear algebra contrary to the mood to the usual reasoning that we do linear algebra all the time that is not truth so again if you are interested go ahead with the exercises in other case if you will not be using this don't worry you will probably not need it anytime soon"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Linear Algebra Operations using NumPy",
        "Video Title":"Numpy Linear Algebra Functions and Examples, Linear Algebra Using Scipy in Python 3 (Jupyter) \ud83d\udc0d\ud83d\udcd0",
        "URL":"https:\/\/www.youtube.com\/watch?v=zmsbqM7DtUw",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/zmsbqM7DtUw\/hqdefault.jpg",
        "ID":"zmsbqM7DtUw",
        "Publish Time":"2018-08-06T15:41:12Z",
        "Channel":"TEW22",
        "Channel ID":"UCcBIq3zYCbiq3jYWAq45q3w",
        "Transcript":"welcome back now in this next part of uh numpy data essential training series uh we are going to discuss some linear algebra functions this file is a pre-populated with an import statement and a matrix named my first matrix when college mathematics departments offer a linear algebra course courses are typically taught using a theoretical perspective when engineering departments offer a course courses are often used as a computational perspective in either case the course usually lasts one semester and sometimes serves as an introduction to more advanced mathematics courses as i have learned in my career why then i am am i offering a linear algebra as a short example right in this tutorial series the answer is that i assume that you already understand linear algebra and the goal of this video is to teach you to use numpy's linear algebra capabilities like that notice that the result of my first matrix is a matrix and not an array or nd array the documentation tells us that the constructor for the mp.matrix function returned a matrix from an array-like object or from a string of data a matrix is a specialized 2d array that retains its 2d nature through operations it has certain special operators such as aesthetic from matrix multiplication and a double static for matrix power or matrix exponentiation operations if you scroll down here in a documentation you will see an attributes definition and notice that transpose and inverse are defined as attributes and not as function so i will use the transpose attribute to calculate the transpose of this matrix and a transform is another matrix where the rows and columns of the first matrix are change to the columns and rows of the second matrix so next i am going to use another attribute i to calculate the inverse of this matrix and notice that the inverse is calculated on my first matrix and note upon the transform of my first matrix so let's test whether or not the values calculated for this inverse are correct or not we can do this by taking my first matrix using matrix multiplication and multiplying it by the inverse of my first matrix we anticipate that this is going to generate an identity matrix and when we look at the results we see that the values of one are located along the main diagonal and when we look at the off diagonal elements we see that these are numbers that are multiplied by 10 to the minus 16 10 to the minus 17. in other words they are values that are very close to 0 and this indicates that we do in fact have an identity matrix if we want to create an identity function directly we can use numpy's i function like in matlab the argument indicates that the number of rows and columns that will appear within our identity matrix an important use of linear algebra is solving systems of simultaneous linear equations our three by three matrix can represent a system of three equations with three unknowns so let's create a right hand side matrix which represents the values on the right hand side of each of these three equations and let's create a variable called my first inverse and assign it the value of my first matrix inverse let's find the solution to the system of linear equations and we can do this by creating a variable called solution use my first inverse and matrix multiplication operator and right hand side multiply these values together and we can display the values for solution this is a metric that contains three values the first value represents the solution for x1 the second value the solution for x2 and the third value the solution for x3 at this point i would like to make a comment if you take a linear algebra course most professors will refer to the variables as x1 x2 x3 but if you learn linear algebra in a computer science department or in a computer lane which is being used the professors refer to this as x0 x1 x2 if you want to find the elements within solution and you ask for the zero of element what you will find is the value 2.933 you should be aware of this distinction it is interesting to see that we have generated a matrix with solution but let's test whether or not this is actually correct we can do this by taking my first matrix multiplying it by solution and then subtracting right hand side we anticipate that we are going to obtain a matrix with three elements each of which is zero and this is equivalent to a simple arithmetic expression for example suppose i have an equation such that 3x equals 21. if i rearrange the terms in the equation such that i have 3x minus 21 the resulting value will be zero and the same principle applies when i am working with matrices in this case what we are doing is we are taking the first variable times the solution and subtracting the right hand side in our case 3x minus 21 equals zero now that we have confirmed that our solutions are correct i would like to note that using this method is not particularly efficient if you are going to be working with very large mattresses you would like to find a more efficient solution this portion right here indicates how you can do this now i have from numpy.linear algebra import solve it's considered better practice to include import statements within a notebook and usually they are placed at the beginning of the notebook however for teaching purposes it is fine to have it right here we will use the solved function on my first matrix and the right hand side to generate a matrix of solutions if we look at the solutions generated by this efficient means in the solutions generated by this less efficient means we see that they contain exactly the same values notice that their matrix of solutions generated by this efficient method is the same as the matrix solution generated by this less efficient method and if you have studied linear algebra which in my view you would have you may understand definitions for eigenvalues and eigenvectors you can use numpy to calculate these values and to do this you will import linear algebras eig function let's use eig and calculate both the eigenvector and eigenvalues for our matrix my first matrix and this is what we got this video provided an explanation of creating matrices using attributes of matrices to find transforms and inverses and techniques that use matrices to solve systems of linear equations followed by techniques to generate eigenvalues and eigenvectors hope so you have like this short tutorial and i will do my best to come with some new methods of how to solve linear algebra related and mathematics problem in python using numpy scipy etc thanks for watching this please leave a like and share this video with your friends this will be much appreciated bye bye for now you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Pandas DataFrames for Data Analysis",
        "Video Title":"Learning Pandas for Data Analysis? Start Here.",
        "URL":"https:\/\/www.youtube.com\/watch?v=DkjCaAMBGWM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/DkjCaAMBGWM\/hqdefault.jpg",
        "ID":"DkjCaAMBGWM",
        "Publish Time":"2023-08-31T19:04:54Z",
        "Channel":"Rob Mulla",
        "Channel ID":"UCxladMszXan-jfgzyeIMyvw",
        "Transcript":"in this video you're going to learn all the essential tricks to using pandas to do data manipulation and wrangling pandas is one of the most popular python libraries and the tool for doing data manipulation and now with the ability to write python code directly in Excel pandas is reaching a whole new audience with that comes a lot of hidden functionality that you wouldn't necessarily know about without fully diving into the documentation that's why I've created this video using my years of experience with this library to boil it down to just the functions that you need to know to get started so if you're a seasoned veteran or if you're just learning pandas for the first time I suggest you watch this video all the way through and then go back and re-watch any parts that weren't clear to you the first time if you learned something new make sure you like this video write any comments down below and subscribe to the channel for more content of course the first thing we need to do is import pandas in order to work with it I'm also printing out here my system info and the pandas version I'm using which is the latest at the time of recording this video in most of my videos I get at least three or four comments asking about The Interpreter that I'm using this IDE is called Jupiter lab and I have a solarized dark theme on it but I talk all about Jupiter notebooks and Jupiter lab in a complete video that you should see a link for in the description with pandas you're typically going to be working with a pandas data frame you can think of a panda's data frame as being similar to a spreadsheet where you have a data set that contains columns and rows while you can make a data frame from scratch using raw data in Python the majority of the time you're going to be reading from either a file or a database luckily pandas has a lot of different methods for reading in different file types all of these methods start with read and they include reading from a CSV file X cell files and many other file formats each read method comes with its own parameters that can be set when reading in the files typically the default settings should work pretty well but especially with read CSV which is one of the most popular file formats you have a lot of parameters to choose from this could almost be a entire video in itself but some of the main reading parameters you may want to change is changing the delimiter say if you had a tab separated file setting use columns if you only wanted to read in a subset of the columns automatically parsing dates when reading in the file and reading in large files in chunks now in this tutorial we're going to be working almost entirely with this flights data set which I have saved as a parquet file we'll read this in as DF which stands for data frame if we do a type on this DF you can see it is a panda's core data frame and similar to reading there's a lot of different ways you can write your data frame to files or to databases using the two SQL most of these writing formats typically just take in the file path where you plan to write the file and each writing method has its own set of parameters you can choose from for instance when writing to a CSV I often find myself setting index defaults so that the index is not saved when it doesn't have relevant information now once you do have your data frame there are many techniques that you may want to use to understand what the data looks like head lets you see by default the first five rows of your data frame depending on how many columns you have it may hide the middle columns when displaying this but you can override this by setting this option to display a larger maximum columns and you can see here this data set has a lot of columns which are now displayed the head command can be given any number to show that number of columns there's also a tail command which as you might expect will show the last five rows in the data frame dot sample will pull a random subset of rows from your entire data set you can provide it a number which will return that number of rows or a fraction which will provide that fraction of the entire data set because the results of dot sample are random it can be helpful to add a random State and this will help with reproducibility since every data frame consists of columns and rows we can access the columns directly by using dot columns this can be helpful if you just want to see a list of all the columns in your data frame dot index will give you the index values in the data Frame data frames have a few methods built in that help you quickly get a top-down view of what the data looks like dot info will give you information about the data frame including the size listing each column and the data type of each column and it's also really helpful at the bottom of dot info you see the memory usage of this data set for a quicker summary you can set verbose equals to false in dot info the built-in dot describe function can be run on any data frame to provide some descriptive statistics about the data including the count values mean minimum some percentiles Maximum and the standard deviation for any numeric column describe can also handle non-numeric columns for instance running on the airline will show instead the count number of unique values top occurring value and the frequency many times you'll also find yourself wanting to just pull in the shape of the data frame and you can do that by just running dot shape similarly you can take the length of the data frame which will give you the same thing as the first value in the shape which is the number of rows subsetting a data frame is something that you'll often find yourself doing and you may want to either filter down to a subset a columns or a subset of rows to subset columns you can simply provide a list within a bracket at the end of the data frame and that will subset just to those columns so here we've subsetted just the flight date airline in the origin columns and if you remember from before running df.columbs will give us a list of the entire column names so using this in combination with a slice we could for instance take the first five columns and then subset our entire data frame just to those five or something like this would give us the last five columns and depending on how comfortable you are with list comprehensions it's pretty easy to filter Down The Columns based on certain criteria for instance here I'm filtering down just to columns that have the text time in their name and then I can provide that to the data frame and return only those columns a less commonly used way of filtering columns is by using the select D types method which will return a subset of the data frames columns based on the data type you provided here you can see we've selected only data types in this data set that are integers one thing to note about selecting a single column is that if you provide just that column name you will be returned with the series of that data column as seen here if instead you prefer to have a data frame with a single column you need to make sure to include double brackets around the column name and you can see here this is a data frame to filter a data frame based on its rows you'll typically be using either eye look or look both Loke and I look allow you to access elements in the data frame based on their location however iloc uses the index location and Loke uses the names because of that you'll find yourself using Loke a lot more than I look to show as an example if we wanted to use I Look to pull this value in the data frame we'd be looking for row number one and column number three remember that indexing starts at zero so we formulate our location with with one being the row and three being the column and we return that value this also works with slices so if we wanted to pull the first five rows in the first five columns we could do it like this using I look this way we are subsetting both the columns and the rows but we could also just provide a single value value which will only filter to the row here we're filtering to row number five if we put this in a list then we'll be filtering to row number five as a data frame similarly if we wanted to filter only to a column we can use a colon to State we'd like all rows and here we are saying we just would like the First Column putting this in a list Returns the subset as a data frame if we wanted to do this exact same subsetting using Loke instead of using numerical values for their locations we would actually provide in the name of the columns or rows that we would like to filter to here we have the airline and origin column selected one of the most powerful things of using the look method is that we're able to filter not only on names but on Boolean expressions for our rows how this works is by creating an expression on one or more columns we then return a true or false series here we are looking for for where Airline equals Spirit Airlines and then passing this expression into Loke then we'll filter our data frame down to only when this Boolean expression is true as you can see the result only contains rows with Spirit Airlines we can combine Boolean expressions with ands or or statements to filter on multiple things or columns here we're filtering on the airline and also to a specific date one helpful tip to be aware of when creating Boolean Expressions is that you can easily take the inverse of the expression by simply adding a tilde before it and if we use loc to filter to this expression we've now returned all rows except for the rows with Spirit Airlines and this specific date an alternate way to query your data frame based on Boolean Expressions is by using the dot query method the dot query method takes in a string representation of the Boolean expression you wish to filter on as an example I can filter for when the departure time is greater than 11 30. that query can take in multiple Expressions as seen here we're filtering on departure time and the origin any values in the query method are assumed to be columns but you can represent strings by wrapping the value in quotes or your query expression can access an external variable by using the at symbol before the name in your query string next let's talk about summarizing data in the data frame there are a number of summarization methods that can be run on either a single column or multiple columns they include the mean value the minimum value the maximum value standard deviation variance count which will show you the number of values you can also sum all the values in the column and Dot quantile will give you the quantile values quantile can also take a list as you can see here we have the 25th and 75th quantile for the departure time any of these summarization methods can be run on multiple columns this will return a pandas Series where the index are the column names and the values are the summary value statistics if you want to run multiple statistics on various columns you can use the AG method by providing AG a list of the statistics you'd like to run pandas will return a data frame with those statistics for each of the columns you've provided it the AG method can also take a dictionary where the keys are the column names and the values are a list of the aggregations and pandas will return only the summary statistics that you put in this dictionary they're additional summarizing methods that are useful for categorical variables but these also will work on numeric values dot unique will return an array of all the unique fields in the column and unique will give the number of unique values in a column and one of the methods that I use all the time when doing data analysis is value counts which just as the name suggests will give you the number of counts for each value in that field setting normalized to True will give you a fractional value of the count within that column running value counts on multiple columns will give you the count of those column combinations because we had multiple columns selected we now have a multi-index series but if we reset this index we then have a pandas data frame with the count for every combination now let's talk about some more advanced column methods that can be used on a panda series or pandas column some of these methods can be really helpful when doing Group by operations which I'll show next they include rank which will compute the numerical data rank of one through the max value in that column there are a few different types of methods for ranking including dents which might have multiple values for the same rank or first which will give the first value in that column the lower value shift just as the name States will shift all the values in that column by the number you provided this number can be positive or negative but note that when the values are shifted at the beginning or end of this series will be empty values and you can set a fill value to fill these in if you'd like you can also run the cumulative sum over a series or data frame by using cumulative sum there's also a cumulative Max and cumulative Min rolling methods can be really handy especially with time series data with a numeric column we can use the rolling method and provide it a window period where it will look at when running our aggregation so here if I do window equals five the result here is this rolling object but now by running something like mean we are return and with the average value at a rolling window of five there's a lot of advanced features with rolling like adding the number of periods you could set Center to true if you want the rolling window to center around the value for that column another method that can be handy with numeric values is clip this will clip the numeric value to a lower or upper window depending on what you provide it if we set the lower and upper clip value for this to one thousand and two thousand we could see anything below has been clipped to 1000 and above has been clipped to two thousand Group by methods are extremely powerful when working with data frames that have categorical types by using the group by Method we can provide a single column name or multiple column names in a list here we're grouping on the airline and then provided a column or a list of columns to run aggregations on using some of those aggregations from before here we've grouped by each Airline and then computed the average departure delay for that Airline or we can use the AG function to aggregate on multiple different statistics here we're aggregating on multiple columns note that the result of this is a data frame with multi-index columns these multi-index columns can be a little bit complicated you can run the two flat index method on them which will convert it to a list of tuples but often I like to use list comprehension to rename the columns like this that way the columns for your aggregations are flattened and have names that are meaningful so far we haven't done anything to actually modified our original data set but we can create new columns very easily by performing any operation on a single column or multiple columns let's take departure time here and divide it by 60 and then assigning this to a new column name now if we look at our pandas data frame we have a new call column named departure time 2. another way of creating new columns is by using the assign method the assign method is nice because it can be chained with other operations and it actually returns a new object with all the original columns in the new one you provide it the new column name and what that column should be equal to by using the sign like this we could see that there's now a new column called departure time 3. sorting your data can be really handy when you want to sort by a specific column type using sort values and providing it a column or a list of columns we'll sort that data frame by this column so we can see here the top row has the lowest arrival delay and it will put missing values at the bottom I've subsetted The Columns to make this a little easier to see but you can also set ascending equals false which will sort the data in the reverse order note that the missing values still remain at the bottom I'm going to put a backslash here which will let me chain on another command to this which I will put reset index and drop equals true this will do the sort on this column and then reset our index values so now our lowest index value is with the highest arrival delay time there's also a sort index method which will sort your index if it's numeric next let's talk about handling missing data let's look at just this subset of columns from our data frame and we can see that sometimes the Rival delay is missing values is an a is a helpful method that will return true or false for each value in your data frame if it's missing because Boolean values for true or false are actually ones and zeros we then can run sum on this which will give us a count of all the missing values in this arrival delay column the drop n a method will drop any of these rows that contain missing values you can provide it a sub set of columns then it will only drop the rows where missing values occur in these columns fill in a will fill any of those missing values with whatever value provided here you can see that all the missing values are now replaced with negative 999. we can use some of our summarization techniques like finding the average value for a column in conjunction with fill in a to then fill it with that average value next let's talk about combining data to show these techniques let's create two new data frames which we'll use in further examples here we're creating df1 and df2 for two of the different airlines in the data set whenever we create a new data set like this that we want to be independent from our original data set we should run dot copy now if we wanted to stack these two data frames on top of each other we can use Panda's concat method and provide it a list of the data frames that we would like to concat Panda's concat takes an axis which defaults to zero and that will stack the two data frames on top of each other if we set access to one it'll try to concatenate based on the index values which are not unique here but just to show you as an example we'll reset the indexes here and then we'll concatenate with an axis is one we can see here how the different concat methods worked if we look at the shape of our input data frames in the concatenated data frames this first concatenation stack the data frames on top of each other so it has the same number of columns but it's combined the rows concatenating with an axis of one has merged on the similar indexes it has the same number of rows of the larger data frame and it has doubled the number of columns concatenating with the axis of one can be a little tricky because now we have multiple columns with the same name usually instead of concatenating like this we'd want to merge our data based on some similar columns to show merging examples let's create two new data frames using what we've learned so far the first one will have the average departure delay for each Airline on each date in the second data frame will have the average arrival time for each Airline date we can run dot merge off of the First Data frame and provide it the second data frame this will take any similar columns between the two data sets and combine on those we can also provide it a different merging type like left right inner which is the default or outer another way to do the same thing is just to use the pd.merge method which takes a left and a right data frame both methods have an optional on variable and you can provide a subset of columns that it should merge on note that if we provide a specific column to merge on but there are other similarly named columns in each data frame it will automatically put a suffix X and Y to the new column names we can change this default Behavior by providing its specific suffixes here you can see the suffixes Now show us that this came from the departure data frame and this came from the rifle it's easy to use the on method when our columns from data frame 1 and 2 are the same but if they're different we can actually use a left on and right on method and this will work even if our column names from data frame 1 and 2 are different thanks for watching hopefully this tutorial was helpful for getting you started with data manipu relation using pandas there are much more features than what I showed here but it would make the video way too long so I hope that this was a good introduction for you let me know in the comments if there's anything specific you'd like me to cover in the future"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Pandas DataFrames for Data Analysis",
        "Video Title":"Pandas for Data Science in 20 Minutes | Python Crash Course",
        "URL":"https:\/\/www.youtube.com\/watch?v=tRKeLrwfUgU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/tRKeLrwfUgU\/hqdefault.jpg",
        "ID":"tRKeLrwfUgU",
        "Publish Time":"2020-08-21T07:02:13Z",
        "Channel":"Nicholas Renotte",
        "Channel ID":"UCHXa4OpASJEwrHrLeIzw7Yg",
        "Transcript":"so today we're going to be taking a look at pandas no not those kinds of pandas pandas for data science so pandas is a ridiculously powerful library that's used all around the world for data science it helps you work process and filter tabular data so you can get your machine learning models out there a whole heap faster and it's probably one of the most useful libraries to have under your belt as a data scientist let's take a look in detail as to what we're going to be going through so in this video we're going to be covering crud for pandas now you're probably thinking what the hell is crowd well it stands for create read update and delete we're basically going to be covering everything you need to get up and started really really quickly as a data scientist using pandas we're also going to be treating this like a bit of a crash course so we'll breed in some tabular data and we'll go through all the steps that you need in order to work with candice so in terms of how we're going to be doing this we're going to be working with python and specifically we're going to be using the pandas library and we're going to be coding inside of a jupyter notebook because that's what data scientists all around the world are using so you ready to get into it let's do it all right so let's dive straight into it so in this video we're going to go through everything you need to get up and started super fast to work with pandas for data science so we're going to break up the video into four key sections so creating data frames reading data frames and specifically we're going to be taking a look at how to work with all the data within them we're then going to be taking a look at how to update them so dropping rows and working with columns and last but not least we're going to take a look at how we can output all of our resulting data so the first thing that we're going to want to do is import pandas now we can do that pretty easily using the standard python import functionality all right so we've imported pandas using the import function so import pandas as pd now if we open up our pandas library and hit tab you can see that we've got a whole bunch of stuff to work with there we're not going to go through all of this we're going to really focus on the 20 that's most important as a data scientist and probably the most important function is read csv so this allows us to create a data frame from a csv and work with it in pandas so in this case we're going to be using read csv to open up our telco churn csv here so if we open this up you can see that it's just a regular old csv with a whole bunch of data and it looks like we've got about 3334 rows 3333 when you exclude our columns let's go ahead and read this in and create a data frame alrighty so we've now just created a data frame so in order to do that we use pandas and we used the read csv function and then we pass through the name of our csv now you can't actually see the data frame yet because we haven't actually gone and visualized it now we're going to skip on over to our read section just for a second to take a look at what this data frame actually looks like in order to visualize our data frame the easiest function that you're probably going to want to use is the head function so this allows you to view the first five rows of data within your data frame and you can see that we've got our data frame that we just read in now as i said the head function allows us to view the first five rows of data but if we wanted to view more rows from the top we can just pass through the number that we want to see so by passing through 10 to our head function we're now going to see our first 10 rows of data also just to note when working with pandas our first row is going to be represented by the index 0. alrighty so we've now read in data from a csv and we visualized the first top 10 and top five rows now what we want to do is take a look at how we might create a data frame from a dictionary so dictionary is just a different python data type but it allows us to work with a bunch of different methods also when you're working with pandas you've actually got a whole bunch of read functions here as well so if you wanted to read in from your clipboard or excel or read in from html sql a whole bunch of other stuff you can do that as well here we're going to be creating a data frame from a dictionary so what we can do is create a temporary dictionary first and then what we can do is create a data frame from this dictionary so in order to do that we just need to use pandas access the data frame class and then call from dict you can see we've now created a data frame from a dictionary so again we can use the head function to visualize it so this time we've created a data frame called df so what we can do is visualize that and there you go that's our data frame that we've created from a dictionary so let's just quickly recap so in our create section we took a look at how to create a data frame from a csv we then also created one from a dictionary but as i said there's a whole bunch of other read functions in pandas that allow you to read in data from different data sources now within our read section what we're going to be taking a look at is how to view our top five and bottom five rows so we've already taken a look at how to read in our top five using the head method we're also going to take a look at how we can view our columns create summary statistics filtering and then working with indexes so using the eye lock and lock functions so let's go ahead and finish up our section 2.1 so we want to view our bottom five rows now that's pretty easy all we need to do is use the tail method to do that alrighty and you can see that we've now used the tail method and this allows us to view our bottom five rows again we can pass through a different number of values if we wanted to view a different number of rows so again say we wanted to view our bottom 15 again this allows us to view our bottom 15 rows alrighty now on to section 2.2 so viewing columns and different data types with pandas you've got a bunch of different columns so you can see that we've got state account length so on and so forth and we've got enough that we can view on the screen but when you're working with really big data frames you might want to be able to see all the columns that you've got available to do that all you need to do is use the columns attribute and you can now see all the columns that we've got within our data frame so state voicemail total day charge blah blah blah so on we can also take a look at the different data types that we've got available within our data frames using the d types attribute so within our data frame we've got a number of different data types so we've got objects integers floats we've also got a churn value as an object sometimes you'll also see booleans and a bunch of other different types of data types but we've pretty much covered the majority of them here so this just tells us all the different types of data that we've got within our data frame now whenever you're working on a data science project probably the most important step of the chris damn life cycle is understanding your data a great way to get a handle on your data is to calculate summary statistics so we can do this using pandas and specifically using the describe method so using the describe method we're able to calculate our count our mean standard deviation min max as well as our different quartiles so this gives us a good overview of what our data actually looks like but if you pay close attention when we've called the describe method it's only been called on the data types that are either integers or floats what happens if we wanted to calculate the summary statistics on objects for example well we can do this simply by passing through a different parameter to our described method so specifically if we call df.describe what we need to do now is pass through include equals object so this allows us to calculate summary statistics on our non-float and integer values so for state international plan voicemail plan and churn we're now able to get our counts the number of unique values as well as our top values and the frequency so that pretty much covers summary statistics and now let's take a look at how we can filter on columns so we took a look before at all the different columns that we've got how do we actually filter on the specific columns that we want to visualize well first up let's actually take a look at how we can grab a single column so we've got our state column here how do we go about grabbing that stake column well that's pretty easy all we need to do is access that state value so you can use it like a bit of a key now this can get tricky when you've got keys that have a space in them because if you take a look at international plan here for example we can't actually type in df dot international plan it's going to throw an error in order to get columns that have a space in them we need to do this a little bit differently so all we do is pass through a square bracket and treat it like a key that way so again it's doing the same thing it's just a different way to grab a column so that allows us to grab a single column now what happens if we wanted to grab multiple columns well right now it doesn't look like we can grab two columns using this method or this method so in order to grab two columns what we can do is a similar method to what we use for our international plan except this time we're going to pass through an array of the columns that we want and you can see by passing through an array within our data frame sort of index we're now able to grab both our state and our international plan i should also note that i'm going to share this entire jupyter notebook with all the code completed inside a github repository it'll be in the descriptions below i'd also love to know what you're using pandas for definitely leave a comment in the comments below alrighty so back to our column so we've now gone and shown our two different columns now again whenever we're performing at exploratory data analysis step using pandas what we might like to do is find our unique values within each one of these columns so what we can do is call the unique method to grab our unique values and just like that by calling unique on our state column we're now able to get all the unique values within our data frame likewise say we wanted to call it on our churn column for example which we've got here we can just change that state value to churn and we're now able to see all the unique values within our churn column so that covers filtering on columns so we've taken a look at how to grab a single column how to grab a single column where there's a space in between it as well as how to grab multiple columns and how to grab unique values now what happens if we wanted to filter on rows well let's take a look at the rows that we've got so say we wanted to grab rows that had international plans set to no well what we can do is use condition based filtering to grab those values so by passing through our data frame then selecting the column that we want to filter on as well as the condition we're able to grab only the values that we want so this is particularly useful when you want to filter your data frame or grab a subset of values now you can also filter on two different columns or have multiple conditions you just need to tweak this code a little bit so let's copy this and say we wanted to take a look at values within our data set where customers churned so customers left our business and they weren't on the international plan so international plan is going to stay as no all we need to do to do that is pass through our different conditions inside of parentheses so let's put in our first condition inside of a set of parentheses then pass through an ampersand to represent n so we're basically concatenating all of these conditions together and then we want to pass through our second condition which is customers that didn't leave the business so now what we're going to do is specify a different column so in this case we're filtering on churn and we want customers that didn't leave so false and now you can see that we're actually filtering on both our international plan column as well as our churn column if we wanted to see customers that weren't on the international plan and did churn all we need to do is change our second condition to true and now you can see that we've been able to filter on rows so what we've done is we've taken a look at our top five columns we've filtered on rows where international plan equals no and then we've also done a dual condition filter in order to pass through additional conditions to that filter again you can stack more of these together if you wanted to build bigger filters now what we're going to take a look at is how we can index with ilock so indexing allows you to filter through your data frame but instead of using specific values of specific conditions we're going to be using integers so say we wanted to grab our 15th row within our data frame well we can do this pretty easily using the i look method and there you go we've now grabbed our 15th row so what we've done there is we've taken our data frame and then we've used the ilock method and then passed through 14. now you're probably thinking why 14. well remember at the start that i said that your data frame begins at row 0. so if we wanted our 15th row we just need to subtract 1 and this is going to give us a data frame now the iloc function is really really powerful so it allows you to hone down and get the specific data that you want so say for example you only wanted the state value as well well we can extend our iloc method and just pass through our first column so when we pass through two different parameters the first is going to be your row the second is going to be your column so by passing through column zero we're going to get our first column and again you can see we're now getting our state likewise we can also change this and pass through negative one and it's going to go the other way so now we're getting our last column which is churn now we can also use the iloc function to do slicing so say we wanted a subset of our data frame so rows 22 to 33 for example well what we can do is take a slice of our data frame using the ilop function so we've used the ilok method the same way except this time what we've done is we've passed through a segment of our data frame that we want so we want to start at row 22 and grab everything to row 33 excluding it so you can see that we've now gone and grabbed that slice so that really covers how to work with eye lock so it's really an integer based filtering function now we can also work with the lock method the lock method works a little bit differently to the ilock method in that it uses keywords instead of integers so in order to do that first you need to have an index set on your data frame so right now by default when we read in our data frame our index is just going to be created as a set of integers that's why we've got these numbers here what we can do is actually set an index on a specific column that we want so say we want to set it on state we can do that alrighty so you can see that we've now gone and set an index on state so in order to do that we took a copy of our data frame we then went and set our index and passed through the column that we want our index on and we also pass through the in place parameter so this is going to allow it to do it in that data frame without having to create a copy of it then we've gone and visualized those first top rows and you can see that state is indeed our index now what we can do is use the lock method to filter through our data frame and grab the specific rows that we want so say for example we only wanted rows which were in ohio well what we can do is use the lock method to do that so there you go so we've just used the lock method to go and filter through our data frame and just grab rows that are situated in ohio and that about wraps up our read section so we've now gone through how to show our top five and bottom five rows show our columns and data types create summary statistics filter filter on rows and we've also done some indexing with ilock and lock now it's time to get to updating so the first thing that we're going to take a look at is how to drop rows so whenever you're pre-processing your data frame one of the steps that you're probably going to want to do is drop values that have nulls now what we can do is actually calculate the rows that have nulls using the is null method so by training together is null and sum we're able to see the number of rows that have missing values in this case it's represented by the different columns so it looks like we've got 10 rows missing total day minutes 10 missing total day calls eight missing churn whole bunch of others there now with pandas we represent these as nas so what we can actually do in order to drop these rows is use the drop n a function so by using drop n a and then passing through in place equals true we're able to drop all the rows that have missing values so if we go and visualize this again you can see that we now have zero missing values within our data frame so what we did there is we just visualized the number of rows that have missing values and then we've gone and dropped all of those values now what we can also do is we can drop columns so say we didn't actually want a column for example say we wanted to drop area code for example what we can also do is drop a column using the drop method so let's do that so simply by using the df.drop method we're able to drop a column so in this case what we've done is we've dropped the area code column and we've also passed through access equals one because in this case we're dropping a column we're not dropping a row what about creating columns so say for example we wanted to create a column which was the sum of a total night minutes and total international minutes so what we can do is really quickly add a new column and add those together and there you go that's how you create a new calculated column so what we basically did is we grabbed our total night minutes plus our total international minutes and then we've added those together and we've put it in a new column called new column so if we go and take a look at these now you can see that our new column is there on the far right hand side so what we can also do is say we weren't happy with the values in this well what we can do is update that entire column so say we wanted everything in here to read a hundred well we can grab that column and set it equal to 100. now if we go and visualize it everything within that column is reading up as a hundred so that's gone and updated everything in that column what happens if we just wanted to update a single value for example our first value here well this is where we can use ilock to go and replace those values so let's go and grab our first column and then set it to 10. now if we go and visualize that column you can see that it's now reading as 10. so what we did is we first grabbed the value using ilock so we grabbed as first row which is 0 and then we grabbed our last column which we can access by passing through negative 1 and then we set that value to 10. so you can see that that's now reading as 10. now the last update methodology that i want to walk you through is how to use the apply function so the apply function is super powerful because you can basically iterate through every value within a specific column or within your data frame and make updates appropriately using conditions so say we wanted to take our churn column and rather than it being represented as falses and trues we wanted it represented as ones and zeros in the new column called churn binary well because there's different conditions there what we need to do is have a little bit of filtering in order to determine how to update that value this is where the apply method comes in and there you go so we've gone and used the apply method on our churn column and then we've used lambda to basically iterate through each one of these values and we've also used a expression here so we basically said it's very pythonic so we've basically said if x equals true set it to 1 else set it to 0. so if we go and take a look at our columns now you can see that we now have a churn binary so let's double check that we've done that for our true values as well and you can see that if churn equals true our churn binary equals 1. so apply is really really powerful because you can even pass through functions in here and make updates that way just a key point to no doubt x is going to represent the value that you're iterating through at a point in time that's why we've said x equals true all right and that about wraps up our updating section so what we did is we dropped some rows and we specifically dropped our nas we've also dropped some columns we've created new calculated columns so specifically we added our night minutes plus our international minutes to create our new column here we took a look at how to update an entire column how to update a single value and last but not least we took a look at how we can use the apply method to provide conditional based updates the last thing that we're going to do is take a look at our delete and output section so say we wanted to output our data frame to a csv output it to json or output it to html this is where we're going to do it so the first thing that we're going to take a look at is how to output our data frame to a csv this is pretty easy all we need to do is type in df.2 csv and then name it so what we'll do is we'll just call it output for now dot csv this is going to output in the same folder that our jupyter notebook is in so you can see if we scroll over here we've now got an output.csv dataset so you can see that we've got our columns that we made updates to those are all represented within that dataframe now likewise we can also output to json for example if you're working with different web components working with json is obviously super useful that's pretty easy all we need to do is type into json and it's going to create all of the json for our data frame likewise doing it for html sort of similar method and and now we've got a html representation of our data frame so again we've just passed through to html to get the html to json to get the json and if we wanted to delete our data frame all we need to do is type in del df so this is a python method that allows us to get rid of a specific object and that about wraps up our last section which is outputting and deletion so we outputted csv to json to html and last but not least we deleted our data frame and that about wraps up this python crash course so what we did is we went through how to create data frames how to make updates to them how to read them and change data and last but not least we also took a look at how we can output our data and delete it thanks so much for tuning in guys hopefully you found this video useful if you did be sure to hit subscribe tick that bell so you get notified of any future videos that i released and if you've got any questions at all i mean anything be sure to drop a mention in the comments below and i'll get right back to you thanks again for tuning in peace"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Pandas DataFrames for Data Analysis",
        "Video Title":"Data Analysis with Python | Working with Pandas Dataframes",
        "URL":"https:\/\/www.youtube.com\/watch?v=Xo5b2b51QAc",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Xo5b2b51QAc\/hqdefault.jpg",
        "ID":"Xo5b2b51QAc",
        "Publish Time":"2015-07-15T21:43:38Z",
        "Channel":"Dragonfly Statistics",
        "Channel ID":"UCeoF_5Kw0YyWOqhAbQGrxJQ",
        "Transcript":"in this presentation we're going to look back at the iris data set and just a bit of revision on it it's one of the most uh wellknown commonly encountered uh data sets in when you're learning statistical Sciences like data mining or machine learning or something like that or statistics it's one of the uh data sets that you'll come across sooner or later it was uh written by chap called Fisher and it was to do with irises flowers there's 150 cases Al together and in that 150 cases 150 rows there are three species and it's 50 species each so the data contains three species of 50 instances H where each class uh refers to a type of Iris plant so essentially there's a couple of details there H related to how you might use that machine learning but essentially Here We Go Again attribute information uh four numeric variables SE length SLE width petal length petal width and also a new a categorical variable which tells us which type of species of Iris it is so there's four numeric variables and a categorical variable so first off let's get ourselves set up import pandas as PD okay and import NP as MP actually I'm not really going to use that I'm really just going to use pandas now and I have it saved in my working directory a CSV file now what I'm going to do in this presentation is I'm going to do something different this C CSV file is called Iris 1.csv because it has a difference in it okay but other than that it's uh I'm reading a CSV file in uh using that read CSV command and Iris 1.csv is in my work directory and I'm reading that in as Iris okay so so what do I expect I expect four numeric variables one categorical variable and also just sort of quick remark that zero is a h python is a zero index programming language okay other programming languages such as R are one index as in the first case has index one in Python the first H case has an index zero the first element has an index zero so what we're going to do here is look at Iris this Iris the iris I've just brought in and we're going to look at the top 10 rows just have a quick inspection of it and what's going to happen here Iris head that's how we uh print out the first 10 rows okay and what's going to happen here you probably sort of tell straight away that we have an unnamed variable here unexpected unnamed variable now this is actually might be the case number okay uh for ex H so it might actually this is output you might get from uh uh CSV files when they come out with other uh programming environments they might automatically put in the case number so unnamed uh 1 2 3 you can see it's essentially the index if it was one index deex okay now I am going to work on this variable for the time being this variable here okay and everything else I'm going to sort of ignore so the first thing I'm going to try to do is actually rename it okay and let's go down here so what I'm going to do here is to rename it so the uh what I'm going to do here is rename the column I want to rename here the column I want to rename here actually you know what I'm going to do this first this is how you actually get the um list of column names and it's actually you could just go list Iris and that actually gives you the column names uh what is oh it's I I've actually not put it through yet so I'm just going to sort of pause this a second and uh click through everything because I'm just working in an old notebook so I just unpaused there and essentially what I have done is is I just listed all of the column names and you can see up there at the top we have unnamed zero okay so that's the first unnamed column so what I want to do is I want to rename that column and I just want to give it the name case because that's a good name so what I do here is I'm going to transform the make a permanent transformation and I'm going to use this attribute here rename rename and essentially just specify the columns I want to rename with the old name and the new name okay so um yeah that's a essentially how you rename a column so it's rename and just specify what you want to rename and the old name and the new name and that's it and so that will update the the name so let's run that and see does that work so Iris let's look at the top of iris again let's print out the first five cases there we go that the name of the first variable is now case Okay so that's how we might rename a column now what I might do now is actually think actually I don't really want to that variable at all I want to get rid of that case it's useless it's a useless piece of information it's redundant in the presence of the index so what I might do actually is Drop That variable so essentially what I could I do here is use this uh function here command here drop iris. drop so it actually will drop the um case variable uh axis is equals one that's just a uh specify columnwise operation so just essentially drop the case h variable the entire column of it so let's run that and you might sort of think uh something going on here might work but let's go down to the next variable down here if you actually look at or sry the next cell and actually say hang on what happened here it's back did I not drop it permanently so what you might do then in that case is you might go down here sorry what you might do is in place equals true okay so that will permanently get rid of it okay so H you have the variable you want to get rid of and place equals true essentially means permanently get rid of it so iris. drop the name of the variable want to drop in place equals true and again x equal 1 columnwise operation and let's see how that gets us on now did that do any good let's look at the head again the first Tre cases this time yep it's gone that's great so we were able to rename a variable and then get rid of a variable so rename and drop okay so what I want to go do now this is something different I've sort of got rid of everything all the all the useless information I didn't want to get rid of but what I might do now is actually add in a variable and what I'm going to do here is try divide so I have saple length here and saple width here and suppose let's suppose I want a ratio of the two one divided by the other so I'm going to go saple length and seel width and I'm going to call that seel Ratio or SLE SLE I'm not quite sure how to pronounce that so essentially just divide one by the other I'm going to set this up as a little array let's actually have a look at that uh low and see what type that is let's go there so what is that type it's always interesting to know what types you're dealing with so what is seel ratio it's a series okay CU that's makes sense because we're dealing with panda data frame and um well they're made up a series essentially The Columns can be looked at as a Ser as sort of joint conjugation of Series so that's a SLE Ratio or SLE ratio I'm not quite sure to pronounce that my apologies now I want to add this in this SLE ratio into my data frame so what I can do here is I can simply specify a new column this is actually more deceptively simple so SLE ratio I said you want to set up a new column okay for Iris and I'm going to call it seel ratio and I'm just going to assign that value there those values there okay so I'm just going to add it into the um data frame okay and all I have to do is just specify the new name and it just gets tagged on at the end again this is deceptively simple it's actually just take it in how quick it easy it is just add in a new column into a pandas data frame so let's run that and let's just have a look at how it turns out there we are now it's actually at the end and what I'll do later on or actually I've done this in a different presentation actually I'll s of leave it but it's actually how you might reorder it there I've given the um I can't call it the series P sapple dot ratio but I can give the column name that name because it sort of fits with the previous variables in the um data frame and by the way the just as a remark that Doh is just sort of it it it it was doesn't really mean anything in the context of it's just a dot just to make it easier to read basically in the column name you can do this another way you can do this uh by you don't have to go to all that length of adding in this sort of temporary variable so you can actually do it directly Iris petal ratio just doing the same thing again so we're just skipping the middleman of this uh series that is just we add in we just add it in directly uh so it's just essentially uh we have this column here and this column here divide one by the other and just assign the values to this new column for Iris SE and that's it really so it's quicker again just we use the existing VAR uh columns and let's have a look at iris again let's write down here at the bottom just let's here at the end petle ratio there we are simple ratio tle ratio all right that is the end of this presentation 10 minutes is good I'll run okay bye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Pandas DataFrames for Data Analysis",
        "Video Title":"Python for Data Analysis: Pandas Data Frames",
        "URL":"https:\/\/www.youtube.com\/watch?v=Dp7mmXLfzD8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Dp7mmXLfzD8\/hqdefault.jpg",
        "ID":"Dp7mmXLfzD8",
        "Publish Time":"2020-07-17T20:57:46Z",
        "Channel":"DataDaft",
        "Channel ID":"UCwuvoN0QKjrXUi48G_Hv7kQ",
        "Transcript":"hello everyone in this lesson we're going to learn about pandas dataframes which are a two dimensional data structure in the pandas package for python that allow you to work with heterogeneous data types now although this lesson is focused on data frames we're actually going to start by learning about pandas series which are a one-dimensional data object in pandas that are used to build up to the data frames which are two-dimensional objects so to start off with to create our first series we're going to start by importing the two libraries we need we're going to import numpy again so we're gonna say import numpy is NP and then we're also going to import the pandas library which includes this series and the data frame objects so to do that we're gonna say import pandas and then we're gonna say as PD so importing pandas as PD will just allow us to access pandas and all of its functions using this nickname instead of having to write the whole thing pandas and pretty much everybody does this so it's just good to get used to importing these two packages using these two nicknames now a pandas series is very similar to the numpy arrays we learned about in the previous lesson the main difference being that with a panda series you can also define indices of a given label for each of the index positions in the series so instead of having to access items in a pandas series using numerical indexing you can actually assign them labels they're gonna access items using those labels so here we're going to show how to make a series we're gonna say my series and set it equal to this function call so we want to call the pandas library so PD dot series is the function and then you just pass in a list of the data that you want to turn into the series so our data is just going to be a few numbers here and you also pass in the labels you want to associate with the indices for each of the values so for that you pass index equals and then a list of those indices so we're going to just label them a through D and when we run this we see we have successfully created a series with the indices we specified and their corresponding values now you can alternatively create a series using a dictionary to specify both the data values and the indices at the same time so to do that we will define a new dictionary and the keys in the dictionary will be the index values and then the values in the dictionary will end up laying the data values in the series so if we define this new dictionary here with some values in it and then we pass that dictionary to PD Det series it will convert this into a series object where the keys will be extracted into indices and the values into the values and similar to a dictionary then we can access values using the Associated labels that we assign to them so for instance if we wanted to see the value associated with the index a we can just pass in a into the indexer into the series instead of having to know exactly what the numerical index is but if we did know the numerical index we could use that too so we assigned a to the first value so we can access the first element by using the 0th index so this will also give us the value 2 there but this gives us different options for accessing elements if you take a slice of a series you'll actually get both the values and labels contained in the slice so here we're going to slice two values of my series and you can see we return both the values but also the Associated index labels and if you perform mathematical operations on series it will perform them element wise based on the labels assigned to each element so for instance if we add my series to itself it will use the indexes we gave to align which elements to add to which elements so if we do that it will essentially add a to a B to B C to C D to D essentially doubling each of those values now if you try to perform a math operation like this on the series with mismatched labels you will end up introducing Nan's into your data wherever the labels can't be matched nan stands for not so show that will add my series to the my series to above and they didn't have the same index labels so when we perform that the ones that can be matched will be matched and the math will perform successfully so both my series and my series two had a B and C as indexes that were defined but they don't have the index D and X in common D was only in my series 1 and X was only in my series 2 so since those could not be matched based on the indices the return value of that operation for those indices is not a number other than this index labeling series behave much like arrays in numpy and in fact many of the numpy array functions we learned about in the previous lesson will work on a series as well such as mean so for instance we could say n P dot mean numpy that mean and run it on my series well this is a panda's series not numpy array but it will still work on that because a lot of the functions in pandas are built up using things from numpy now that we know the basics of pandas series we'll start learning about pandas dataframes now a data frame is a 2-dimensional table with labeled columns that can each hold different types of data data frames are essentially a Python implementation of the types of tables you'd see in an excel workbook or sequel database pandas dataframes are the de facto standard data structure for working with tabular data in python so we'll be using them throughout the remainder of this guide you can create data frames using a variety of different data sources including Python dictionaries two-dimensional numpy arrays and series using the PD data frame function so we'll show how to do that below so here we're going to create a new panda's data frame and we're going to do this with a dictionary in this case so first we're going to define a dictionary that's going to contain all the information needed to make the data frame so when you're making a data frame out of addiction arrey he's become the names of the columns in the data frame and then the values associated with the keys become the data that populates those columns so since the values of the dictionary populate the data in the columns you'll generally want to be passing in sequence data structures that hold multiple values because usually your table is going to have several rows that have different records so for instance this dictionary we're creating is going to create three rows that means for every single column we pass in we're going to need three data values and you can pass in different sequence data structures to accomplish this so for the name column we're going to pass in a list of three different names for age we're gonna pass in an umpire array of three different age values for weight we'll pass in a tuple of three different values for height or passing in a panda's series of three different values that are labeled and actually for these other two values siblings and gender we're not even passing in a sequence data structure we're passing in single values so here we're gonna say siblings 1 and gender is just a string and we'll see what happens when we create the data frame so we're gonna take this dictionary and then to make the data frame from it we'll say P D data frame and just run it on the dictionary and that will convert it into a data frame called DF and then we'll just type DF here to show what the data frame looks like so let's run this and see what we get so you can see we've constructed a data frame that is essentially a two-dimensional table and all of the sequential data structures we passed in were successfully converted into columns so even though there were different types a list an umpire a a pandas series and what was the other one a tuple all four of those different sequence data structures are suitable for being passed in and turned into columns and in the case where we only passed in a single value you can see here that it still actually worked and what it does is it just fills the entire column with that one value so even though we only passed in one here it just said well I'll fill the whole column with one and for the gender column we just passed in the string em and it was like alright we'll just fill the whole column with Em's and note that the columns were extracted directly from the keys in the dictionary so we knew that was going to happen but also notice that there is a index column on this side Jo Bob and Fran's that is different than the names column this is actually a row index and we didn't specifically supply a row index when we made the data frame what happened here is that one of our data columns was a panda's series and that series had it as index specified so when we made the pandas dataframe it knew that there was this index here so it used that as the row index for the data frame if we didn't construct this data frame with a pandas series that already had an index it would just have simply used numbers as the index so we'll show what that would look like below we're gonna create a new dictionary that's the same thing as above except we're going to use a list for height instead of the pandas series that had indices and when we run that we'll just see that it's the same data frame pretty much except these indices now are just numbers instead of the named ones that we had before so if you want to provide custom row labels at the time of creating a data frame because perhaps you're not making it from an existing panda series like that you can do that when you construct a data frame so I'll say PD data frame again and pass in the data but we'll supply an additional argument comma index equals and then you can pass in a sequence of different labels you want to use for the rows in this case we're going to set it equal to the names column so the same thing we did before essentially now a data frame will behave like a dictionary of pandas series objects that each have the same length and indices this means we can get add and delete columns from a data frame the same way we would when dealing with a standard Python dictionary for instance if we want to see the weight column of the data frame we can just say the name of the data frame and index into weight and that will give us the data in that column alternatively you can also access columns in pandas using dot notation so instead of having to do this standard Python indexing where you use the square brackets and then pass something in you can just do this the name of the data frame dot and then the name of the column so in this case we'll see weight again so we'll say DF 2 dot weight now we'll do the exact same thing this is just kind of a quicker shorthand way of doing it so if we wanted to delete a column we can use the normal dictionary deletion for that so we could say del and then just specify the data frame and the column we want to get rid of and you can also add new columns in the same way you would add new objects to a dictionary just by specifying the name of the data frame passing in the name of the new column you want to as a string inside of the indexer and then pass in the data you want to store of course since this is a two dimensional object as a data frame you want to pass in data that is the same length as the other data objects in the data frame so we know that our data frame has three rows so when we add this new IQ column we want to make sure we pass in three values so that it matches the current size of the data if you don't pass something in that matches the number of rows in the data set you'll just fill the rows with that value kind of like when we created it when we only passed in the number one or M for the gender so for instance if we wanted to make a new column called married and we only just passed in false instead of a list of say different values it'll just fill that whole column with falses now if you insert a panda's series into an existing data frame it will be matched up based on indices and then any indices that are unmatched will be left with not a number values you can index into both rows and columns by name using DF lock so show how to do that we're gonna say our data frame here DF 2 dot lock and if we only pass in one thing that will get us the row associated with that index say we're going to get the row Jo but if we say passed in two different we can get both a specific row and column so we say DF 2 dot Lok Joe and then comma IQ that's saying we want the values in the row Joe and the column IQ so this will get one specific value when we run that you can also take slices actually across indices using : similar to what you can do with numerical indices in Python so if we said DF 2 dot lock and we did a slice from Joe to Bob well we get all the values in that range depending on how the data structure was created in this case Joe and Bob are right next to each other so we'll get these two rows and then we're going to slice comma the columns IQ to college so that will slice us these three columns so when we run that we should get these three columns just for Joe and Bob so we'll run that and see that that is the result so this dot lock way of accessing data in a panda's data frame is label based indexing so here are passing in row and column labels if you want to access rows and columns instead by index values or integers you can do that too you just need to use a lock instead of lock so we'll show an example of that so here instead of passing in an actual label we can just say DF - dot I lock and then get whatever row is that in X position 0 in this case we know it's labeled and it's Bob but we may have a panda's data frame that was never assigned a label and then we would have to get rows using this sort of numerical indexing now you can also select rows by passing in a sequence of true\/false values this is known as a logical index and it will get all the rows where the value is true so here if we make a boolean or logical index of false true true well that's going to get us back everything other than the first row because the first row or 0th row is false so it's not going to get that but the other two rows are true so we run that we see we get Bob and Franz there this sort of logical indexing is extremely useful you'll be using this all the time in your data science and data analytics career so it's good to get used to doing this because you can use it with comparisons and that allows you to subset your data frames in different ways based on the results of those comparisons so it's a very helpful way of accessing data that conforms to some specific constraints so we'll give an example of that here we're going to in this case create a new boolean index but instead of just specifying things ourselves it's going to be the result of a logical check so our boolean index here is going to be equal to our data frames age column and whether that the values there are greater than 12 so basically this is creating a sequence of true\/false values where every value corresponds to whether the age for that record is greater than 12 and if we use that index to index back into the data frame this will extract each row where that person's age is greater than 12 now note that you can do this sort of logical indexing all in one fell swoop without first assigning a boolean index like this so we could have just done this instead of assigning the boolean index first we could just say passed this entire logical construction right into the indexer for the data frame and that will produce the same result it's just kind of a quicker way of doing it without having to go through that extra step now we will wrap up this lesson by going through some different ways of exploring data frames so oftentimes when you get a data frame in Python it's not going to be some data set you created yourself with in Python it will be something that you're loading in from an external source such as an excel file or a comma separated values file of some kind and it's maybe data you've never seen before and you need to explore it to figure out what's even in the data set so we're just going to go through some examples of how you might do that so to start with we're going to load in a new data set this is going to be the Titanic competition data set on Cagle it's essentially just records of the Titanic disaster and we're going to be using this data set as a motivating example for this lesson and several lessons in the future where we're going to be doing prediction on whether passengers survived or perished in the Titanic disaster but for this one we're just going to be looking at the data so we'll start by storing our data Titanic train this is something you don't really need to know right now in fact in the next lesson we're going to be going over reading and writing data into Python so we'll be learning much more about this and other functions similar to this in the next lesson and we'll just read that in and check the type and you can see that it has been read in as a panda's data frame now good first thing to do after you read some data in is get a sense of how big it is and you can do that with the dot shape attribute of a data frame so to do that you just type the name of the data frame and then say dot shape and that will show you the dimensions this is just like the numpy dot shape that you can do with two-dimensional or multi-dimensional numpy arrays so here we see that the data has 891 rows and twelve columns now you can check the first few rows of a data frame using dot head and then you can specify how many rows you want to see so here we're going to check the first six rows of the data frame by saying Titanic train dot head six that will show us the first six rows which should give us some idea of what the data looks like here now just like dot head you can also check rows at the end of a data frame with dot tail so if we say the name of the data frame dot tail six we'll get the last six rows you'll notice that in our data frame the rows do not have labels they just have integers as the labels because no labels were specified we could create new index if we wanted to using one of the columns so we'll show how to do that here we're going to take the name call in the names of the passengers and turn that into the row index names so to set the indices for the rows you can use dot index to do that so we're going to set the data frame dot index equal to name column Titanic train name and then we're going to delete that column and now if we print out say the first ten values the row indices they will be the names that were in the name column if you want to access the names of the columns you can use the dot columns attribute of the data frame so here if we say Titanic train columns they'll just show us what all the column labels are now one very useful function to run on a data frame in pandas is the dot describe function this will show summary statistics of the various columns it's going to be a good way to get some idea of the shape of the data as you have numeric columns so it'll give you information like the minimum and maximum values the mean and median which just gives you an idea of the distribution of the values you're going to see so we'll do Titanic train describe and see the summary statistics we get you can see that the columns that are not numeric are not included in described so all of those were removed and only the numeric columns were kept but now we can see for all the numeric columns some various summary statistics now since the columns of pandas dataframes our series and series are closely related to numpy x' arrays many of the functions for numpy arrays actually work directly on data frames and will operate on the columns of those data frames if you set axis equal to zero so in this case we can say NP mean that gets us the mean of our data frame and we'll say comma axis equals zero that means operate along the columns so this is a quick way for instance we can get the average of every single column one final very useful function you can use on data frames to get a general sense of their overall structure is dot info so here we're going to say titanic train dot info and when we run this it shows us a whole bunch of different information about the data frame for instance it shows us how many entries there are how many columns there are it provides a list of the columns how many entries they have and what types of objects are in the columns a summary of the different data types that are in the data frame and also shows how much memory the data frame is using up this introduction only scratches the surface of the different types of operations you can do with pandas dataframes will be learning many more in future lessons but this is enough for us to get started so now that we have many of the tools we need in order to store data we need to learn how to actually gain access to data and read it into our Python environment so in the next lesson we're going to learn how to read and write data with Python with a focus on doing it with pandas dataframes if you found this video useful consider dropping a like or subscribing and I will see you again next time you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Reading and Writing Data with Python",
        "Video Title":"Python Tutorial: File Objects - Reading and Writing to Files",
        "URL":"https:\/\/www.youtube.com\/watch?v=Uh2ebFW8OYM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Uh2ebFW8OYM\/hqdefault.jpg",
        "ID":"Uh2ebFW8OYM",
        "Publish Time":"2016-04-29T16:00:03Z",
        "Channel":"Corey Schafer",
        "Channel ID":"UCCezIgC97PvUuR4_gbFUs5g",
        "Transcript":"hey there how's it going everybody in this video we'll be learning how to work with file objects in Python and some of the useful things that we can do with these objects so whether you use Python for desktop or web applications you're likely going to be interacting with files a good bit so it's definitely a good skill to have to know how to properly interact with these file objects okay so let's go ahead and dive in so to get a file object we can use the built-in open command so I have a file here called test.txt in the same directory as my python file now if I open this file we can see that it's just a plain text file with multiple lines so let's see how we can open and read this file from within python now the way I'm going to open up the file right now isn't the way that it's normally recommended uh it's usually recommended to use a context manager which I'll show you here in just a second but to show you why a context manager is useful let me first show you this method for opening files first so what we're going to do here is we're going to say f equals open and we're just going to open that test.txt file now if you're working with files from different directories then you're going to have to pass the path to that file into the open command but since this file is within the same directory as my python file then I can just pass in the name of the file uh but if you want to learn more about how paths work then we uh touch on that a little bit in the tutorial I did on the OS module okay so the open command here allows us to specify whether we want to open this file for reading writing appending or reading and writing now if we don't specify anything then it defaults to opening the file for reading but I usually like to be explicit here so let's go ahead and say that we want to open this file for reading and we can do this by passing in a second argument here and that's just going to be the string of a lower case r and we'll touch on some of these later but if I wanted to write to a file then it would just be a lowercase w that I'd pass in uh appending to a file is a lowercase a and if I wanted to read and write to a file then I could do an R plus but for now we just want to read the contents of the file so let's just pass in a lowercase R okay so now the file is actually open and we can print the name of the file if I was to do a printf. name and also before I run this and print the name of the file out there's one more thing that we have to do here if we open a file like we just did here then we need to explicitly close the file when we're done using it and to do this I'm going to do it by saying f. close so now that we've closed that file let's go ahead and run this and you can see that it printed out the name of the file that we opened and so this has some more information that we can print out also if we wanted to print the mode that the file is currently opened with I can do a f. mode and if I run that you can see it prints out a lowercase R because we open the file for reading okay so now even though that this works the way that we've just now done this let me show you how to instead open the file using a context manager and why for most use cases you'll want to work with files this way so if we open the file like we did here then we have to remember to explicitly close the file if we don't close the file then you can end up with leaks that cause you to run over the maximum allowed file descriptors on your system and your applications could throw an error so it's always important to make sure that you close the files that you open so in order to use a context manager then it's kind of similar but we can do this using the with keyword so we can say with then I'm just going to copy all of this so with open test.txt in read mode and then here at the end I'm going to say as F and then I'm going to put in a opening for our block here now this can be a little confusing to people at first because the variable name is actually over here on the right using as F instead of over on the left when we said f equals open but the benefit of these context managers is that they allow us to work with files from within this block and after we exit that block of code it'll automatically close the file for us so we don't have to worry about whether or not we add in these closes here now this will also close the file if there any exceptions that are thrown or anything like that so that's why using these context managers are considered a best practice and it just automatically takes care of all that cleanup for us so now I'm going to go ahead and delete my outside uh open and close statements there now one thing that some people don't realize is that you actually have access to this F variable for now I'm just going to say pass within this context manager now we actually have access to this file object variable after after we exit the context manager but the file will just be closed so for example if I print the closed method on F now and run that you can say that it you can see that it returns true but even though that we have access to this variable here uh it is closed so it's not like we can read from it like if I try to read the contents from the file and print that out then you can see that it throws a value error here and it says IO operation on a closed file so for what we we're going to have to work with this file from within this context manager and for the rest of the video I'll be using these context managers to work with files since it's a good practice but I wanted to show you the other way first in case you see it in examples or wondered why I wasn't doing it that way okay so back to our file so we just tried to read the contents from the closed file and got our error but let's look at how we can read the contents from the file from here within our context manager so let's create a variable called fcor contents and this will just hold the contents of our file now if we do an f. read and if I print this out oh and actually I need to actually print out that fcor contents so if I save that and print that out then you can see that it printed out all of the contents of our file now if you have a small file then this is probably what you want uh but what if we have an extremely large file that we want to read but you don't want to load all of the contents of that file into memory well there are a couple of other methods here that we have available for reading file contents instead of f. read so just to look at a couple of those I could say f. read lines and if I print this out then you can see that we get a list of all of the lines in the file and it looks a little weird because we have our new line characters in there but if we look through this list then it actually gets every line of the file at a different element of that list now instead of f. read lines I could do f. readline and if I save that and run it then you can see that read line grabbed the first line of our file now every time that we run f. read line it gets the next line in our file so if I was to copy all of this and then do it again and run that now you can see that it got the first and the second lines from the file now this printed out a little weird here because the print statement uh ends with a new line by default but if I go up here and pass in an empty string to the end of our print statements then it will no longer add in that extra new line and now you can see that those are the way that they are in the file okay but we still haven't solved our problem of how we can read all of the content from an extremely large file if we read the entire file in all at once then we could run out of memory and we don't want go through and do f. readline you know thousands of times so what we're going to do here is instead of using readline or read lines we can simply iterate over the lines in a file by saying for oh let me go to a new line here for line in F and then from here we can just print that line so I'm going to copy that and save that so now let me go ahead and comment out these lines and run this iteration over the lines and you can see that it printed out all of the lines in our file now this is efficient because it's not reading in all of the contents from our file all at once so it's not a memory issue that we have to worry about what it's going to do is it's just going to go through and get one line at a time from the file now this is usually good enough for most people but sometimes you may want more control over exactly what you're reading from the file now if we go back I'm going to go ahead and delete this line if we go back to our f. read line here and I'm going to get rid of that one now I'm going to go back to using f. read and if you remember this read in the entire contents of the file so if I run that you can see that we got the exact same thing but with f. read we can actually specify the amount of data that we want to read at a time by passing in the size as an argument so if I pass in a one 100 to our read method and then print this out you can see that it printed out the first 100 characters of our file instead of printing the whole thing all at once now if I was to copy this and run this again then you can see that it printed out the rest of the file because it picked up where it left off and read 100 more characters of the file now when we reach the end of the file then read will just return an empty string so if I was to copy this for a third time and rerun this then you can see that nothing happens because what happens when we reach the end of the file read just returns an empty string so this print statement is just printing out an empty string okay so how are we going to use this technique in order to read in a large file um so since we don't know exactly how long the file will be we're going to have to use some kind of loop that just iterates over small chunks at a time uh so instead of hardcoding in 100 here I'm going to create a variable here called size to read and for now we'll just go ahead and set that equal to 100 so now instead of passing in 100 to f. read let's just pass in this size to read okay so this will grab the first 100 characters of our file now remember when we hit the end of the file then read will just return an empty string so if we do a a while loop and say while the length of f contents is greater than zero then we will print out the contents that we got from read now don't run it like this yet because this will be an infinite loop we're never advancing the contents of the file after it prints the contents then we want to read in the next chunk of characters so in order to do that then we just have to again say F contents equals f. read of that sized chunk now what it's going to do after this line here is that it's going to kick us back out to the while loop and it will check if we've hit the end of the file because f. read will return an empty string and it won't meet this conditional so now if I go ahead and run this then you can see that it printed out all of the contents of our file so to get a better idea of what's going on here let's change the size to read to 10 characters instead of 100 characters and every time that we print out f. contents here instead of an empty string uh let's make this an asteris so now if I print this out then you can see it's a little bit more clear That We're looping through 10 characters at a time and it's printing out these asteris through every Loop so you can see that it came through the loop here and it printed out these and then the asteris that we know that it's just that chunk then it printed out the next 10 characters and then the next 10 characters and so on until we got to the end of the file now when we read from files you can see that it advances its position every time so we can actually see the current position using F.T so what I'm going to do is I'm going to comment out this while loop here and down here I'm going to say print and we'll print out F.T so if I go ahead and run that you can see the F.T returned 10 so it's saying that we're currently at the 10th position of the in the file and that's because we've already read in 10 characters here and we can manipulate our current position using the seek method so to show an example of this uh let me print the first 20 characters of the file by running f. read twice so I'm going to go ahead and print out the contents after the first 10 characters there and then I'm going to do this a second time to get the next 10 characters and I'm going to go ahead and take out this second uh empty string there so that it pushes our finished statement out of the way so now actually let me get rid of F.T here and go ahead and run this so we can see that it printed out the first 20 characters of our file now when we read in this second chunk here it picked up at the 10th position and read in the next 10 characters like we would expect but what if I wanted that second read to instead start back at the beginning of the file and we can do this with f. seek so between these two reads if I was to do an f. seek of zero and save that and ran it now you can see that it set our position back to the beginning of the file so the second time we read in our contents it starts back at the beginning instead of picking up where we left off after the first read now we used seek zero to start at the beginning of the file but you can use it to change the position to any location that you'd like okay so now let's take a look at writing to files and a lot of this will be similar to reading so first of all what happens if we try to write from within a file that we have opened in read mode so let's let's go ahead and try that so I'll do an f. write and I'll just do an f. write of test I'm going to go ahead and get rid of that while loop also and save that so you see when I have a file open in read mode and try to write that we get an error that says that this is not writable so we have to have the file open in write mode so now back up here within our open statement let's create a new file called test2.txt and and instead of reading we are going to write to it now in order to do that we can just say a lowercase w instead of that lowercase R now you can see over here in our directory that we don't have a test2.txt yet now if the file doesn't exist already then this will go ahead and create it now if the file does exist then it will overwrite it so be careful if you're writing to a file that already exists now if you don't want to overwrite a file then you can use a lowercase a for a pending to the file but we're going to go ahead and overwrite this file if it exists so first of all instead of writing to this file I'm just going to go ahead and put in a past statement here which basically says don't do anything so I'm going to go ahead and run this and you can see that it created test2.txt so I didn't actually have to write anything to the file in order to create it just using the open with the right mode we'll create the file so now in order to write to this file then we can just do what we did before we can do an f.r test.txt so I'm going to go ahead and run that now if we go over here to test2.txt then you can see that it wrote test to our file now if I go back here and do another write to this file then it's going to pick up where we left off just like the read method did so now if I run this and go back to the file then you can see that it wrote test twice back to back now you can actually use seek when writing files also to set the position back to the beginning of the file and we can do this if I go back here between these two WR statements and I was to do an f. seek of zero now if I run this then you can see that the second test overwrote the first one so seek can get a little confusing for file WR because it doesn't overwrite everything only what it needs to overwrite so for example if instead of writing the same thing twice if I was to do an f. seek at the beginning and write out an r as my second one there and now if I run that and go back to the file then you can see that the r only overwrote the T in test it didn't delete the rest of the content so using file seek whenever I am writing to files it can get a little confusing and I don't use it a whole lot uh but maybe there are some use cases out there that you guys will find it uh useful for okay so let's go ahead and pull all of this together and use read and write on multiple files at the same time so we're going to use this to make a copy of our test.txt file um so let's go ahead and delete our test 2.txt file here so that we don't confuse the two and I'm going to go ahead and close that there okay so I'm going to go ahead and get rid of these here so first let's open our original test.txt file in a read mode and instead of f here I'm going to use RF and I'll just say RF there for read file since this is the file that we're going to read from in order to write to our copy so now within this width statement here I'm going to go ahead and let's go ahead and copy all of this and paste another uh open within here and I'm going to call this a testore copy. txt and I'm going to open this in write mode and I'm going to call this WF for WR file now you can actually put both of these open statements on a single line separated by a comma but I think readability here is pretty important and mixing those two on one line is sometimes difficult to understand at least for me uh so this is usually how I work with multiple files at a time is putting them on two different lines um one nested Within in the other okay so now within here we have two files open RF for reading our original file and WF for writing to our copy now to do this it's just as easy as saying for line in RF we want to do a WF do write of that line okay so now let's walk over this one more time so we have our original file opened and we're reading from from that file and we have a file that doesn't exist yet that's our copy and we're writing to that file and we're saying for each line in our original file write that line to WF which is the file that we are copying to so if I go ahead and run that then you can see that it created this test copy. text file and if I open this you can see that it is an exact copy of our original okay and lastly let's look at how we can do something similar and copy a large picture file now this is going to be slightly different so if I look in my current directory that has my python script that I'm currently running I also have a picture of my dog here when he was a puppy and let's go ahead and try to copy this picture file using file objects in Python now this file here is called bronx. JPEG and if I just try to replace our text files with um these picture files and down here I'll call this Bronx copy. jpeg now this is exactly the same as our previous example but we're trying to use a picture instead of a text file now if I try to run this you can see that we got an error down here that says uh UTF codec can't decode bite in position zero so in order to work with images we're going to have to open these files in binary mode and all that means is that we're going to be reading and writing bytes instead of working with text now I'm not going to go into the specifics but if anyone is curious about the differences then I'll try to leave some resources in the description section as to what exactly that means but for this case in order to work with these pictures to use binary mode we can just append a b to our read uh R here and our write w there so now with that one simple change if I save that and now run it then you can see that we do have this copied picture file here and if I go over to finder then you can see that that file um copied exactly the way that the original is okay so last thing here now I said earlier that sometimes you want more control over exactly what you're reading and writing so instead of doing this line by line let's instead uh do this in specific chunk sizes and we saw something like this earlier when we were learning how to read our files so to do this let's just do a chunk size and we'll set this equal to 496 now you can choose different sizes but this is the one that I'm choosing here um so now let's do an RF chunk and we're just going to read in a chunk of our read file here so I'll say rf. read and I'll pass in this chunk size so now we're reading that much data from our original picture so now let's create a loop that will write these chunks to our copy until there's nothing left to read from the original and if you remember from earlier to do this we can do a while loop and while the length of this chunk here is greater than zero then we want to take our copy file and write that chunk to it so I'm going to write this chunk to our copy and then to keep this from being an infinite loop I have to read in the next chunk size so I'll paste that in there to read in uh the next Chunk from the original file so now if I come up here and I delete this copy that we just created so I'm going to delete that and now I'm going to go ahead and rerun it using the code that we just wrote and you can see that it made that copy there and if I go back over to finder and open up that copy then you can see that it made an exact copy of our original original okay so I think that's going to do it for this video uh there's a lot more that we could look at with files and I'll plan on putting together some tutorials in the near future for how to work with uh temporary files inmemory files and things like that but I hope that this was a good introduction into working with files and some of the useful things that we can do with them now if you do have any questions then feel free to ask in the comment section below and I'll do my best to answer those uh be sure to subscribe for future videos and thank you all for watching"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Reading and Writing Data with Python",
        "Video Title":"Python Tutorial - 13. Reading\/Writing Files",
        "URL":"https:\/\/www.youtube.com\/watch?v=YgI94IRXySk",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/YgI94IRXySk\/hqdefault.jpg",
        "ID":"YgI94IRXySk",
        "Publish Time":"2016-02-07T18:59:24Z",
        "Channel":"codebasics",
        "Channel ID":"UCh9nVJoWXmFb7sLApWGcLPQ",
        "Transcript":"hello everyone welcome to another session of code Basics coding tutorial today's topic is reading and writing to a file and here is the list of items we are covering in this video okay let's begin with creating a new file and writing some content to it as you can see here I have C data directory which is completely empty I do not have any file what I want to do is create a new file called funny txt and write some statement into it for that you use open statement open will open a new file either for reading or writing the first parameter in this uh open function is the complete path of the file name so I'm using C column SL SL data\/ funny. txt now why am I using two slashes here if I don't use two slash and just one slash then that has a special meaning and it won't work right so that's why I need to use two slashes here whenever I'm specifying the path of the file name okay so the first parameter is the file name and the second parameter is the mode in which you want to open the file I want to write the file so that's why I'm using W which means write now let's write something into it this has us this uh file handle has a function call right where I can say okay I love Python and once you done writing to it you should close it closing uh file will free up all the resources that operating system is going to allocate uh for this file all right let's run it okay so looks like it executed F fine and now if I look at my C data directory I'm seeing this file now funny. txt if I open it I will see I love python excellent okay now let me write uh some different lines so instead of python I'm saying JavaScript if I execute it again and open this then I see I love JavaScript but one thing you noticed here is it overwrote the previous content I previously had iow Python and now I have iow JavaScript what if I don't want to overwrite the file and just appen the content do it for that you need to use a different Mode called appan so just remember whenever you say w mode it will always overwrite the file so you need to say a means appen and now as you see I have I love JavaScript and I'm just going to use some different statement here and I say I love C++ and I run it see what happens so it had IO JavaScript now it appended iow C++ now this was in the same line if you want to append it in a new line then you need to use SL n character which is a new line character and you can say I love PHP when you run it um if I open it again you will notice now I have I love PHP in a new line okay now let's see how you can work on uh reading a file uh line by line all right for this we're going to uh work on a simple problem where your funny. txt so I'm going to open funny. txt erase all the content and I'm going to put this funny dialogue here okay you can take a moment and read it it's quite funny all right so what I want my Python program to do is read this file and for each of the line I want to count the number of words and towards the end it should append the word count and what I want is I want to create a new file so let me first save it okay my Python program will run on this file it will create a new file with a word count at the end of each line okay so first let me open this file in reading mode so if you want to read the file the mode that you specify is R okay and if you want to Now read the lines one by one first first let me show you how I can uh read the entire file content in one shot all right so when I say print f. read and you always do f. close let me run it cool you can see in the output that it read the whole file and it just printed the contents here so f. rate gives you the entire file content now this is not what I what I want because I want to count number of words in each line so I want to go through this file line by line for this you have to use four Loop when you say for line in F this will iterate through file one by one and every time line will have one specific line from that file okay so let me first print it just to show you that I'm not lying it is working as per what I just mentioned F do close let me run this again when I run it again again now you see every time it is reading one line if you want to count uh the number of words in this line now now what you have to do is uh say you have this file how do you count number of words words are basically separated by spaces like these okay so if you can somehow detect these spaces then you will be able to figure out number of words in Python there is a function on a string called split So when you say line do split what you're doing is you have a string and you are splitting the that string using this separator so I'm using space as a separator and when I do that it will give me list of tokens tokens is nothing but the list of words okay um let me just print those tokens here so I will say St Str tokens you notice what just happened I went through each line one by one and for every line I split it using space what that gives me is a list of words which is an array when I print it you see that this array right now all you have to do is now you have an array with list of words all you have to do do is just uh take the count and how do you take the count you use Lan command so L okay when I run it voila I get the word count now what I want to do is I want to open another file called fcor out and I will use the same path and I will say Okay I want want to name this file as funcore WC which means word count and open it in a right mode so that you can write to it okay and here you will say f. out. write so when you want when you say write it is going to write a new line into this new file now what do we want to write here we want to write the original line as well as the word count so my original line is line okay and when you want to append to a string you can use plus operator plus operator is going to just happen to that string so I will say word count and what is my word count St Str of L of tokens okay alien tokens will give you the word count and you want to convert it to a string so that you can append it to another Str and you can just remove this one and once everything is done you want to close the handle for the output file as well okay let's run it okay so looks like it finished successfully now let's look at our C data directory excellent now I see a new file called funny uncore word count.txt when I open this h i see a little problem okay so it printed word count but it was in a new line because I think we had let's see [Music] line okay we had I see so we had uh Slash n so that's why it towards the end and that's why it printed word count in the next line what we can do is we can we can print word code at the beginning of the line and for doing that just happen uh this line towards the end okay let's run it again okay it executed fine now let me open funny work count when I open it what I see is this okay so word count six so this line has six words 1 2 3 4 5 6 that's why word count is six and so on okay so that was a real fun exercise um now let's talk about file opening modes a little more uh we we already covered few mod such as read which is used for reading the file only if you open a file in read mode you cannot write to it similarly if you open a file in a right mode you cannot read you cannot read it so if you want to open a file uh both for reading and writing then you use r+ so that will open a file for reading as well as writing uh similarly if you use w+ then that will also open file for reading and writing then what's the difference between the two here the difference is if you open file like this and if let's say this file doesn't exist on your hard disk it will create the file versus in this mode it will not create the file uh if the file doesn't exist so that's a difference otherwise they both both the modes are pretty much same and the next mode that we cover was a which is append mode where you can uh appen to an existing file there are other file modes as well uh if you just Google it uh it will the P python documentation page will show you all the different modes one last thing we want to cover is a with statement here you saw that you have to explicitly open and close the file if you don't want to close the file uh explicitly cuz sometimes if you're writing a big program you may forget that and that's not good uh so for that if you want to avoid this kind of situation you use uh width statement so I will use withd statement so you'll say width open C data funny. txt for for reading mode as F when you do this it will do the same thing except that you don't have to now close the file I will say f. read okay now how do I know if file gets closed automatically with with statement you can print f. closed flag this f. closed Flags flag tells you whether the file is open or closed okay let me run it okay I'm seeing some error here oh I see I forgot one SL that's why okay so first thing what it did is f. R printed this much output which is just the file content and the second thing is here it is saying true meaning f. closed is true meaning with statement automatically close this file okay so that was all about files thanks for watching and don't forget to work on these sample exercises [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Reading and Writing Data with Python",
        "Video Title":"READING &amp; WRITING DATA INTO FILES - PYTHON PROGRAMMING",
        "URL":"https:\/\/www.youtube.com\/watch?v=FqcjKewJTQ0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/FqcjKewJTQ0\/hqdefault.jpg",
        "ID":"FqcjKewJTQ0",
        "Publish Time":"2018-10-19T03:30:01Z",
        "Channel":"Sundeep Saradhi Kanthety",
        "Channel ID":"UC63URkuUvnugRBeTNqmToKg",
        "Transcript":"[Music] hello friends welcome back to our channel so in the previous session we have seen the files concept so how to open a file how to create a file and how what are the different access modes and then we have seen how to close em right so in that we have seen the access mode the majorly three access modes that is a very light and a pen so we can open any file in any one of these access to modes now let us see in this session the reading and writing operations or files right so for reading oppression a file should be opening read more I do operation a fine should be opened in in the right mode or a bit more so in the right mode if I exist content will be overridden so all the previous and they will do overrated fine doesn't exist new file will be key so in this whole same you define exist point the point set end of content even the fine doesn't exist new file will be created so the file can be created in Foods in is a writer effect so after opening the file then we have to perform the reading and writing operations let us see the reading operation or first we will see the writing writing operation so there are two methods what is right and what is right lines my function right lines function right so the very self indicates this right function we write a single line however as write lines function will write the multiple lines see the syntax is so before going to implement these two write lines or write function we have to open the file I will see in the syntax in the previous session five object is equal to open some ABC the txt and in I write more so if you want to write this I mean if you want to write the content into a file how to implement this one by using the file pointer f1 dot right and this will take one argument that is the string so whatever we want to write into the file that should be written as an argument right so a sequel written string it will write the string in their file so stinking seas of alphabets numbers symbols and everything will be comes under this chain right so anything can be retained into a file as a ultimate so I have to pass it an ultimate see example first I will write I will open a file F open it we see dot txt right next f1 dot right so we can we have to write the string directly welcome to so automatically this content will be returning to ABC dot so this is the first I mean in order to write the content of one way so it will not consider the newline character so as if you want to write multiple lines go with this so here also we have to implement this by using the file pointer so high times you have for not write lines so here let us see the example see see yep was not write wines give the list of lives so first of all we have to write the lines in a list and the list should be positive powers as an argument all right let's see example f1 is equal to open UPC dot txt write more next - is equal to and creating a list hello meltem turtle do breathing so here I have written three elements as a strings and these three elements are a list called blends so should we pass these lines to the right man now get right F was not right hands off so this will automatically write all these three lifelines I hope you understood this one okay so these are the two feathers to write the data into a file now let us see the reading operations here similar to the right function the range operations are also three pets and we have to implement this reading operation by means of this five point so first of all in order to read the content of your file we have go over the file in read more so first one is Li function so we have the implement F 1.3 here the ultimate is build positions the 100 it will take it will take it bit positions as an argument so here whatever the bits you have mentioned those bits will be displayed on the screen for example the next is hello welcome and if you are trying to read fine f1 dot read file so this is the content available in yet lessee dot txt so I have opened this ABC dot exe read more and then so whenever you open the file in rate code the file pointer will be and the starting position so you have for not read of 5 that means from the starting position 5 which will be away then it will be displayed on the screen so fine wines will 1 2 3 4 5 so the output for this one is hello and immediately after achieving this one the file pointer will be at this position because already file has been displayed again if you read one more statement like and read find from here itself it will come find some space is also like character 1 2 3 4 so this output is space w\/e l see so 1 2 3 4 5 right this will be printed now after executing this one the 5 coin will be yet whoa firefighter will be yet ohh so if you write again the statement afraid of 3 this is you om e so every time the operation is executed the file pointer will be moved towards its right side right so unless you close the close the file and open the file the file pointer design comes to the beginning of the file so here they positions is an optional thing so if you mention here the bit positions that many bit positions will be displayed on if you have not mentioning here if you are still just hiding as F will not create this will return everything all the content of the file hello so this position this will positions is optional so we can specify the positions how many of these characters we need to ring on if you want to read everything just we can ignore this bit position yes we can write a for not really everything will be printed if you should display some remember that many characters will be and the file pointer starts moving from its right from the beginning to its right this is about the raid next and they'd like see the second one is Hagelin so it'll be here there are three ends hello welcome Python programming now if you open this ABC dot X team in Radian mode and if you are trying to read you can paint this red line so whenever we open this file in read mode the file pointer will be at the starting position right starting position so if you improve in this red line the first line in the content of the first line will be displayed so hello will be printed so everything in the first plane everything in the first line so I have to exceed in this one the file pointer moves to the second line because every kind and all the kind of first line is displayed if again if you are implementing this refrain in the same program without closing the file right so if you close your file once and if you open the file automatically in the final point and again points at the beginning so unless you close to find the final point that doesn't changes its position right so here after achieving this first line the profiling pointer will be in the second line so again if you include this red line it will bring welcome now the file pointer moves to the beginning of the third line because second line the complete content of the second line has been printed now saying if you implement the same thing red line once again the third line will be printed but third line will be printed right so read that means three an tagline content of single line so what about the content having in the line that will be printed so this is it doesn't make any argument right it's an argument is it doesn't take any other next to the turnover is sympathy that is flow rate it lines red lines so great lines means leaving the content of all lines so f1 thought red lines so it still multiple ends right so this implementation of this function will return everything hello welcome okay so all the lines will be printed right so hope you understood this one then let us see an example so this we will write a program to write the content into reader content first in order to write the content we need one five point then so first we have to create a file so f1 is equal to open let's take the same file in ABC dot txt all right so in write more that makes a new file will be created so immediately have exuding this one so one file will be created on file will be created with ABC dot txt and the pointer will be at the beginning next f1 dot right welcome to so after doing this now it will be written welcome to now the file pointer points at this position right no you're not close so automatically the file pointer has been closed again open the file pointer in a reboot open the ABC dot txt read more automatically this will be in rain board and the five point and points at this position next so if you write here for not ray it will really everything but it will not be printed on the screen because it will be in buffer so we have to assign a variable and then we can print that variable in so that the content will be displayed on the screen or directly we can call this in the print function so print F 1.3 so far the beginning itself everything will be printed in the output screen everything will be printed so when I come to I thought will be right so hope you understood this one so let us stop here so in this session we have seen the reading and writing operations on files reading or writing data on files so in that we have seen the write function and write lines and read read line and red lines so here the major important thing is the position of the file pointer so unless you close the files are positive the position of the file pointer will never come to the beginning of the frame right so the final point I keep on my executing the statements the final point that also moves from the starting position to the two words it's alright so let us stop here hope you understood this is a simple session so if you are having any doubts regarding this Python programming feel free to post your thoughts in the comment section so that definitely I will try to clarify all your doubts so if you really understood my sessions like my sessions share my sessions with your friends and don't forget to subscribe to our channel thanks for watching thank you very much"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Reading and Writing Data with Python",
        "Video Title":"Python Tutorial - How to Read and Write to CSV Files [2020]",
        "URL":"https:\/\/www.youtube.com\/watch?v=MWYRGLKMzAQ",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/MWYRGLKMzAQ\/hqdefault.jpg",
        "ID":"MWYRGLKMzAQ",
        "Publish Time":"2020-02-10T23:11:37Z",
        "Channel":"Kite",
        "Channel ID":"UCxVRDu9ujwOrmDxu72V3ujQ",
        "Transcript":"[Music] hi guys so today I'm going to show you how to write to a text file and a CSV file in python and python before you do anything to file you must open the file when opening a given file name if the file exists it will open it otherwise it will create the file you must specify what file permissions you want write or a pen when we write we basically are saying let's delete whatever is in this file if there is anything and only write what I say to well when we append it's like we're saying let's keep whatever is in this file and just add to it once we have completed what we need with this file it is always important to remember to close the file we were working on otherwise this can make your script malfunction now that we have opened our file let's write to it let's write to a file named test txt first let's open this file remember even though it doesn't exist yet it will make it and let's make sure we specify that we have write permission now we can actually write what we want let's just write test text now let's run the code you can see that this file was created on the side and when we look inside we see exactly what we wrote Kalyan here with Kight the best in editor autocomplete and Docs search for programmers to help you code smarter and faster you can download now for python and we have more languages coming for you soon ok perfect now let's write a CSV file a CSV file is a file that contains comma separated values which look like this programs like Excel and Google sheets use CSV files to store their tables first we need to make sure that we have CSV imported like so once you've imported it let's write to a CSV file using the append we'll call this file people dot CSV here we also need to add new line equals an empty string in order to prevent there being a new line between each line in the CSV file here each line will hold the name and an age this data will need to be held inside a tuple before we had penned it now we need to open a CSV writer by calling CSV dot writer on the open file like so this is how we're going to be able to write in CSV format now we can write the data in by calling writer dot write row on the tuple we made when we run this we see another file was created and when we look inside its the values we wrote so that's how you write a text in CSV file in Python thanks for watching [Music] you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Web Scraping and APIs in Python",
        "Video Title":"API Endpoints? Get data from the web easily with PYTHON",
        "URL":"https:\/\/www.youtube.com\/watch?v=uRlik_-puEw",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/uRlik_-puEw\/hqdefault.jpg",
        "ID":"uRlik_-puEw",
        "Publish Time":"2020-03-26T20:16:34Z",
        "Channel":"John Watson Rooney",
        "Channel ID":"UC8tgRQ7DOzAbn9L7zDL8mLg",
        "Transcript":"I've run welcome John here and today's video we're going to be looking at another way of scraping data from the web in previous videos we've looked at getting the HTML passing that we've also looked at rendering the page in different formats of different ways but what we're going to do today is we're going to try and go directly to the API source at the endpoint and get the information from there so a lot of modern websites work by sending the website when it loads we'll send off a request to the API for the information and then it will pick that up and then render it on the page for you to see so what we're going to be doing is going to the endpoint which is kind of basically the end of the sort of communication channel from the from the API so the API will take the request from the website and then it will send the data that it's requested back to it what we're going to do is we're try and get in the middle of that we're going to actually send our own request off to that API to get that information back so I've got an example up here and this is the fh pro league hockey and we can see here that we've got a lot of fixtures some have scores and some don't you can see that unfortunately some have been cancelled but what we're gonna do if we go to the inspect element and then go to the network tab and click on xhr which is where most of these requests will be and then reload the page we should be able to find out where this information is coming from and how we can replicate that request programmatically to get that data so if we look through all of this we can see that there is some type and it's JSON data which is very good is very useful for us and if I see here there is one is a post request and it's get match stats list statistics list and we can see under the response part of the network tab that we actually have all this information here so if I scroll back to the top we see the first game is China Netherlands and it was 0-3 we can see here current team score 0 vs. team's got 3 and the teams were China and the Netherlands so this is exactly what we were hoping to find this is this is where the website has the request off to the server and the server has used the API to send it back to the website and JSON data now we really can work with this and we can get this information back ourselves programmatically so to do that we need to use an external program I use insomnia and Linux but you can use postman on Windows that works really well as well so what we want to do is you want to find the request here that we just we just use to find this data right click and then copy as curl see URL and go off to postman or insomnia which ever APO program you want to use create a new request I think this was a post request but I don't think this really matters let's click create and up here I'm gonna paste the data in and then I'm gonna hit send and then hopefully we'll get exactly what we just saw in our inspect element back in our API program so if you're using postman you just need to go import and then paste the raw data into I think it's called in yeah I think it's called import raw data and paste that in or we copied from the web staff we can see right away here that we have exactly the same JSON data we've managed to get a request back if we look under the headers that we sent there's not too many ones that are interesting here but depending on what you're doing you might find that there are more interesting headers that you could manipulate or change and then send a request off again so maybe it's got a a number of return results maybe you could change that to higher number to get more data back or something similar like that this one doesn't seem to it just seems to send all of the information back to us so what we can do is we can go ahead and we can click on generate code I'm not entirely sure what this is in postman but it's very similar so I'm just going to copy this I mean you're off to our text editor sublime we're gonna paste that in and we're gonna save it and we can see you hear that it's copied the payload the headers the URL everything for us so if we go and write head and run that hopefully we get back the JSON data there we go that's it right there all of that information should be all these scores okay we can see the first one here so you could then take this information here and you could store it in a variable pull out exactly what you wanted or whatever you wanted to do it for you could create your own dataset by putting it into a database like we talked about in a different video but basically with this one I wanted to show you another way where you could go directly to the API endpoint and get the data back that you're interested in getting from a website it's definitely worth exploring these different methods if you're trying to scrape data depending on the website and how it works you have some success with others maybe more than this but this is definitely worth knowing how to do you saw how simple that was for me to find that and then go ahead and get all of that information off so hopefully you guys have found this useful in another quick video subscribe to the channel if you're interested and you want to see more of this sort of thing drop me a like or a comment if your if you want to find out more great thanks thanks a lot guys cheers bye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Web Scraping and APIs in Python",
        "Video Title":"Working With APIs in Python - Pagination and Data Extraction",
        "URL":"https:\/\/www.youtube.com\/watch?v=-oPuGc05Lxs",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/-oPuGc05Lxs\/hqdefault.jpg",
        "ID":"-oPuGc05Lxs",
        "Publish Time":"2021-06-20T17:00:00Z",
        "Channel":"John Watson Rooney",
        "Channel ID":"UC8tgRQ7DOzAbn9L7zDL8mLg",
        "Transcript":"in this video i'm going to show you the basics of working with an api in python we're going to run through a code demo of how you would make a request to an api and how we can actually deal with the data that comes back so the api that we're going to be working with is this one it's the rick and morty api and there's a reason why i've chosen this one it's open which means you don't have to authenticate so we can worry about authentication at another time but also it has a good rest api and even better documentation because the first thing i would always say when you're trying to work with a specific api is you need to go through their documentation so you can work out what information is where and how you're going to get it out so if we look at this we can see we have a base url for our rest ui our rest api now this is important we're going to take this as well and we can see that if you hit this end point you actually get this information back which tells you that you can query for characters locations and episodes what i'm going to do is i'm actually going to copy this i'm going to paste it into my browser and we're going to see that we get this information back here is what we saw right here so what we can do is we can actually just interrogate this as if we were working with a website although we're actually looking at and asking the api for bits of information so i'm just going to make this bigger right now so we can actually see what the main response looks like so before we go ahead and actually start working with the code i'm going to run through this response here and explain what all these bits are now it's really important because when you actually look through the api it will give you a response and a schema of what the actual data is coming back so we can see that we have two main things here we have the results and this info thing at the top so the info bit actually tells us how many results there are for for the endpoint that we've queried and how many pages there are now this is going to be really important information as we go forward and it also gives us the url to the next page you don't always get this but there will be some kind of total number of results and also number of pages or some do it by you do the next load of results so it would be the first would be one to a hundred and then the second would be 100 onwards etcetera but in this case we get a total count and a number of pages so we can collapse that and now we can see that we get a list of results so if i collapse that we can see that my uh my browser is telling me there are 20 items and we can see that we have all 20 here and each one has 12 specific bits of information in it an id name etc etc so what i'm going to do is i'm going to say that we want to compile our own list for whatever reason of characters from this tv series we're going to take the name and then maybe the list of episodes well that might be quite long but we'll see when we get there so what we want to do now is we're going to come out here and we need to go back to the documentation and we can see that we have what i just explained here it tells you that the information given etc etc and then the character endpoint which is what we just looked at so it says you can access different pages with the page parameters so that's really important and we saw that in the next link when we looked at the information up here under the info tab we can see it says next page is equal to two that's a really common way of doing it then we have all the information etc etc and you can actually see the character schema here that i showed you with all the information you can get out etc etc so we're going to do get all characters this is what we're going to do so i'm going to copy this url here and we're going to go to our code now to make requests to a server using python or anything like that we need to use the request module if you don't have this installed you can do pip install requests you can google that you can find it that is the main one that you that we're going to use even the main python documentation says to use requests i already have this installed so i'm just going to import requests up here at the top like that and then i'm going to set my base url to this but i'm going to remove the character part because this is the base url that we're going to use and then i'm just going to say that our endpoint is equal to character now notice that i've left the training slash on our base url so now when we hit this equals sorry there what i'm going to do with this is i'm going to make a request to this api with us with our code so i'm going to say r is equal to requests and we're making a get request so we're going to do dot gets then we're going to say our base url plus the endpoint now because these are both strings we can just use the plus symbol to concatenate them together and then i'm going to print out r now when i run this we are going to get back a response of 200 which is a good response if you're getting something other than that 400 or 404 is not there 500 is usually excess denied or something like that but now we actually want the not the actual response code we want the information that's in that response and the easiest way to do that is to r dot json and this is going to give us the json response back from that api so i run that wizards by on the terminal we can see we get a load of information back and this is exactly what i showed you in the browser except now we can actually do stuff with this response and we can take this information out and we can get the bits that we want so what i'm going to do is i'm going to say let's um say data is equal to r dot json and then i'm going to say print and we're going to say data now we can access the keys using a square brackets like you're doing a dictionary and i'm going to type info let's see what we get back now so now i've returned just the information part of the response now what we want to do here is we want to grab the number of pages because we want all of the responses all of the characters sorry from this api so we're going to go ahead and we want to know how many pages there are now you could grab the next page link when you go through every time and just do a request on that you could absolutely do that but generally i like to make one request to the start to know what we're dealing with and then do it that way so i'm going to say we're going to go for let's do pages so again we're going to reference the key of pages and this is going to return the integer of 34 there so we can save this into our variable that pages so now what we want to do is we want to work out what parts of the other bits of information that we want so let's go ahead and do print data now if we come back to the documentation it shows us up here we get results now this is a list so i'm going to come back and i'm going to say print data results and i'm going to ask for the first item in that list so let's run that and we can see that we get this information back here now within here we have the id and the name etc etc and then some other keys that we can access and then we can see we have all of the episode information there so let's do um let's print out the uh name so we're going to go we're going to stick within our first first item on the list because we're just working out what this information that we want and i'm going to say name so let's print that okay so we get the name and then let's save that so let's do name is equal to and i'm going to copy that and i'm going to say uh episodes and we'll do if we look for the key up here we can see we have episode and then it returns a list not that episode so i'm just accessing different parts of the json data let's remove that so it's a bit a bit clearer and let's print out episodes okay and there we go there's our list back now it's worth mentioning at this point that if you're new to this and you're still trying to work out how to interrogate the json data properly don't keep sending requests to the server go ahead and save the response you can just copy and paste it out into a json file and save it to your hard drive so you can just work out how you want to get that information out otherwise you're just sending unnecessary requests to the server i'm pretty confident doing this so i mean i've only done like five or six requests at this point so not a big deal so what we're going to do for this is we're going to say we want to know how many episodes this character is in so i'm going to do the length of episodes instead of printing out all of them i'm going to ask for the length and that's going to give us how many there are we can see there's 41 so i'm going to say that this character is in 41 episodes so now we've worked out what bits of information that we want to get we can go ahead and start to write our code out properly so we can make the right amount of response requests to the api get back the information that we actually want and then can then put it into a nice list so we get total number of characters and how many episodes they've been in again this is just demo demo information but you'll get the idea so the first thing i'm going to do is i'm going to start writing some functions and i'm going to say up here we're going to say default defining our new function and we're going to say main request and i'm going to say we need to give this a the base url and let's pass in the endpoint as well this just means that if we wanted to we could use this to actually go to the other endpoints of the api if we wanted to so now we're going to put our record r is equal to request.getting here like that and then we're going to return the r dot json the json response here so what we want to do now is when we get rid of this i'm going to move this up to the top so it's just out of the way really quick and now instead of data is equal to this we want to do our data is equal to main request and we are going to actually because we've called this base url and endpoint anyway we can actually copy that out there so now if we run this we should be able to get the same results back so let's just print name just to check that our function is working which it is okay so now we want to actually work out how many pages there are that we need to um loop through so what we're going to do is we're going to say def for our new function we're going to say get pages and we need to pass in the json response so we're going to say response and now we want to work out how many pages there are now as we looked here and we worked out from the uh info and pages we can copy this out so we can say pages is equal to we just need to change this ever so slightly because we're working with the word response and not data within our function and we can say that and then we can just return this back out now you can do it like that or you can just make it easier and just put the whole thing on one line there we go so now we after we do our main request if we do our get pages on the data and we actually need to print that out and we'll remove this print statement from down here and run this we should see 34. there we go so now we can say that we're making our request and we can work out how many pages we need and so what we're going to do now is we're going to write a function to actually work through the character information on each request that we give it so let's say df for function and we'll call this one pass json and we're going to give it the response again so now we want to put these two in here this is where we found the information so i'm going to remove them from down here but what we need to do is we need to make this into a loop so instead of it like this because here we're actually indexing the first item in the list so what we're going to say is for item in response and we want to access the results key which is we've got here so we can remove this part we want to say print item and we need to reference the name and then the episode but we want item sorry we want length because we wanted to know how long that list was of episode there i've got too many things going on there we go so i can get rid of these now for the moment i'm just going to return this function so i don't get any errors and i'm missing a bracket so let's put that in so now we can do our past json function and we can say we need to give it the response which in this case is data because the response is coming from the main request function and we have put in a print statement in here temporarily just to check that it works if it doesn't we can tidy up our errors before we crack on right there we go so it looks like we've got our 34 which we are printing out from our get pages and we have a list of characters and the number of episodes that they've been in here so we're halfway there so let's get rid of that so now what we want to do is we want to save this pass json part into a dictionary so we can actually do something with the data so instead of printing these two things out i'm going to put them on separate lines just like this and we're going to say our character or we'll just call it char for now and we're going to create a dictionary that includes these two items i'm just going to indent that in there and we're going to say the key is name and that is equal to the item name and then the number of oh i need there we go is equal to that there and we're missing our bracket there we have our uh character dictionary here that's populated by these fields but we need to add them all to a list so we can actually return the whole list from this function so just at the top here i'm just going to call this character list and we're going to copy that and here we're going to do character list dot append the character that we are adding and then i'm going to return out of the whole function the character list so now if i print out what comes out from this function just to see if it's right hopefully it is there we go so now we have a list of names and the number of episodes that they've been in just like we had before but it's in a bit more of a useful format now now we've got that working we want to work with the pagination which is why we have this get pages function so let's collapse these ones out of the way so we know that our main request works here but if we look at the documentation again we can see that it has this question mark and then page is equal to 20 at the end so i'm just going to copy that what that'll do is that'll work tell the request which page to work with so i'm going to add that in at the top here so i'm going to say that we need to give this a number which i'm going to make as x and we're going to do plus and then page is equal to x like this and we make this an f string so we can actually add that all together so when we make our main request now we're going to start with a number one and let's check that that works we get the same information back so now if we go to number two we can see we've got some different information which means our pagination is working so we can just use this main request function so once we do the first one on page one to get how many pages there are and pass that part of the data what we can do is we can say for x in range so let's get rid of this well not get pages let's just get rid of the print part so we can say 4x in range and we can pass in our get pages data function there we can print x so if i just get rid of this for this moment as we can see it goes to 33 and we actually have 34 pages and it starts at zero we just need to shift that over so i'm going to say for x and range we're going to start at 1 to get pages data plus 1. so if we now print x we should get 1 to 34 as opposed to what we had before 0 to 33 there we go 34 1 to 34 so those are going to be our page numbers so what we want to do now is we want to use our main request function which basically is the one that returns the json data i'm going to copy that out we're going to put this in here now i'm going to leave the print statement in so we can see the pages go by but we're going to do main request of the base url and the endpoint which is are both up here which is correct and then x which is for the x or the page number so we could store this into a variable but we actually want to pass the information from this so i'm going to grab our past json function i'm going to bung that in main and we're going to put that there now what we want to do is we want to actually store all this information that comes out and we get a list out of this we can actually have a new main list probably not the greatest name and we can put that in here but what we can do is we can do extend so this is basically going to add everything that comes out of that list into this new list as we go through each time so now if i do print they not not inside my for loop it's come out of my for loop and we do print let's do the length of the main list this is a good way to find out if you have sort of the right amount of records i think it was 671 we were looking for so we can see this is the request we're making here to the server we need that to go up to 34 pages hopefully 671 so we've got the right amount of results so i'm happy that now what we can do is we can export this to a csv file so let's import in pandas now pandas is basically a really powerful data science program and to use it for just creating a data frame and a csv file possibly overkill however it works really well and i don't know i'm happy with it so i'm going to import pandas as pd again pip install pandas if you need to now instead of printing the mate the length of the main list what i'm going to do is i'm going to say df for data frame make sure you call your data frame something useful when you're actually writing your code in a in an actual project don't just write df because it'll be confusing it's equal to pd.data frame main list so then i'm going to print def dot heads and then df dot tail just to double check that the top and the bottom of our data is different and we haven't like duplicated it up or something like that and then we can see we can work on um exporting it so i have actually got um here 670 it would be 671. this looks like a duplicate but if we go back to our actual response and this is page 34. we can see that we do have two lots of the new improved galactic federation guard and to be honest we should probably stick the id in there as well that would make a lot more sense so i'm actually going to do that so what we're going to do is up here in our past json we can actually put the id in so i'm going to make a new line in our dictionary and say i id it's equal to item id because the key was the id key we can see it there so now i've added added that in instead of printing this out i'm going to do df.2 csv this is why i use pandas because it's so easy to do this and we're going to call this character list dot csv and when working with pandas and this lot that i always tend to do indexes equal to false because generally i don't want the pandas index which is the zero index down the side i just want it to look like you would expect it to so now i'm going to save that and i'm going to run this again and this will be the last request i make to your api i promise and we will have back our csv file of the all the characters that have ever appeared in this show and how many times they've appeared in each one with the episode so let's click on that let's close this so we can see and now we have our id our name and the number of episodes all the way through down to all these characters who only appeared once including our new improved galactic federation guards who are the newest characters if the id number is anything to go by which i'm sure it is so that's going to do it for this video guys hopefully you've got a gun understanding now of how you can start to work with an api in python and you can make your own queries there's a lot more to it than this we could actually filter but i'm not going to cover it cover that in this in this episode maybe i'll cover that in future ones if you've enjoyed what you've seen please consider dropping a like leave me a comment or subscribe to the channel i've got lots of stuff like this with python i've got lots of web scraping content we're moving into some app building content etc etc so if you've enjoyed that hit that subscribe button until then thank you very much guys and i will see you in the next one goodbye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Web Scraping and APIs in Python",
        "Video Title":"Beginners Guide To Web Scraping with Python - All You Need To Know",
        "URL":"https:\/\/www.youtube.com\/watch?v=QhD015WUMxE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/QhD015WUMxE\/hqdefault.jpg",
        "ID":"QhD015WUMxE",
        "Publish Time":"2021-11-27T13:00:24Z",
        "Channel":"Tinkernut",
        "Channel ID":"UCZDA1kA3y3EIg25BpcHSpwQ",
        "Transcript":"howdy tinker nerds today we're gonna do a little web script inscription web scraping is an automated method of collecting data from these guys um these guys want information on weather scrape it sports scrape it movies scrape it you get the idea scrape it so let's jump on this ride and make a basic web scraping program using python and a raspberry pi in 10 lines of code challenge accepted so keep your hands and feet inside the moving vehicle until we come to a complete stop because it's if you want to keep those knowledge gears greased please be sure to subscribe and ring that notification bell so i mentioned in the intro that i'm going to be using a raspberry pi but you don't have to use a raspberry pi so why am i going to do this it's because the pi operating system already has python and a lot of the libraries that we're going to be using pre-installed so it makes for a nice little self-contained programming environment so if you don't want to use a raspberry pi or don't have one that's fine you're just going to have to download python 3 on the computer of your choice along with whatever libraries we decide to use so while we get set up to steal the internet's data here's a little background on web scraping the basics of web scraping dates way back to around the creation of the world wide web in 1989 because you can't scrape the web if there's no web to scrape from so after he invented the web the wonderful tim berners-lee also created the first web browser that converted html code into a nice formatted hyperlink and media rich document a couple years later in 93 the wanderer program was created by matthew gray at mit the wanderer was a program that would automatically index the web and gather information about each web page using the page's html metadata nowadays this is known as crawling and it's how search engines find websites crawling is the predecessor for scraping but it wasn't until a decade later in o4 that a python library called beautiful soup appeared it was an html parsing library that allowed python to filter and gather any information from any web page and use it for whatever reason basically scraping so thanks to beautiful soup web scraping as we know it was born now stop here for a second we have to answer an important question is web scraping illegal well this can be kind of a gray area because some websites forbid it some websites allow it and some websites allow it with stipulations so since i don't look good from behind bars i'm going to choose a website that allows web scraping and that would be quotes.twoscrape.com a website that was made specifically to test scrapers now that that's determined let's get to coding yo here we go on my raspberry pi i'm going to go to the menu select programming and then open up thoni which is a nice little coding interface and you can download it for any computer or you could just use the coding interface of your choice the first program that i'm going to write uses some libraries pre-installed on the pi so if you don't have a raspberry pi you're going to have to pip install these libraries separately let's start by importing libraries we need which are beautiful soup from the bs4 library and requests the next thing we're going to do is request our target website and store it as a variable then we can use beautiful soup to parse the website html and store it as a variable too now we can start scraping that html code for data but what code should we be looking for while looking at the data in this webpage it makes sense that we would want to scrape the quotes and the quote author so what we need to do is tell beautiful soup what to scrape and to do that we have to see how these items are identified in html so let's start with the quotes right click on the quotes and select inspect what we're looking for here are these tags that are before and after the quote text this is a span tag that has a class attribute of text this is how the html identifies a quote and each quote on it the page is going to be identified the exact same way now if we right click on the author name and select inspect the author name is identified by this small tag and has a class attribute of author so using this information let's hop back over to our code and let's start with the quotes so this command is going to go through the html and find all the quotes and save it as a list for the author variable let's find all the small tags with a class attribute of author and this is going to return all of the author names to the list what we can do now is create a for loop to loop through each quote in the list and print out their text and then we'll do the same thing for the author list if we hit play at this point it should return a list of quotes followed by the authors so it looks like on my program i have an outdated dependency error but i'll update it later because it looks like the code still runs but this isn't really the results that we're wanting it's not the right format it needs to be formatted as quotes followed by the author that gave it and not individual lists so to do this we're going to need to combine the loops and that we can do by using the zip function in our for loop like this and then we can combine our loops and just delete the second one because we don't need it anymore alright let's give this another try and boom there it is your info is mine twoscrape.com so now this data is yours and you can do with it whatever you want from within python one example is to save it as a csv file that you can then open up in any excel type program so let's just do that and unfortunately we're gonna have to expand beyond our 10 lines of code a bit all right so first let's import another library called csv and then we'll create a variable that opens a new csv file and then we'll add another variable that writes to it the first thing that we'll write to it is the header name for each column like this then we can adjust our for loop to write a new row for each quote and author item as it loops through them lastly we need to break out of our for loop and close the csv file that we open now if we run this again and if there are no errors then we can look into the folder that our script is saved to and you should see a new csv file open it up and see if the data looks good it does perfect from here there's thousands of different directions you could go you could scrape movie info from imdb dates and definitions from wikipedia sports stats from your favorite sports website the sky is figuratively the limit just make sure you're doing it responsibly and within the guidelines that the website is set for scraping so you don't end up in trouble now there's one aspect of scraping that we didn't touch on in this beginner's tutorial and that is what if your data is behind a login like on facebook well we will take a look at that in my next video how's that for a teaser so stay tuned you can click here to watch more videos like this and please remember to support me by sharing liking subscribing or commenting and until next time keep tinkering"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Web Scraping and APIs in Python",
        "Video Title":"Python WEB SCRAPING in 30 Seconds! \ud83d\udd25\ud83d\udc68\u200d\ud83d\udcbb #shorts",
        "URL":"https:\/\/www.youtube.com\/watch?v=AaWaE2CEUF0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/AaWaE2CEUF0\/hqdefault.jpg",
        "ID":"AaWaE2CEUF0",
        "Publish Time":"2022-01-17T19:14:05Z",
        "Channel":"truthybyte",
        "Channel ID":"UCdhWNfnBWZ2KZqwTHA-Z4Hg",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Handling Missing Data with Python",
        "Video Title":"Python Pandas Tutorial 5: Handle Missing Data: fillna, dropna, interpolate",
        "URL":"https:\/\/www.youtube.com\/watch?v=EaGbS7eWSs0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/EaGbS7eWSs0\/hqdefault.jpg",
        "ID":"EaGbS7eWSs0",
        "Publish Time":"2017-02-17T13:49:11Z",
        "Channel":"codebasics",
        "Channel ID":"UCh9nVJoWXmFb7sLApWGcLPQ",
        "Transcript":"difference in this tutorial we are going to look at how to handle missing data in pandas now often when you are downloading data from internet or less say getting it from any other source it might have missing values as shown in this CSV file this file contains New York City's weather data and you can see that some of these cells are not having any value in it also it is missing the data for 2nd and 3rd January ok so when you're processing this kind of information in pandas we will see how you can deal with these missing values using fill na interpolate and drop any methods I have more tutorials on how to handle missing data but this is just to start and we are only covering these three methods ok so as usual I'm going to start my Jupiter not book now if you don't know what is Jupiter not book I have a separate tutorial on it but you can also use any IDE of your choice such as py charm or not pay plus plus whatever you prefer I like Jupiter not book because it is great with data visualization ok so I'm going to click on new and start a new Python notebook and the first thing we do as usual is import pandas as PD and then I will read the CSV file that I just showed you ok and print the data frame the star that you were saying here means it was processing it so it read this csv file successfully into a data frame now for the purpose of this tutorial i want to make my day a date column so let me show you what i mean by that so when i then you normally read CSV like this what if what it's gonna do is it's gonna read de as a string column you can see it is a string so whatever you are seeing here this is nothing but but a string it's not an excel file okay it's a CSV file so I want to first convert that column into a date column and for doing that you have to use past dates argument and in that you can say that past day column as a date type okay and when you do that let's first print it you can see that it convert it now by looking at it you cannot probably figure out the type so what I do usually is just so you can see that now the type is timestamp okay so we're good all right so I got day as a date\/time column now I want to make this an index for my data frame and in order to do that you can just say DF dot set index day as your index and anyplace equal to true remember you have to do in place equal to true otherwise it's not gonna modify the original data frame but instead it will return a new data frame okay and when you do that you got day as your in now if you have any values and if you are processing this information then you have to do special handling you have to check like if value equal to na then do the special thing okay often it makes sense to replace these any values with some meaningful value or a guess okay so in this case let's say I want to replace all any n values with some other value okay so the first method that we are going to cover is fill any okay so what you can do is be F dot fill any okay and in bracket you can pass the value that you want any to replace with okay and I'm not going to modify my original data frame but instead to get this back into a new data frame and when I run it you can see that all these NN values that it had it replaced them with zero value you can see that everything is everything that was any is zero now okay so this is good now sometimes having 0 is not probably the best guess so you want to come up with a better guess okay for example here in the case of event what does zero mean right so maybe you want to use fill any but you don't want to fill entire data frame with this value maybe you want to specify different values for different columns okay so pandas supports that also so the way you do it is again I am going to receive it a new data frame and inside fill and a method now you can pass it dictionary okay now what does this dictionary contain so dictionary contains name of the column okay now in temperature column let's say I want to replace all any values with zero and in my day not day but wind speed column I want to replace it with again zero but my event I want to say no event okay and then print new data frame now as you can see here the temperature and wind speed is replaced with zero as you can see here but the event now I have no event okay so you can just use this dictionary to fill specific values for a specific column but still I am not happy with how I handle missing values here because see if you are calculating a mean or something for this temperature then mean is gonna come really horrible and if someone looks at data he'll thing okay on 1st gen Ewell it were it was 32 temperature and the second January it was zero Fahrenheit right some someone might think this the temperature went down by so much but in reality we actually don't know what was a temperature and all we are trying to do is come up with some estimate okay so then the other way of getting better estimate would be just to carry forward the temperature on 1st January here ok so whatever was the temperature on the previous day you carry forward and you do it in a similar way for other two data types okay so for that you can use again your fill and a method okay but here what you will do is use a method equal to forward fill forward fill you can specify by typing F fill F fill means if I have any value then just carry forward previous day's value okay so let's bring that okay cool now you can see that it just carry forward the value from the previous day so forth January had any value but now it carry forward it forced January's value here so this looks little better than just having zero value okay same thing on 9th January I I didn't have any event so you look at 9 January now it is sunny because you carry forward previous days value you can also use backward fill meaning carry forward next day's value it's not good really care for but you're copying instead of copying previous day's value you're copying next day's values so if you do that what's gonna happen is now for January has a value from 5th January so now it copied value from 5th to 4th ok so you can use be fill method also now if you go to pandas documentation you can just Google in pandas fill any it's gonna show the documentation for fill any and you can see that we used back fill be fill and FL you can also use bad or like wall back fill okay so you can use all of that you also have this other argument called axis so let's see what axis can do for us so here if I say excess okay X is equal to columns when you do X is equal to column what it is doing now is let me open this CSV file here so here previously when we were using backfill it was copying values vertically like it will go vertically and copy value from here to here but now with X is equal to columns it's copying values horizontally so it's going row by row and copying value from previous cell so here look at here it it was 9:00 a.m. and it copied that nine in to temperature so you can see this nine is copied here then the snow was copied here so you can see if this was no and this is also snow now so you can based on what kind of data you are dealing with you can copy it either horizontally or vertically okay now if you check the documentation of fill n\/a it has another interesting property or argument called limit so let me show you what limit can do for you so here I am going to replace this bit forward fill and just kind of show you so when you have forward fail let's say in the case of 7 January I had 32 and it will just copy 32 to both of these missing data points okay now let's say due to some reason I want to carry forward this value only once okay so I want to copy it only here but not here in that case you can specify limit and you can say my limit is 1 as far as copying my valid value to missing value is concerned okay when you run this you can see that now 7 January value was 32 it copied that to 8 but 9 still has any because my limit is one I can copy it only once okay same thing here 6 January wind speed was 7 miles per hour and it copied it to seventh so you can see that 7 January now also has that value but 8 & 9 January has na ok if you chained them it to be 2 you will notice that this 7 is copied here 2 times right 7 & 7 but my 9th January is still any ok so this is how you can use your limit parameter okay now I'm still not happy with the guests that I'm making because if the temperature on 1st January was 32 and on first it was 28 it is likely that temperature on 4th was in between ok I mean it's not always guaranteed but that something you would consider a better guess okay so we have a method called interpolate in ponder so let me just create a new cell and by the way I am using the shortcuts you can you can you access all the shortcuts here so when you say insert cell below the shortcut is B so that's what I'm using so I'm here I'm pressing B it's creating a new cell for me okay so here D F dot interpolate okay so then you do D F dot interpolate it's gonna interpolate the values so if you look at your new data from here you will notice that now for the 4th January it came up with a better case which is a linear interpolation so if you have studied linear interpolation or you basically you will come up with this value 30 okay so it was 32 28 and you're gradually transitioning and and having this intermediate data point okay so this is probably a better guess okay and it did the same thing for these two cells also you can see that 32:24 and here is 32 point 66 33 point 33 so it's somehow coming up with this it was 33 point of the day so it's using interpolation linear interpolation and coming up with this values okay so again I'm going to go ahead and check the documentation for interpolate so in search bar you can type in interpolate and look at data frame dot interpolate documentation and you will notice that in a method if you don't specify anything it is by default linear but you can use so many other methods you can use quadratic cubic and piecewise polynomial there are so many methods to specify as far as your interpolation is concerned okay so I'm going to use time now so let's see what time can do for us so here before we do that you will see that using linear interpolation it came up with the middle value okay 32 and 28 the middle value is 30 but look at the date okay late is not in the middle okay then it is more near towards fifth January okay so I'm missing second and third January so 30 still doesn't look like a better guess it should be relatively near to this value 28 so when you use method equal to time you can see that now it came up with value 29 because now it is considering this time this date also in coming up with this value it is realizing that for January is near to fifth hence the value should not be excellent middle but it should be more near to this value okay so this feature I found to be pretty powerful whenever you are making a guess or estimate form is values okay so far so good sometimes based on the situation I just want to let's say drop all the rows with any values in that case you can use this method called drop any so you can say DF drop any okay and I'm just printing the new data frame so you can see that in my excel sheet whichever row had any any value okay it dropped all of them so now I got only three rows which has a valid contained in all of the columns okay sometimes you want to drop the row if it has at least one n\u00e8 okay so here what it is doing is activities doing that so here if you have at least one any it is dropping it but let's say I want to drop only if it has all any so for example I want to drop this row but I still want to preserve these rows because it has at least some data okay so for that you can use how parameter and you can say how is equal to all so now you don't see 9th January here in this data frame because it had all the values to be any it has this date but this date is a index so it is not considering it is not considering that in the process of dropping okay and these values this Rose has some n\/a cells but not everything is any so it's not dropping that okay now what if I want to go by non any value so let's say I want to say that if I have at least one non any value then keep that row and drop any other rows so for that you can use a threshold parameter so you can say threshold equal to one thousand equal to one means if I have at least one non any you then keep the rope okay so when you run that see what happens is again the same result 9th January got dropped because it doesn't have any valid value everything was on it okay now let's so it kept the six January value because it has at least one valid value so if I change threshold to be one what it means is all right so let's run this okay nine when I sit that's what you go to do it dropped this particular you can see it dropped that particular row because two means I need two valid values in order to keep the row but I don't have two valid values I have only one value the date is not counted because it is index okay so if I have one value I'm going to drop it okay so you can use threshold to drive you're dropping process by number of valid values that you have okay last thing that we want to cover is how do you go about inserting the missing dates so I don't have 2nd and 3rd January here and I want to let's say insert those dates so for that you will do something like this so here you will create a date range and using the date range let's say I have a date range from 1st January to 11 January so first January to 11 January I created a date range so this is your date range and you pass that to date time index and create a date time index and then you do re-indexing in your data frame so I'm saying DF not reindex using that index and then you print your data frame again you have to do in place equal to true okay I'm getting some error here because it index got unexpected keyword argument okay so this is unexpected so let's see what's going on here okay so looks like reindex is not accepting in place as a valid argument so what I have to do is DF equal to DF dot array index and when executed you'll see that I got 2nd and 3rd January rows now I have any values but again you can use one of the field and methods to fill them with some estimated values okay so that's all we had for this tutorial in the next tutorial of we will continue on how to handle missing data using some other techniques okay until then thank you very much for watching and if you liked this tutorial please don't forget to give it a thumbs up below okay bye"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Handling Missing Data with Python",
        "Video Title":"Handling Missing Values in Pandas Dataframe | GeeksforGeeks",
        "URL":"https:\/\/www.youtube.com\/watch?v=uDr67HBIPz8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/uDr67HBIPz8\/hqdefault.jpg",
        "ID":"uDr67HBIPz8",
        "Publish Time":"2021-05-20T15:00:22Z",
        "Channel":"GeeksforGeeks",
        "Channel ID":"UC0RhatS1pyxInC00YKjjBqQ",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Handling Missing Data with Python",
        "Video Title":"Handling Missing Values | Python for Data Analysts",
        "URL":"https:\/\/www.youtube.com\/watch?v=N3hQYiXppIs",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/N3hQYiXppIs\/hqdefault.jpg",
        "ID":"N3hQYiXppIs",
        "Publish Time":"2023-10-16T10:10:51Z",
        "Channel":"Absent Data",
        "Channel ID":"UCSQvwTdavISOusGhJW6H0Vg",
        "Transcript":"let me show you a few techniques to deal with missing data in Python so the first thing we have is our data set as you can see from our graph and our data we have missing values we can use a drop na a function to eliminate any rows that have nulls we can pass in the in place equals true to make sure this is saved in memory this equals a reduction in data as you see we are missing a few days October 4th and 7 have been eliminated let's revert back to our original data frame and use the fill in a function to fill those missing values with a zero we can also fill nulls with the mean of our values by passing in the mean in place of the zero we can use the fill function to fill any missing values with the previous value and B fill to backward fill our data if there's no value in front or you at the end of your data set you can't backwards fill the value"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Handling Missing Data with Python",
        "Video Title":"How do I handle missing values in pandas?",
        "URL":"https:\/\/www.youtube.com\/watch?v=fCMrO_VzeL8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/fCMrO_VzeL8\/hqdefault.jpg",
        "ID":"fCMrO_VzeL8",
        "Publish Time":"2016-05-26T13:42:17Z",
        "Channel":"Data School",
        "Channel ID":"UCnVzApLJE2ljPZSeQylSEyg",
        "Transcript":"hello and welcome back to my Q&A video series about the pandas library in Python and the question for today is how do I handle missing values in pandas okay so uh let's get an example data set so we can figure out what to do um we'll import pandas as PD as always and then our example data set for today is uh a data set of UFO reported sightings so UFO equals pd. read CSV and then uh bit. lefo reports okay so we'll read in that data into a data frame and this time let's take a look at the tail the last five rows okay so we see this value n n and what does that mean is that a string like it's a color or what is that it actually uh stands for not a number n an but what it means conceptually is a missing value now uh what does that mean well it means that when building the data frame uh read CSV detected what it thought was a missing value and it flagged it with this special Nan and you'll see why in a bit now let's take a look at the source file for a second this is on GitHub and uh here are the last five rows and for instance in this very last row we've got ebore comma comma oval and this is a CSV file so normally you'd have something between there but it's missing and if we compare that to the data frame we see eore Nan meaning missing and then oval okay so why is it missing I don't know I'd probably guess that there was a web form where people submit these UFO reports and color um where some of the fields are optional and some are required okay so uh let's take a look at some methods for working with missing values uh the first method I want to show you is called is null and it's a data frame method so we'll say ufo. is null. tail okay and the way is null works is it uh shows a false if something's not null if it's something's not missing uh and it shows true if it is missing so you'll see City for these last five rows it's not missing at all so it's false false false false false false for colors reported it's Mo it's true true true false true because uh these ones are missing now it's only because pandas uses this special value na that is null can detect them and produce trues and falses as a result now there's actually a uh inverse method called not null so ufo. not null. tail and you'll see that we just get the exact opposite now why are these methods useful is null and not null uh let me show you some examples so one is a really cool pandis trick which is to say ufo. isnull dosm and what that tells us is the number of missing values in each of the columns now how did that work I'm going to break it down for you because there's a couple things you have to understand so um let's create a pretend Panda Series so pd. series and I'll pass it a list of booleans so I'll say true false true okay so that's I've just created this series of three booleans okay and if I do do sum you're thinking how do you sum booleans well it turns out that when you do that if you ask pandas to do a mathematical operation with booleans it will convert TRS to one and falses to zero so it shows you the number of truths okay so that is hinting you towards why this worked because I'm summing booleans but you can tell that I'm summing them at the column level and why is that well if you think back to a previous video about the axis parameter um sum is doing axis equals 0 by default and if you remember how the axis Works uh for a math matical operation axis Z is saying I want you to do the operation in the direction of the zero axis the row axis so I want you to do a sum across the rows which means Down The Columns okay so in summary when we say ufo. is null. sum ufo. is null is creating this data frame of trues and falses and then the sum is doing column sums of the trues and falses converting the ones to the trues to one and the falses to zero okay so that's why that worked um this is something I do on basically every data frame uh for every data set I read in because I want to know where the missing values are okay now I want to show you another way to use uh this um isnull method and um isnull it turns out is also a series method so I can say like ufo. city.is null okay now I'm actually going to pass that series of booleans to this using this bracket notation we've seen many times I'm passing it a condition that will be used to filter the data frame and when I do that we know that there are only 2 five missing values in all of this in in all of this city series we can see the 25 rows where city is missing okay so that's how we examine a subset of the data frame by only looking at a uh a portion of the data frame okay all right so that's some basic functionality but I haven't answered the question what should you do about missing values and there's not one right or wrong answer to that I can't tell you what to do I can just give you some options and pandas for how to do it and you can decide okay so it really depends upon the data set and the analysis you're doing or problem you're trying to solve so one common thing to do is to drop missing values okay so let's see some options there I'm going to say ufo. shape just to uh see what is the shape of this data frame 18,24 one rows five columns now there's a data frame method called drop Na and if I say ufo. dropna how equals any. shape now this is the default so you don't have to put it but I want to emphasize it drop in a how equals any that means I want you to drop a row if any of its values are um missing okay so if I do that we lose almost all of the rows except for about 2,500 rows okay so this is all that it's left that all that's left if we drop a row rows in which any of the five columns have a missing value okay now I want to mention for a second that um there is an in place parameter here for drop Na and that is false by default which is why if I if I do ufo. shape right now it hasn't changed from the original this is just um because it's in place equals false it just temporarily drops it and then they come right back okay all right now let's see how we might modify drop na okay so now let's try ufo. dropna how equals all. shape and that says only drop a row if all of its values are missing and we knew that wasn't going to drop any rows because up here we saw that state and time don't have any missing values so how equals all is not going to make any changes um in this case Okay so one more option for drop na is called subset so ufo. dropna subset equals and I'm going to pass it a list of columns to consider so I'm going to say City and shape reported and I'm going to uh say how equals any okay so this is saying I want to drop uh a row if either City or shape reported are missing if any of those two are missing for a given row I want you to drop drop it I want you to drop the row okay and we're left with about 15,000 rows okay now you can change this again you can change this to how equals all and that means only drop a row if all of these columns have a missing value for that row and this time only four rows gets dropped because there were only four rows where both city is missing and shape reported is missing okay all right as always we're going to end with a bonus and we're going to talk about filling missing values and um so let's take a look at our our old good old friend value counts so UFO bracket uh shape reported do value counts and value counts is saying how many times did this value occur in in the shape reported Series so the most common was light we've got dis triangle Circle cigar rectangle egg lots of fun values in here okay so you might be thinking wait a minute that doesn't add up to 18,000 and you're right because by default missing values are excluded okay so we if we say drop na equals false we can see that shape reported has those 2644 missing values okay and we saw that uh up here those 2644 missing values Okay so what if I wanted to F fill those in maybe I thought and and what to do here depends a lot upon an understanding of your data but you might think well maybe I should fill in the Nan's with various that kind of makes sense for for it being missing so to do that I'm going to use another method called fill na so I'm going to say UFO shape reported fillna value equals various okay and I'm going to say in place equals true which means make the change in place okay in in the UFO data frame and I'll run that and if I rerun the value counts you'll see that various now has the 333 that were already there and then all of the missing values were converted to various okay so that's it for today uh thanks so much for joining me as always if you want to see more videos like this please click subscribe and then let me know in the comment section below if you have a tip for others or a comment or a question and that's it so I hope to see you again soon"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Detecting and Removing Outliers with Python",
        "Video Title":"How to Detect and Remove Outliers in the Data | Python",
        "URL":"https:\/\/www.youtube.com\/watch?v=Cw2IvmWRcXs",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Cw2IvmWRcXs\/hqdefault.jpg",
        "ID":"Cw2IvmWRcXs",
        "Publish Time":"2022-05-04T12:30:02Z",
        "Channel":"Hackers Realm",
        "Channel ID":"UCX7-Wi9ioslA9691INtFO5Q",
        "Transcript":"hello everyone this is sashfin here in this video we are going to see how to detect and remove outliers so removing outliers is an important task and it is also used in order to find some anomaly detection in a data set so this will be very useful if you are doing some pre-processing and improving the quality of data now let's get into it first uh i'm gonna use wine quality data set for this i have already loaded the data set now i'm going to use one particular column called residual sugar so i will also get the details df of describe of the whole data so i'm gonna use this residual uh sugar so the minimum value is around 0.6 and the maximum value is around 65. now let's plot the data sns dot disk plot df of residual sugar run this now you can see there is definitely an outlier because this data is completely right skewed now in order to see the outliers very clearly we can use box plot to see outliers clearly sns dot box plot df of residual sugars now you can clearly see the interquartile range is in the range of like 0 to 18 or something and remaining rest of the things are considered as outliers only few of the samples are outliers so what you can do is we can use different methods in order to remove this outliers first method we are going to use this z-score treatment so this is the first one z-score method so first i will explain how this method works so let's open up a paint now here you can see i'll just draw a distribution of a normal distribution like this so this will be considered as like mean and that will be zero and we will be having standard deviation i will say one standard deviation two standard deviation and three standard deviation so all these things are standard deviation for my diagram so this will be mean and this will be standard deviation what we'll be doing is we'll be taking only uh the values that is in in the range of 3 standard deviation so i will take plus or minus 3 standard deviation so so i'm gonna take until these values so this will be considered as a lower limit and this will be considered as a higher limit or upper limit so i will call it as upper limit and this will be lower limit okay both are l okay so this is the first method we are going to use so we already plotted the distribution now i will say upper limit upper limit equals df of residual sugar dot mean minus sorry plus 3 multiplies df of residual sugar dot standard deviation so this is 3 standard deviation i am getting so similarly i am going to get the lower limit so this will be minus to get the lower limit okay after that let's print it so upper limit upper limit and lower limit okay now you can see this is the possible upper limit that we can consider and this is the possible lower limit we can consider but the lower value is around like 0.6 so in the negative side it's not an issue but on the upper side we are going to consider around like 20 so as you can see these are the values are considered and rest of the values will be removed so using this limit first let's find the outliers find the outliers and this is find the limits so to find the outliers what we can do is d f dot log of d f of residual sugar that is greater than upper limit or df of residual sugar less than lower limit okay and from this let's display it okay i think we can use okay you have to do it in brackets because this will return a boolean value if you do it as a comparison run this now you can see these are the outlier values that is in the data frame now that we find the outliers we can do two things one is trimming and another one is capping so first we will see trimming trimming means delete the outlier data new df equals again we'll be doing the same condition but instead of finding the outliers we are going to remove it so we have to do the opposite so i will take the values that are less than the upper limit and i will take the values that is greater than the lower limit now i will say len of df maybe we'll just print so this will be new data new data and another one old data len of df now let's run this okay this is and instead of r run this now you can see uh the old data length is 6497 and from that we have removed some outliers and after that it became six four six nine so this is uh maybe instead of uh having like old data before removing outliers and after removing outliers like that we can have run this now you can see the clear difference so i'll also have a print statement called outliers equals lenov udf and len of old df minus total 28 outliers has been removed so this is how trimming works another way is capping capping capping means what you can do is so you will be setting the outliers based on the upper limit and the lower limit change the outlier values to upper or lower limit values so this is called capping if you don't want to delete the whole row you can do this so for this i will copy a new data so df of copy and before doing the capping let's also see how the data looks like after removing the outliers so sns dot box plot of new df of residual sugar now you can see the outliers has been removed from this data we are we have converted to this one so few other data is there so this is the allowed outliers but this is far more better than we have before so that's good now let's do the capping part and see how the data looks like so here new df dot location of udf of residual sugar is greater than upper limit and we have to change only the residual sugar column sugar equals upper limit so what i'm doing is i'm just filtering out the data which are outliers that is more than the upper limit value i am just getting those values and replacing with the upper limit so this is called capping we are just capping the data into the limits so this will do it for the upper limits and we'll do the same for the lower limit instead of using this sorry this will be here okay now that's done let's run this and again let's display the data okay here i have made a mistake this is less than lower limit now you can see we have capped the data so we didn't delete any of the data you can check by checking the length lenovo df so this is 6497 that is equal to the old data we didn't delete it but we have capped the outliers so this is another way of dealing with the outliers so so far we have dealt with z-score method and the next one will be a interquartile range method so interquartile range method so in the interquartile range method we'll be dealing with this uh box plot visualization we are going to take the 0.25 and 0.75 quartile that is the first and third and multiplies by 1.5 of the interquartile range will be getting a upper limit and the lower limit okay let's get into it now again i'm going to copy the data i think we don't need to copy it now first i will uh take the q1 so that will be q1 equals df of df of residual sugar dot quantile of zero 0.25 so this is the first quartile and q3 q3 equals again df of residual sugar dot quantile here it will be 75 this is the q3 and to find the interquartile range iqr equals q1 q3 minus q1 so this is the interquartile range let's run this we'll be getting some values let's print that so print or just q1 q3 and iqr so this is the first quartile that is around 1.8 as you can see here and q3 that is 8.1 so that is around here this edge and the interquartile range is 6.3 that is the difference between the quartile 1 and quartile 3 so those are the values now we are going to find the upper limit and lower limit again so upper limit equals q3 plus 1.5 multiplies interquartile range now the lower limit lower limit equals q1 minus 1.5 multiplies i q r so this will give us the possible upper limit and lower limit let's also display those values so lower limit comma upper limit now as you can able to see this is the possible lower limit and this is the possible upper limit as you can see around 17.5 so this is the line and here this is the line but we have the minimum value around at 0.6 that's why it's not stretching to minus 7. the values that is not in the range of this limits can be considered as a outliers so again i will just plot the data s dot box plot because this will be much more better to see the outliers so here you can see all these dots will be considered as outliers okay let's do the processing again trim the data so what we have done before for trimming so before that we will just find the outliers we are using the same values so we can just copy and paste the code again so these are the values around 118 rows has been found now we will trim the data so here you can see 120 outliers has been removed from the data set now let's do the capping and also before that i will again show you the plot how it's changed now you can see all the additional points that are not in the range has been removed again we will just do the capping plot it again now you can see all the values has been capped so this is a clear box plot without any outliers so these are the good methods you can apply okay that's done for interquartile uh range method now the next one will be percentile method so percentile method so first again i will explain what it does so we have a drawn a graph like this right i'll just uh move aside again i will just draw a normal distribution okay so this is the whole data distribution what we are going to do is i will just remove the first one percent of the data on the left side this is around here 0.1 and i'll also remove the data around like 99 percent so this will be 0.99 the data that is less than one percent and the data that are more than 99 will be considered as outliers and can be removed so this is called percentile method again to get the upper limit and lower limit we are going to use the quantile so i can just directly go like this upper limit equals df of residual sugar dot quantile so upper limit will be 0.99 that is the max possible value lower limit again the same syntax but here it will be 0.01 i think even in the diagram this will be zero point zero one denoting the one percent okay now we have defined the upper limit and lower limit let's display it print upper limit again print lower limit okay now you can see this is the possible upper limit that it allows and this is the possible lower limit that it allows so again for keeping up with the original data we will display it so this is the original data first again let's find the outliers i'll just reuse the same code so now it's around like 97 let's trim it so these are the outliers that has been removed you can also set it as greater than or equal to sorry less than or equal to in order to do this so this will allow the upper limit as well maybe i can do the same thing in the above representation as well and here also i can do the same so i'll just run this once again it's not showing the number of layers now here it is around 28. okay this is done and here also we will do the same around 120 has been removed now for the percentile here you can see around 97. so it removed around like 99 outliers and this is the data we are getting after removing the outliers now let's do the exploration again so this will be new df so again you can see from this representation it changed to this so we have removed data that are less than one percent and more than 99 so this is trimming now let's do the capping let's again display this as you can able to see it's giving us a similar representation as uh trimming without losing the data so this is it guys these are the various method you can use in order to detect and remove the outliers so i suggest you go for a capping method because it didn't remove the values but it will change those values in that particular column but it will give you a good representation of data and it will also remove the outliers let's also display that graph with this plot to see how it looks now you can see all the skewed distribution has been removed maybe for the comparison i will also use the original data so this is the original data and after removing all these out layers the data looks much more better so the distribution looks much more better in the disk plot so you can use these two plots in order to detect outliers and transform the data in order to get good results or improve the model performance and that's pretty much it guys in this video we have seen three methods z-score method interquartile range method and lastly we have seen now the percentile method if you have any queries around this topic please leave a comment below apart from that if you like the video hit the like button and don't forget to subscribe the channel for more videos stay tuned for the next video"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Detecting and Removing Outliers with Python",
        "Video Title":"Outlier detection and removal using IQR | Feature engineering tutorial python # 4",
        "URL":"https:\/\/www.youtube.com\/watch?v=A3gClkblXK8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/A3gClkblXK8\/hqdefault.jpg",
        "ID":"A3gClkblXK8",
        "Publish Time":"2020-05-29T12:30:02Z",
        "Channel":"codebasics",
        "Channel ID":"UCh9nVJoWXmFb7sLApWGcLPQ",
        "Transcript":"in this tutorial we will be removing outliers using IQR technique as usual we'll go over some theory first then we'll write code in Python pandas to remove the outliers and in the end we'll have an interesting exercise for you to solve here I have a heights database now visual examination you can easily tell that there are some outliers here these heights are in feet of course you cannot have a person with 40 feet height hence these all of these are outliers you know anything more than 77 point 1 similarly this is an Adel data set hence one point to height is clearly these two heights are outlier now how can you detect the same thing using an IQR technique in order to understand IQR you first need to understand percentile now what is percentile well percentile is basically for example here I have this five point three file which is 25th percentile it is also called q1 25th percentile value means in your data set 25% of samples are below this value total samples here are twenty twenty-five percent of twenty is five and five samples here are having value less than five point three five you see 5.0 5.1 all these values are less than five point three five hence this is 25th percentile similarly 75th percentile will be a value which is six point twenty seven so 75% of samples are having value less than six point two seven I hope you get it so that's why six point two seven is called 75th percentile your maximum value will be called hundredth percentile because of course all the values are below that value similarly minimum value will be called zero percentile because that doesn't have any value less than that particular value right so this is a quick summary of percentile now once you know percentile you can easy calculate IQR by dipping q3 and q1 here q3 which is 75th percentile is 6.27 - 5.35 is q1 point nine to five is your IQR value now to remove outliers you need to come up with lower and upper limit your lower limit will be q1 which is 25th percentile - one point five IQR now IQR if you think about it is just if it is this distance you know it is this much distance so you take that distance multiplied by 1 point 5 so you add 1\/2 into it and then you extend that from here so from 5 point 35 minus 1 point 5 and you get this value 3.96 similarly upper limit will be q3 plus 1.5 IQR you know they just came up with this number you can just remember this that you have to do 1.5 IQR plus q3 to get your upper limit once you know the upper and lower limit you can exclude audit all data points which has value less than a lower limit so 3.96 see these two are excluded there they are termed as an outlier and any value a bow upper limit which is 7 point 66 can also be excluded so you can clearly see that these two three values are now excluded so just by looking at this data set visually you can kind of say that IQR is kind of working okay in this case because most of the people will have heights in this range adult having height two point three feet is very very it's probably not not possible and adult having a height of 14 feet is also not possible the person doesn't need stairs if he has this much height and just go to your first or second floor all right let's get into coding now i have that height CSV here and I'm gonna load that into my notebook and it will look something like this so here is my data frame and now from this data frame I will quickly do DF no subscribe describe to see the statistics so you can see that when this is 25th percentile value 75th percentile value maximum is 4 T minimum is 1 point T I always use describe function because it can tell you those quick stats ok now let's calculate Q 1 and Q 2 now by the way you can get Q 1 and Q 2 from here as well but the other way of getting Q 1 and Q 2 is you take your height column and you say quantile quantile is a function so one time and if you want 25th percentile this is what you need to do and if you need 75th percentile this is how you do it and I will quickly print q1 and q3 so these are my percentage value IQR will be very simple formula guys this IQR is really a very very simple technique IQR value is this and now I can easily find my lower and upper limit using this formula so I'm doing q1 minus 1 point 5 QR q3 plus box 1.5 QR these are my upper and lower limit and once you have upper and lower limit in a data frame you can easily detect these outliers by doing this you can set height less than lower limit or height greater than upper limit those are my outliers and you can clearly see see all these are coming as outliers these are the same ones that we saw in our presentation the cells marked in the yellow color all right now if you want to remove these outliers from your original data frame what you can do is something like this so I'm using and condition I want to make sure the remaining samples are within this limit of lower limit and upper limit okay and the resultant data frame that you get you can maybe store that into a new data frame call it DFM outlier and this is how it looks alright so that's all I had now the most interesting part of this tutorial which is an exercise believe me I'm not giving you any hard assignment these are very simple assignments but it will consolidate your understanding once you practice it on your own what you're going to do is use the heights and weights data set it is very similar to what I use but it has height and weight to parameters I got this file from this giggling you can download it or if you don't want to download it you can just go to my github page and you will find it in the exercise folder and then you need to plot histograms first for weight and then for height and then use IQR to detect outliers based on weight and then do the same thing based on height now I have a solution link but I know you you all are very good students since the students so you're not going to click on this link until you have practiced this on your own all right thank you very much for watching I will see you in next feature engineering tutorial"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Detecting and Removing Outliers with Python",
        "Video Title":"Removing Outliers in Data Sets with Python",
        "URL":"https:\/\/www.youtube.com\/watch?v=uFuIBjmDMCE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/uFuIBjmDMCE\/hqdefault.jpg",
        "ID":"uFuIBjmDMCE",
        "Publish Time":"2019-11-03T14:43:35Z",
        "Channel":"techWithId",
        "Channel ID":"UC3p7uk7aajbSwgkCgyvZIhg",
        "Transcript":"alright so in this video I'm going to be showing on how we can detect outliers from the IQR majority to co-sign remate also here I've set my lower boundary at 0.1 and the upper boundary the upper boundary at 0.95 this is the standard for the IQR method to the next I did was Jose I just defined the half lion I said he hated each the cons I'm on a flight back to our boundary boundary so that's just prints they have my eyes on that see what that returns to host advice so let's see what it returns then why that is running there is now do some some things ok so let us say our accepted values or accepted huge accepted alright so we can see here that you know or if the code was a ton for 0.10 change for was returned and 0.95 c3 was returned it means that anybody below 24 is an outlier and any value that it opposes the theory is an outlier that is what that's what unless they are accepted accepted each said that on the scope age because he grows say don't bracket that with outliers dots location Rockhead Oh No that's called great brach a palisade the air a values again you know I'll have to pass about you syntax the value key is just or so that that computer can see the mandatory see and Rocka or safety air ducts then less than yes our lives open square bracket and we Oh unless we come and call me man because yeah we said we said did rejected I lose each he said open bracket there we said it was values less outliers at last the look on the square bracket they say the walk they were boundary and we come outside of this rock you never see again rakesh the stage don't values greater than created that liars let's knock a great house No so who's gone so this is this our rejection and accepted times regio so we just say then we will say luggage and then say married really is Valley each equals mrs. Roenick age equals a TF on a square bracket and accepted that mind you eat case-sensitive accepted age that's there he we know we get out you can print parity and say cranes brilliant and each let's see what that returns to us so that it turns to us why that is running out so then there was way too much of time you can guess what this line of code is going to be okay it's the next line of code like what I want to do is that I want to actually try to print I don't actually try to your boundary is not mine so that's a typographical error [Music] I've made a lot of mistakes all right what else it is print I want to view he said as long as another initiator tongue something's yours okay so we can see now that we are we have the pages with now they have lives okay so this is a DS this this gate has been actually redefined and shorted out so there is a little more outlier in this okay so we can't buy any Alya in this in this because the next we're gonna do is we're gonna float the Box not for you so like I was saying I want what I want to do is I want this valid each and I want you I want you happy to add it a pretty home datasets so you can guess what I'm going to do you can pause the video for three seconds and maybe write out a code or try it on your computer and guess what I'm gonna do next okay so please is what I'm going to do it so you welcome back posted video and if you did it no problem so let us just go on just worry about the core don't worry all right so you better get it later alright so I'm gonna say the by the page I've done this before okay we have body age sorry super small eater each equals because one each each alright so what I want to do now is want to confirm keep the heartlands actually be removed and you for the way to confirm the face really confirm now we can use the box for netball okay you can just post video and you know write out the code for the box plot there we go particular value all right so this is this is it so we're going to say we can use you see about each and don't lord let's see what so that she can hold for that that's me here's a sweet worry Jenny patiently wait for it all right it's coming all right so this is it so we can see this box for got this box right here you can see that they have matter remove and the huge lies between this concentrator between 25 and sorry between the eight or soon and Petey 52 and the whole population of lines between of 65 their bow and 24 Oh JC so I change these alright thank you so much subscribe"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Processing with Python",
        "Topic":"Detecting and Removing Outliers with Python",
        "Video Title":"Find Outliers with Python- 4 Simple Ways",
        "URL":"https:\/\/www.youtube.com\/watch?v=NEuU1gaUyww",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/NEuU1gaUyww\/hqdefault.jpg",
        "ID":"NEuU1gaUyww",
        "Publish Time":"2022-06-18T07:41:44Z",
        "Channel":"Absent Data",
        "Channel ID":"UCSQvwTdavISOusGhJW6H0Vg",
        "Transcript":"hi i'm going to show you how to find outliers in your data using traditional methods such as iqr and box plots and i'm also going to show you how to use some algorithms to actually identify different outliers in your data with different sensitivities based on that particular algorithm so let's get started so we're looking at the data here and if you look at the image that's on the screen now this is an isolation force algorithm and we're going to get to that but let's kind of start at the beginning and see what i've put together so as normal we bring in our packages i brought in pandas numpy matplotlib plotly and i filtered out some warnings and then i also looked at our data here so our data we could take a quick look at that by creating a cell and i'm just going to use my df.here because what we're looking at is website data so if we look at the head of the data you can see that we have our sessions in the different outlier detection methods that we're using and i'm going to walk you through this but what we're essentially looking at is sessions with a date column and if we visualize that we can look visually so one of the methods to determine outliers maybe domain knowledge or just by eyesight so we're looking at this with the naked eye i think we can hover over this and we can say okay that's probably an outlier on may 25th we have 4822 sessions and here we had six thousand four hundred and two and all i've done is created a plotly graph with uh the plotly saved as a variable px created a line chart and brought that in so we can keep an eye on these two dates the 25th and the 30th and probably say okay that's probably where our outliers gonna fall so let's get into the first method which looking at a box plot and iqr so [Music] this is a box plot we can see the median and we can see the minimum and maximum range of our data and everything that falls outside of those whiskers is going to be an outlier and you can see the outliers here are in green and we're going to use the same method to see our outliers within this data so i've used plotly again to create a box plot and then we have the range of our data we have our whiskers here and then you can see we see two points and we can see one of those points has a 4 8 uh 4 822 which was the peak here and then the other one that we see is the 642 sessions that happen on the 30th which would be here so we already have one method that we can traditionally put together so what we want to do is be able to put that detection in our data frame and this is just a violin plot you can still see that we can see the two outliers here and the shape of our data which kind of mirrors our box plot and i've just brought that in with plotly and a violin plot i brought in the data frame and isolated the sessions so our next step is to create a function and we're going to apply this function to uh to our whole data frame so we can see that what i've done is created a function called traditional outline and that's using that iqr method i've isolated first quartile and the third quartile using the quantile function that we can attach to a particular column and what i'm doing is in this function you're going to pass in the data frame and the column that you want to have this executed on and that column is going to be represented by x so once we have those two we can subtract to get the iqr and then after we have the iqr if we go back up to our box plot image it's just an easy formula where we're looking at the maximum which is q3 plus 1.5 times iqr and then the minimum which is going to be q1 minus 1.5 times iqr so we build that into our function and we create a new column called traditional we can call it whatever we want and i use the numpy where function which is a conditional and it's saying if if our column and i put these in double brackets because it needs to take a series if it's less than that minimum threshold which is q1 minus 1.5 times iqr give me a negative one also if it's greater than q3 plus 1.5 times iqr give me a negative one everything else is one and the reason i'm not using zeros and ones is because our algorithm is also going to be using negative one and one so it makes it easier when we want to filter we can take that function which is called traditional outlier and we can pass in one eye data frame which was saved on the variable df and then our column that we're concerned with is sessions once that's run you can see we have negative one here which matches our date on the 25th and we have our negative one here which matches our date on the 30th so we're in business with the particular outliers there are no more outliers in here so now we can jump onto the algorithms and use those so the first one we're going to look at is isolation force and this uses a decision tree to look for anomalies and it here's a visual that's going to represent that let me zoom out a little bit so you can see it's it's doing a tree fashion and because it's called a forest because we're using multiple decision trees to define what that anomaly it or outlier is i bring that in from sk learning some ensemble and i import isolation force and then what i'm doing here is i'm fitting our data to the function and then i'm fitting our data which is the sessions i also use double brackets to make sure it's a series that can be brought in and then i'm predicting over the same data frame to tell me okay you've looked at the data by fitting it and now give me the predictions on what those particular outliers are and if we look at the array that is brought back you can see we have a negative 1 here a negative 1 here a negative 1 here negative 1 negative 1. so and also a negative 1 here so this is already much more sensitive than that traditional iqr method let's go down to the next one so now we're looking at what we call elliptic envelope and this uses a gaussian or normal distribution and looks at what falls outside of that data range and we did the same thing we used sklearn.covariance we imported that particular library and then we brought in the function we fit our data to it and we run that over our existing data with a prediction and you can already see we have one two and a little less three four than the previous one and we're going to look at all this together in one minute the next one we're going to be using is the local outlier factor now we're going to be bringing that in from the the sk neighbors uh library so you can think about like k n how we look at the distance from a particular point to determine what an outlier is and we can also specify the sensitivity of this outlier by saying look at the five nearest neighbors and then determine what an outlier is and you can see the result here we also have some negatives that we're going to look at in one moment now the next job i want to do is i don't want to like run that all together i'm going to put that in a function and run it over the data frame so i've already done traditional with a function so i'm creating another function and then we're going to put both of these together we're looking at the same data being run under that function that function takes the data frame and the column which is represented by x and then we essentially create new columns by naming these columns and then using that same method of fitting the data and predicting over i run that function and this is what we get back because it's going to return a data frame and what we're going to get back we can already see and let me just zoom in a bit more here we can already see where those outlier detection systems are going to classify outliers so each one of those has a benefit each one of those has its own sensitivity for example traditional we know we only found two points and this one we can see that isolation force considers this very low value an outlier but this was not detected on any of the others so isolation force is really good for very large data sets because it's super sensitive and if we keep rolling down we can see that yes the fit the 25th was found across all of our methods and then we can see that isolation force here is still finding quite a lot and there's another low one so you can see it's it's pretty good for that low outlier the 30th which had our highest value is also detected we can see the traditional method is not being picked up here but we have all of the outliers finding these so the benefit of each one of these has different properties we know we can use the neighbors the local outlier factor and modify neighbors to make our outlier sensitivity a little bit better we know if we have a normally distributed data set we can definitely use this elliptic envelope method and for isolation forest we know that it works a lot better for large data and a little bit of the lower and outliers and it's it's much more sensitive so the last part what we want to do is just create one singular function that you can repeatedly apply to your data and all i've done is taken that original function dumped it the first part here to get traditional and you can see that and i've just brought in the second part and what we get is a resulting data frame where we can look at all the different outliers i hope that was helpful leave a comment or suggestion thanks for"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Matplotlib for Data Visualization",
        "Video Title":"Learn Data Visualization with Matplotlib in Python: A Beginner\u2019s Guide",
        "URL":"https:\/\/www.youtube.com\/watch?v=gvn8RIG38CM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/gvn8RIG38CM\/hqdefault.jpg",
        "ID":"gvn8RIG38CM",
        "Publish Time":"2024-07-25T14:00:38Z",
        "Channel":"Code with Josh",
        "Channel ID":"UCwcXQMYphMbpuw8ok9HQguw",
        "Transcript":"today you're going to learn data visualization with Matt plot lip we're going to use real Airbnb data to perform exploratory data analysis learning how to create plots and subplots along the way we're going to do all this through interactive lessons that I've prepared for you guys as well as interactive code that's going to help bring your visualizations to life Welcome Back to the channel welcome back for another Epis episode of Code with Josh for obvious reasons I'm Josh and I'm stoked to have you guys here on the channel do me a favor hit that like button and subscribe that really does help me a growing Channel within the YouTube algorithm all right so like subscribe it's right here before I dive into the video okay the first link in the description is going to be the Airbnb data set that I use in this video and as a challenge I've included a question for you guys that I want you to create the final chart in our subplot today well that's all I have here let's dive into why you're here data visualization with M plot lip all right guys here we are in the intro to data visualization and you can really think of this as exploratory data analysis and it's going to teach you guys how to use matplot lib with pandis okay let's dive right into it so which is better better okay very quickly most of us are visuals so we're going to say the right pie chart all right but everything we've been working with is really just pandis and I've put that here on the left now if you've missed it this is my data analytics series and I have been building each episode up until now to guide you guys through and give you a very good General understanding of pandis and now M plot lip we've covered an intro to pandis I've covered filtering and grouping as well as cleaning our data and aggregation okay that's a lot to cover right so everything we've worked with is over here on the left now we want to take this data and I want to create a nice visualization because most people are going to interpret this a lot faster all right so this is the goal of mat plot lip Okay let's check out the basics when it comes to map plot lip Okay we are going to start off by importing well pandas but then also map plot lib itself and map plot lib has a module called pip plot we want this module and I'm going to nickname it PLT this is a very popular naming convention you're going to see this quite a lot it's just like with pandas we typically call PD matap plot lib is typically called PLT for plot okay now the two methods that you need to get started right out of the box are these two okay plot it takes three arguments we can give it more okay quar keyword arguments but it takes an x a y so typically this is going to be pandis data right what do you want to be your xaxis your y AIS and then the kind the type of graph so for example down here this is what we would call a line graph right you could have a chart a histogram a scatter plot and I'm going to cover this with you guys here in the next slide but this can be replaced and this is going to quickly construct us a chart with our data frame once we create the plot all you need to do to show the plot is use the built-in show method that comes with matap plot lip that's really it all right so let me break this down to the different types of charts we have that we're going to use in today's episode okay so map plot lib has a lot of charts that's why it's one of the best modules for data visualization right so here we have the type of chart we have the plot method I just covered this and then we have the method we could use to further our customization all right now I'll cover this more so if we create a plot and I want to create a scatter plot inside plot I would just say kind equals scatter right or maybe I want to plot the kind of a histogram so kind equals histogram everything we've talked about so far is done with plot and you can see these light bulbs these are your tips for the day okay so plot it just uses the built-in capabilities of pandis and this is a lot faster and almost better for your initial exploratory data analys Anis okay so I can quickly plot columns and rows within our data frame using the plot built-in method from map plot lip but if we want to take it a step up a level all right if I tap into map plot lib and then I can link any chart method so these are the methods so PLT doline PLT do scatter and what this does is this takes your visualization a step further it's going to allow you for more flexibility control but more importantly why I tend to drift towards this one is customization right because we can do some pretty crazy things with our charts and the customization options are endless all right so spinning things up plot is great to get started and we're going to use this today and then for more customization we are going to use scatter right in today's episode I'm going to use both of these to show you guys and remember the link in the description the first link in the description is the same data set I'm using and I actually want you guys as a challenge to create the sixth and final plot in today's episode all right this is going to allow you to practice everything you're learning here on the channel okay so let's look at some code how can we spin up our plot rather quickly using plot so we go through we do our Imports I create my data frame and this is the Airbnb CSV data that is in the is and this is the Airbnb CSV data that is the first link in the description okay so head on down get the data um and I try to use these okay I've created a challenge for you guys um inside Airbnb we have a column for price for all the homes on aab BNB so I could just take the entire price column and I can plot that okay and notice I didn't put anything inside here okay so naturally it's just going to create a plot for me and I'm going to show you guys the style of this plot we can then give further customization options I can give a title for the y axis I could give a title for the overall plot itself okay now these two are going to help with organization it's a key part of visualization if you just create a plot with no names or no titles what the heck am I looking at okay so be specific and remember really all we need to get started would be this line and then we want to show the plot pretty cool okay but now let's say we want to give a few quarks okay so a quar is a keyword argument you can think of a quar like a python dictionary every dictionary has a key and a value well here we have key equals a value this is a quark okay so I can take my entire data frame here and I'm going to plot but this time I'm not going to use the standard plot I'm going to say it's going to be a scatter plot I want the X to represent the price and this is going to Target the price column within our data frame because we're telling it to and then the Y is going to be the number of reviews once again I can give it a title and I can show it pretty cool okay very cool now this is the basics because we're just using a plot but remember we can customize this further if I go back we have all of these methods here okay and today I want to teach you guys how you can create a subplot so here is the subplot I'm going to be making with you guys and I actually want you to picture the subplot as a window okay so over here is a window window um and if you think about the window has a frame right the frame goes around the outside of the window this subplot the entire frame is the entire canvas itself and then within the frame we have window panels one 2 Etc one two Etc okay so we can really customize this however you want to create it okay but I want you to think of a subplot as a window frame and within the window frame we have Windows and each window can be a different chart representing something else now if this looks overwhelming don't worry I've got you covered guys if you're getting value from this video do me a favor hit that like button and subscribe that genuinely does help me a growing Channel okay in the YouTube algorithm with a billion people out here okay so hit the like button subscribe to the Channel all right show some love okay so going forward the code for this what might this look like okay so right here is that window frame that I just had in the back imagine this as the window okay and each of these is a panel in the window okay that's really what's happening here okay so we import what we need map plot lib and then to create a subplot okay I'm creating a subplot I'm creating a figure as well as I like to think of this as an axis okay this figure here is 2 by two so I'm telling it's going to be 2 by two and then generally I'm going to give it a figure size and this is just going to be two integers this figure here is a perfect square okay but really what this means is it's going to be a little bit wider than it is in height okay the one we are going to do today is going to be two rows with three columns I want to stretch that in this keyword argument fig size is going to help with that okay so I've created a subplot now how do we get each of these to be a window in the window frame okay right because one is a histogram one is scatter bar and line well we can take our axis and we're going to use our brackets Okay so 0 0 represents the top left row0 python starts on zero column 0 this part here is 0 0 okay this would be 0 one one all right so that's how we can kind of get that so I Target the top left window frame and I say it's going to be a histogram okay so I'm going to give it an x value um bins is a keyword argument that we only need for histogram and this is going to allow for the proportion of your data um to be displayed properly in the histogram okay so typically I'll put this at like around 20 uh what we do today I'll put this as as 20 as well okay then any plot a further customization option there are plenty okay read the documentation is I could change the color okay so for all of these this refers to our histogram I can give it title X Lael y Lael pretty cool right if we move into the next box I'm now targeting the next frame of my window and it's going to be a scatter plot XY color Right Moving On we can just move on down here okay and this is how we can create a subplot that's really cool right how do we show a subplot well the built-in show method with map plot lip okay guys let's get right to it and remember if you want to follow along with this the first link in the description head on down pick up the data I'm working with the starting code okay because I'm not going to clean the data today I covered how to data clean in last week's episode so head on back check that out if you've missed it I'm going to give you that code to start with and you can pick up right where I'm at and follow along together let's jump into vs code and get our visualizations brought to life now that we're in vs code all right it's time to get these visualizations brought to life you can see that I've already gone through the cleaning process okay and I've tried to be very detailed here I left uh comments to hopefully help you guys understand what's happening but I didn't go through this because in last week's episode I spent the whole episode breaking down data cleaning from A to Z for you guys and I also included a practice unclean data set in a practice problems that you guys were able to use the skills we learned and uh do it together all right so remember the first link in the description is going to be the data set I'm using today the Airbnb data and you can access all the other practice problems that I have for you guys absolutely free okay so I'm going to run this very quickly and we're going to see this output here want to make sure everything's taken care of and then it's really on to map plot lib look at my described data I can see the data types that we're working with this is after I've cleaned it okay so everything is running great okay so my data is cleaned I'm going to turn these off okay and uh before moving on I'm going to go up top here and let's import import map plot lib if you have not installed this yet okay uh all you got to do is open up your terminal okay in your terminal I would like you guys to to run the command pip 3 install Matt plot lib okay that's all you need to do right I already have it I'm not going to do that so now in our code anytime I refer to PLT that's going to refer to matap plot lip pretty cool uh I'm going to scroll down now okay we are done up top I'm not going to go back up there again all right so let's focus on here a data visualizations all right so let's try to visualize the price just like we covered in the lesson now I'm just going to use plot for this so I know within our Airbnb data here okay we have uh where is it price okay it's a column in here we can't understand this right that's too much CSV so I'm going to tap into my data frame and we are going to say price all I want to do is plot okay so I'm going to call plot from map plot lib let's take PLT let's say y let's give it the name of price let's give our plot a name too so uh really this could be called anything I'm going to say plot of prices and then how do we show the plot well Matt plot lip I would like to show my plot let's run this to see your first chart boom and there we go right so when I am not using um any arguments inside plot you can see that it just creates a bar chart naturally okay um and we have here the prices here on the left and then all the other frequencies or the listings that we have okay so this is your first chart we tapped into the price and we plotted it very quickly okay so with exploratory data analysis this is a great route to go um I'm going to take it a step further now okay so now let's uh take our entire data frame and I want to plot Okay so now plot has access to all the columns in your data frame originally I didn't give plot access to it I only gave plot access to this column but now it's accessing my entire data frame okay so I'm going to create a kind here and I'm going to say kind is equal to a scatter plot what do I want the X to be x equals really whatever you want to say here okay let me get that away for us uh I'm going to say here price and then let's just say Y is going to be equal to the number of reviews just like that um and if I want to be sneaky I can come in here and I'll say color equals let's say uh purple okay just like so that's awesome let's give our chart a title okay now the reason I'm not giving it a ylabel or xlabel is because we kind of did that here automatically all right let's watch what happens so I'm just going to say uh price versus num of reviews this is a different chart so I'm going to say PLT doow now I want you guys to Watch What Happens here when I've run this only one plot is going to show at one time which is kind of annoying depending on how you're looking at it so the first chart shows but when I want to see the second chart I need to close it then the next chart appears okay and you can see I spelled price wrong okay whatever uh now this is our scatter plot so it naturally has price and the number of reviews because that's the information we gave it and this is great cuz now I can really see rather quickly all the outliers I can see most of the data is Warped towards here which makes sense right because $10,000 a night for an Airbnb that's crazy the number of reviews is is probably going to be pretty low cuz let's face it how many people are going to be renting that out but when we get closer down here to like I don't know $100 a night look at how many revie how many reviews that is because that's just more feasible for most people right so what we've done so far is we just use plot on its own and remember this is great for quickly working with plots and getting your Eda up and running but but let's face it I want to start working with a subplot cuz I want I don't want all the plots to pop up individually I want them to Boom all together where I can see everything at one time this is really the power of subplot so I'm going to say power of subplot I like that okay uh I don't want these to show every time I'm just going to turn off show for now so I'm going to create a figure and then an axis okay and this is going to be the PLT they have a method there you go subplots now for today I'm going to create five different charts you're going to do one on your own using the data that I put in the description for you guys so how many um rows do I want this to be two rows three columns that's really what I want there and I I'm going to give it a fig size so fig size equals I want this to be wider than it is taller so I'm going to say 15 by 10 okay so now I've created the picture frame not the picture frame the window right the window frame let's start with the top one so 0 0 this represents the top left window okay remember that um I would like this to be a histogram okay so I'm going to use the hist method and by doing so this is not plot anymore this allows for further customizations what do I want the histogram to be so let's say like this one is going going to be like uh price versus how often it occurs so frequency okay uh so as my X I'm going to put in here my data frame price okay uh remember histogram needs bins so I'm going to say bins and then finally let's give this a color let's say something like uh I don't know light blue okay you can check the colors on map plot lib uh axx 00 I'm going to do set title okay I'm actually going to copy this a few times one two we are going to jump down here and I'm going to say x label y label okay so right here I'm just going to say price versus frequency the X label is going to be price and then um the Y label will be frequency so that's the first window frame completed that's pretty great actually I'm going to move on to the next frame so AXS square brackets I'm still in the first row zero but now I've moved to the next frame one so in this one let's try and show a number of reviews versus once again frequency how often did they occur and uh for this one we can also do a histogram okay and this time we're going to Target number of reviews you guessed it I'll say bins equals 20 uh let's change the color here let's do something like red okay pretty cool uh I'm going to copy these okay that's just faster I'm on a Mac if I hold down option I can do that in one fail swoop uh the name of this is going to be well I actually already have the name here okay so I'm just trying to be as accurate as we can because this is going to help the viewer of our data be able to interpret it faster number of reviews okay that would be the next one so let's build out the next few plots okay so let's say for the next one we want to uh I want to group by the type of room and I want to show the average so I'm going to be like uh what do I need to do group by type of room uh and show average price okay so uh before we need to do this I need to create a group really so uh what we can do here is I'm going to say room type is uh equal to our data frame we are going to group by guys remember I covered Group by in a previous episode in this series head on over to the channel check it out um if you're getting value from this please help me out hit that like button okay that really does help me in the YouTube algorithm and consider subscribing okay so Group by what do I want to group by well I want to group by the room type that's pretty standard and then once I have the group of the room I want to then section out the price okay so the price of the room type we can get the mean of that okay just like so awesome so now I'm going to go to the continue in the top row okay uh and we are going to show this by a bar chart okay so what do I want the X to be what do I want the Y to be any guesses let's say room type I have groupings so I'm going to say room type and then for my y once again I have the type so I'm going to say price okay just like so uh inside here let's say color equals let's time let's say light green okay pretty cool uh let's take all the information we had before drop that in here let's change one to say two uh here our title is going to become average price by room type okay the X what do we say the X was room type room type and then we said the Y is going to be the price all right so the first row is done I have three charts in the first row of my picture frame my window all right so now we need to move on to the bottom row and what we're going to do is I'm going to try and show the number of listings in each burrow did I spell burrow right okay uh all my data refers to NYC so we have what Manhattan the Bronx Queens Brooklyn and Staten Island that's five different Burrows so this time when we take our axis I'm going to say one comma 0er that's going to put it at the bottom now okay what do I want to do for this well this is this is going to be a bar so before the bar chart I actually need to do some stuff so let's say here neighbor hoods uh is equal to our data frame let's get our neighbor Hood group I think that's the name of it let me check yeah yeah uh oh they spelled did I spell neighbor incorrectly yeah or they spelled it incorrectly tomato tomato okay uh neighborhood group and I want to get the number of values so values counts all right that's going to tell me how many different values we have within the grouping okay uh let me take my neighborhoods that I have here and I'm going to create the columns for those and we're just going to say as a list neighborhood group I'm going to copy this uh as well as count because I want to know how many there are all right so all right we have the columns so we're turning here I am going to say neighborhoods okay as my xaxis and we are we're going to say uh neighborhood group okay that is our x axis for this cool our y AIS is going to be you guessed it it's going to be count okay I'm going to give a color in here what color haven't I used I'll say orange okay trying to use different colors let's take this stuff I'm going to drop this in here let's change everything now to be one Z the name of this we are going to say uh listings by neighborhood all right uh the X label will be what neighborhood I guess that's what we said and then we are going to say what uh count no let's say number of listings it is the count though right very nice okay uh this brings us to our last plot that I'm going to plot here that brings us to five plots guys okay so the last one let's say uh price versus number of reviews and we actually did this one together using plot up top okay uh so this one is going to be one comma one not two one this is going to be a scatter just right off the bat the x is going to be the price and the Y is going to be the number nope number of reviews use okay color for this one what haven't I used yet oh blue green red yellow I don't know let's do blue it's pretty much about it guys so I'm just going to I'm going to run this for us we're going to get the Cs an output let's just change our final styling to one one uh we are going to say price versus reviews X is our price and Y is uh number of reviews that's awesome so if I run the code nothing is going to happen why well we need to do two things um really just one thing technically we just need to do PLT doow but when working with subplots it's a good idea to squeeze everything together so I'm going to say pl. tight layout as the final one okay let's run this let's see your visualizations brought to life remember this is exploratory data analysis hit the like button guys subscribe if you're getting value oh error that's fine that's fine okay uh an exception was called okay so boom boom um the only thing uh room type one I can think of is it's getting confused with the brackets let me see if that was the issue no okay okay that definitely wasn't the issue okay so what did I miss here uh I'm going to keep one uh let me okay I'm creating a group I'm going to say reset index that's going to clear the index because we've been manipulating it so if I reset the index I'm hoping that clears it up to restore its original state no that's not working oh wait that worked actually it's just now this is a different eror this eror comes down here neighborhood group let's do the same thing here then reset index yes yes okay so make sure we reset the index on that uh bring that smaller okay so guys look at that okay absolutely incredible so we have created this initial finding and you can see everything plotted out that you can clearly and quickly VIs visualize right the entire homes that price changes the most we have a private room or a shared room the price drops drastically uh you can see here I have to space this out a little bit more for us uh Manhattan Brooklyn have the most Apartments Staten Island has the least and queens is in the middle there right this is great I've left this one blank guys all right head on down get the Airbnb data and I've put a question for you guys to try and plot I want you to try and create the sixth and final chart for our subplot there you have it guys an introduction to Matt plot lib here in Python remember guys if you got value from today's video do me a favor hit that like button okay and if you're not already subscribed please consider subscribing to the channel that really does help my channel grow and it helps it within the YouTube algorithm and remember the first link in the description is the data that I used here today as well as a challenge that you can use to practice everything you learned all right that's the first link in the description and down in the description are all the other links that can help you in your python Journey all right I've included my python newsletter down there that you guys are welcome to check out come join in my data analytics series that I have going on right now well until next week's episode of Code with Josh I will see you then"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Matplotlib for Data Visualization",
        "Video Title":"Intro to Data Analysis \/ Visualization with Python, Matplotlib and Pandas | Matplotlib Tutorial",
        "URL":"https:\/\/www.youtube.com\/watch?v=a9UrKTVEeZA",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/a9UrKTVEeZA\/hqdefault.jpg",
        "ID":"a9UrKTVEeZA",
        "Publish Time":"2018-06-11T22:09:53Z",
        "Channel":"CS Dojo",
        "Channel ID":"UCxX9wt5FWQUAAz4UrysqK9A",
        "Transcript":"hey everyone this is my introduction to their analysis slash data visualization with Python in this video I'm gonna cover why you might want to use data visualization and why you might want to use Python and map lot live for it and then we're gonna go over some simple examples of how to actually use these tools and then using these tools we're gonna do sort of a real analysis with a real data set at the end and in this video I'm only gonna cover line charts just to keep everything simple I'm also gonna put a more detailed version of this outline in the comment section below so you don't have to watch the whole thing if you don't want to okay so why should you use data visualization in the first place well error visualization is actually often the first step of any type of data analysis work whether it's simple there analysis or statistical analysis or machine learning analysis and the reason for that is because visualizing data often gives you an intuitive understanding of the data and it often helps you see patterns that are otherwise hard to see and we're gonna see an example of that later okay and why should you use Python for this well python is not the only good choice but I would say it's one of the best and the reason is first of all it's a general-purpose language that's pretty easy to use and learn and it also has many libraries for scientific computing and data science including Mapple lib and if you work at a company your company might already use Python for something else and if that's the case that's really nice because then you and your team are not gonna have to learn a totally new language to do some data analysis and why are we using Mapple live for this well Mapple live is not the only good visualization library for python but it's still one of the most popular choices and there are actually other libraries that are based on MATLAB so if you learn MATLAB it's gonna help you learn these you know other libraries for example this one called C born later on if you want to and Mapple lib is also pretty easy to get started with anyway let's dive into a demo for this demo we're gonna use something called Jupiter notebook and a few other Python libraries and we're gonna use anaconda to install them if you're not familiar with JIRA notebook and anaconda I have an explanation about them in my Python tutorial video so I'm gonna leave a link to that in the description anyway to install anaconda just search for anaconda Python or directly go to anaconda org and there find the button that says download anaconda and select whatever OS you are using I'm using Mac here and click download under Python three-point-something version instead of python 2 point something because we're gonna use python 3 here and select where you want to download this package save it and once it's downloaded open up the package that you just download it and then just click continue continue continue continue agree install for me only you or install on the specific disk it doesn't matter which one and continue and click install and this process is gonna take a while after some waiting you might see this prompt to install microsoft vs code we don't need that so let's just continue here and then close and then to launch jupiter notebook you can do it through this thing called anaconda navigator so just launch it like you launch any other application just dismiss whatever comes up and then click launch in that jibra notebook section and then you should see a browser window show up with the jupiter notebook interface now if you want to follow this tutorial the first thing you should do is you should create a new folder let's say on desktop and let's call this one data visualization and we're gonna put all our data and to put a notebook file here so let's first download our data to do that just go to CS dojo dot io slash data and download these two files sample data CSV and country's that CSV and then put these CSV files in the folder that you just created data visualization after that go back to the Jupiter notebook interface and you can just navigate to desktop and then the folder that we just created data visualization and to create a new jabber notebook file here just find the new button on the right and click Python 3 right now this notebook file has untitled as the title so let's change it to data visualization with Python click rename and you have a notebook called data visualization with Python you can check it just by going to desktop and then to the folder that you just created and you should see that there's a file called data visualization with python dot I PI and B and it's really important that this notebook file is in the same folder as the data that you just downloaded countries that CSV and the other one and once everything is set up just right in the first cell import pandas as PD this means we want to import a module called panels as P D or we want to give it sort of a nickname and that's going to be P D you can run the cell by clicking this button and now pandas is imported as P D and here we're gonna use pandas for importing and using some data from our CSV files and we need to import another module here so for that just right from my plot lib import PI plot as PRT so this says from the matplotlib package import PI pop module and then call it PLT let's run this cell and now PI plot is imported we're gonna use PI plot from Apple lib for making our charts so here let's first take a look at a really simple example of how to use PI plot so here I'm going to write x equals 1 2 3 it's a list of 3 elements and y equals 1 4 & 9 and to plot this set of data you can just write PLT the plot X comma Y and this plots X on the x axis and y on the y axis and then you can show this graph by writing PLT - OH when you run the cell you should see a graph like this you see that the values of X our one two and three as expected and the values of y are 1 4 & 9 if you want to add a title to this graph you can do so by writing PLT dot title tests plots right after the plot statement before the show statement and then you can add an X label and the y they bow as well by writing PLT dot X label let's call the X label X and Quixote dot y label let's call it y label Y here and when you run this cell you see that there's a title called test plot and the X label called X and why they both called Y okay what if you wanted to plot multiple lines here well to do that let's create another list let's call it D and this one is gonna have ten five and there inside and to plot X and D on top of x and y you can just right PLT the plots X comma Z right after PR T dot X comma Y and then let's fix the Y level here to Y & Z and when you run this cell you should see these two lines so the blue line represents x and y and the orange line represents x and z so PR t dot plot x and z plot x on the x axis and z on the y axis but right now it's kind of hard to tell which line represents which data so we can fix it by adding a legend statement let's add that after the y level statement by writing quixote dot legend parentheses square brackets double quotes this is y comma double quotes this is Z so note here that this legend function takes a list as an argument and when you run this so you should see this legend that says the blue line is this is y and the orange line is this is d okay that's the basics of body now let's see how to load data from a CSV file for that you can just write sample and the score data equals d or pandas that read CSV by the way I just press tab here to do autocomplete and then parentheses sample underscore data dot CSV now before you run this cell make sure that the notebook file data visualization with Python that I PI and B is in the same folder as sample data dot CSV when you run this cell this data sample data dot CSV is loaded by the pandas module which we call PD and then it's assigned to this variable called sample data you can check what's inside this variable sample underscore data just by writing sample underscore data in this new cell and then when you run this cell you should see something like this so as you can see this data has three columns column a column B and column C and five rows and you see a bunch of values inside this table if you want to check if this set of data is exactly the same as the original data you can do so by opening up the original data file sample data dot CSV with Excel or any other spreadsheet application and when you open it you should see exactly the same data column a column B column C with five rows with a bunch of values okay the only difference that you might see is that in Jupiter notebook you might see these numbers zero one two three and four and these are just indices for the rows and you can check what type this variable is by writing type parentheses sample underscore data and when you run this cell it says that this is pandals d'accord a friend data frame so this is a data frame type that's defined by the pandas module and the data frame type is used to contain a table like piece of information just like this one okay now what if you wanted to plot data in this data frame for example the values of column a on the x-axis and column C on the y-axis what to do that you need to be able to retrieve a specific column and you can do that by writing sample underscore data dot column dot C column underscore C when you run this cell you see that a column see its retrieved it has the values 10 8 6 4 and 2 and the numbers you see on the left are just indices 0 1 2 3 & 4 just like before you can check what type this is by writing type parentheses sample data column C and when you run the cell you see that this is Parnell's duck or that series that series so this is basically a series type that's defined by the pandas module and it's a type that's used to store a series of values for example these values 10 8 6 4 & 2 now what if we wanted to retrieve a specific value out of this series well if you want to retrieve for example the second value here 8 you can do so by writing sample data column C dot I'd lock I LOC square brackets 1 and this retrieves the second value of the series 8 and if you want to retrieve the third value 6 you can write I lock 2 and that gets the third value and if you want to retrieve the first value you can write I lock 0 and this should give us 10 and it does ok and using what we've just learned here we'll be able to plot the data in this data frame so let's say we want to plot column a on the x-axis and column B on the y-axis we can do that by writing PRT dot plots sample data dot column a comma sample data dot column B and we can show it by writing PLT that show let's see how it looks we have 1 2 3 4 and 5 on the x-axis and on the y-axis we have 1 4 9 16 and 25 as expected if you want to add a column C to this data you can write PRT dot plots sample data dot column a so let's use column a as the x-axis again and the sample data dot column C when you run the cell you see that there are two lines here just like before if you want to make this graph a little bit easier to read you can add a titles and a legend and by the way in this plot function you can use the third argument to change how the plot looks so for example if you give it o in a string as the argument in the first line for column B and when you run the cell the plot becomes dots instead of just a line and there's a lot more you can do you can find more about it in the official documentation anyway let's move on and do sort of a real analysis with a real data set now for this analysis we're gonna use this data country's dot CSV it should be in the same folder as well and when you open it you should see this data so we have a bunch of countries and a bunch of ears ranging from 1952 to 2007 for every five years and population for each year for that country and you can see that there are a lot of rows in this data so let's now import that data just like before by writing PD or pandas that read CSV parentheses single quotes or double quotes countries dot CSV and by the way this is a string single quotes country's dot CSV and in Python you can use either double quotes or single quotes to express a string let's assign that to a new variable called data by writing data equals and when you run the cell this data is loaded onto data so once you write data in this new cell and run it you should be able to see this data in a data frame now let's say that the analysis we want to do here is we want to compare the population girls in the US and China now to do this analysis the first thing we want to do is we want to isolate the data for the US and China we can do that for the US by writing us equals data square brackets there that country EKOS United States in single quotes and when you run this cell us now only contains the data for the United States so let's break down this statement a little bit more let's click insert here and insert cell bill when you write the other country equals United States this actually gives a series of a bunch of choose and forces so when the roll is not us this gives us false and when it is us it gives us true we don't see any cheese here but there are a bunch of cheese here where the rows are for the US and then when you right there a scrub buckets this a series of bunch of trues and falses this gives us a portion of the data where the value of the series is true and that's the data for that us as you can see here and then we just assign it to this variable called us okay let's now do the same thing for China by writing China EKOS theta square brackets that are the country equals China and when you run this so and when you write China here and run this cell you should only see the data for China and using these two variables US and China will be able to compare their population growth so let's first plot u.s. population here by writing PLT dot plot us dear comma u.s. top population you can show this plot with TLT does show and when you run this cell used to see this graph you see that US dollar is party on the x-axis and US the population is plotted on the y-axis but you see this scientific notation thing 1e8 because the numbers are so big so let's divide the whole population each number in the series with 1 million or 10 to the power of 6 that's 10 star star 6 in python and when you run the cell again you now see the population in millions so this is 160 million and it goes up to I think more than 300 million in 2007 and let's plot China's data on top of the spot by writing PLT dot china that year actually you could use us that year or China that year because we have exactly the set of ears but for now let's just use China deer for the x-axis and China dot population for the y-axis and we're gonna divide this by 1 million as well to make the population show in millions when you run the cell you should see these two lines let's add a and titles here to make this graph easier to read so PLT legend parentheses square brackets United States and China and the X label PRT da hex label should be just here and PRT da Y label should be population run this cell again and this graph is much easier to read so you can see that China's population started out much larger than the US in 1952 and it seems like it's going faster as well now what if you wanted to compare instead of the absolute amount that you see here the percentage girls from the first year that we have in our data 1952 well there are several different ways of doing this but I'm gonna show you just one way so to do that let's first copy this whole block of code over here now let's say that for each country we want to find the percentage girls from the first year so we want to set the first years amount to 100 as a 100% and show the rest of the data in percentage relative to the first year and we can do that by dividing this whole series for example us stop population with the first years population and then multiplying everything by 100 so to show you what I mean let's just create a new cell here above by clicking insert cell above here and here first I'm gonna write us that population and you see a series of population here for each year and the first row you see here is the first year's population or the population in 1952 I think let's insert a new cell below here now to retrieve the first years population you can just write us top population the Eyelock square brackets 0 and this gives us the first years population which is this amount then we can divide the whole population this whole series by the first years population just by writing us the population divided by us the publishing dialogue square brackets there and this gives us this series so as you can see the first year is set to 1 and the rest of the years are shown in relative amounts and if you multiply everything by 100 just by writing start 100 here you'll be able to show everything in percentage amounts so you can see that the first year is shown as 100% and from 1952 to 2007 which is the last year we have the population grew by 90 percent now like I said earlier this is not the only method to show the relative girls in population but I chose this method here because it's pretty simple to implement anyway let's copy this whole thing and paste it over here to replace the y-axis let's do the same thing for China as well so copy the whole thing for China here and then replace us with China once you do that let's change the population my label to population girls and let's just write first year equals 100 just for clarity here when you run this cell you should see this graph so you can see that even in percentage amount China's population grew much faster than that of the United States the u.s. population grew by 90 percent from 1952 to 2007 but during the same time China's population grew by more than 120 percent okay this was a pretty simple example and it actually came from my course called introduction to data visualization if you liked this video I'd actually highly recommend it it's a course with more videos just like this one and I cover more realistic and complex examples and more different types of data visualization techniques not just line charts so if you want to check out the course you can just go to CS dojo da io \/ more data you can actually take this course for free by signing up to plural sites 10 day free trial that's the site the course is hosted on anyway as always thanks for watching this video and I'll see you in the next one"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Matplotlib for Data Visualization",
        "Video Title":"Intro to Data Visualization in Python with Matplotlib! (line graph, bar chart, title, labels, size)",
        "URL":"https:\/\/www.youtube.com\/watch?v=DAQNHzOcO5A",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/DAQNHzOcO5A\/hqdefault.jpg",
        "ID":"DAQNHzOcO5A",
        "Publish Time":"2019-06-01T16:38:49Z",
        "Channel":"Keith Galli",
        "Channel ID":"UCq6XkhO5SZ66N04IcPbqNcw",
        "Transcript":"what's up guys and welcome back to another video sorry that I have been gone for a while now I was really busy finishing up my master's degree but that is all done with now so I'm happy to be back and happy to be able to me making some more videos so in today's video we will go through the bat plot live library of Python and this is a super useful library for all things data visualization in Python so the video will start off with going through the matplotlib basics so as you see on the screen will be creating like lying graphs such as the one you see here you'll learn how to format these lines in different ways you'll be able to add a title you'll be able to add labels to your x and y-axes format your tick marks properly add a legend etc so all the kind of basic matplotlib things you want to know then we'll move into other types of graphs such as bar charts and we'll finish this video off with going through all sorts of like real world examples where you can kind of combine your data science skills that you might have using like pandas library and if you haven't learned anything about the pandas library I recommend you watch my video on that so with that the kind of real world examples will do stuff such as like plot the USA versus Canada gas prices off of data that we have little link to in a CSV we'll do some histogram stuff we'll do some pie chart stuff and we will do some box and whiskers chart stuff I can't get through every type of graph in this one video but if there's certain things that I didn't cover and you really want me to cover let me know in the comments that would be super duper yeah that's all I got to start this video let's just jump into it all right let's start out by loading in the libraries that we need for this tutorial so we're an import map plot live as our dot pie plot as PLT we're going to import numpy as NP and we're going to for the later examples import pandas as PD and run that so if you have all these us like already installed he won't get any higher so if you do get these get an error when you're to run among these you find need to install it so you can either do a pip install a map plot lib pip install numpy pip install pandas or you could install a Python distribution that already has these packages such as anaconda I'll link to how to do this in the description okay so now we have our libraries loaded let's now build our basic graph so I always think it's kind of the hardest part about anything with Python in general is starting with that blank blank space so what I recommend for matplotlib is always start at the documentation so I have a link for this in the description but here is the home page of the matplotlib PI plot documentation and what I recommend is like whenever we're trying to do something new just do a ctrl F and like look for it so if we look for plot here that's like we're just trying to get a line graph on the on the screen box plots not when we don't want it then plot ok this looks good plot y versus X as lines or markers so this is what we'll start off by doing as you can see right here and the examples it gives gives plot X comma Y so that's the command we'll have to run to make this work and just to know what x and y are if we go down to parameters they tell us that commonly these parameters are 1d arrays so we know we need to pass in 1d array to the plot function so if we do plot 1 2 3 that's going to be our x + 2 4 6 will be our y I can't type and run that plot is not defined so we imported pipe lot as plot so when we run this function we actually have to do P love T dot plot and then this is our X and the second array is I so let's see what happens there yay we get a graph and to clean this up a little bit I recommend moving our variables into removing our arrays into variables so X is 1 2 3 and Y is 2 4 6 and we can change now this to X Y and one thing that's annoying with the matplotlib if you're doing this in Jupiter notebook by default is you have this annoying little line here so you want to get rid of that you can just actually call plot dot show and that's the correct way to actually show this graph ok now that we have just a line on the screen let's start adding a little bit more to our graph so to do this let's go back to our documentation and go back to just the pie plot so I think this is a good spot to start because you always can kind of just control f and find something you're looking for so let's say we wanted to add a title to our graph if I type in title it points me right to a couple different places that I probably want to look at and right here is what we're looking for so set a title for the axes click that and this tells me all sorts of stuff about how I call this so it looks like I used to pie plot title so I can do plot title and let's just do our first graph and run that as you can see our title is now there and same thing for a lot of the different parameters so going back to the documentation if I want an X label on a white label I just type in right I guess I knew that but let's just say why I label nothing comes up Y or just even label C label label a contour plot that's not us the fig labels no I know title no X label Y label let's how we get there so you can keep doing this and really easily find what you're looking for I think it's a good place to go if you kind of just if you forget things because I always forget things in that plot lid okay so adding a label to x and y plus X label x axis and I guess I'm getting really enthusiastic because I keep adding exclamation points to all my stuff y axes yay see what happens yeah and I want to just get rid of these recommendations I don't need them okay so now we have a graph and we have a title and we have a y axis x axis in a real graph we would label these properly but for the sake of this example we're just kind of getting a feel for how we add these alright so now that we have our title and labels one thing we might want to do to them is resize them so if we look at the the documentation for title one thing you'll notice is that you can use you can pass in this font dictionary and it gives you a little bit of details about the Fondation area here but basically there's all sorts of options that we can do and like play around with our fonts so let's say I wanted to change the font of our title like a new font dict equals and I can pass in a font name and let's say I my good old trusty reliable comic sans ms will be our new font and if you look at that we got a nice new font on a graph and if you can't see it well then in that case I'll change the font size to be something like 20 now you should definitely be able to tell that I've changed the font type and in the description I listed I put a link to all the matplotlib fonts that you can use and if you look through the documentation you kind of find some different options you can do with this and you can also do the same thing with the labels I could do like font dict equals let's say I wanted to make this font arielle and that obviously might be the default but if I did it like Comic Sans as well you can tell that the x-axis now has changed but I want to just leave that this be for now okay so we did labels right so that one thing that's bothering me is the tick marks I want to let's say I just want to do integer numbers and I'm gonna add a couple more values to our graph so I'm gonna go to five I'm gonna start at zero and why would go from Y is always gonna be two times X so it's gonna look like that oh I would magically did it for us at that case I don't want it to magically do it for us okay let's say we went to four and we wanted just the integer values we didn't want any decimal value so how do we change our ticks so we can do that by doing plot X ticks and our X ticks will do 0 0 1 2 3 and I also just found remember this command by using the documentation and our white ticks will be have a 0 to 10 every two so it's 0 2 4 6 oh my gosh 10 as you can see that now we have the tick marks working properly and maybe I wanted to add 4 as well so now we labeled our ticks differently and one thing that's cool to know is that the graph will automatically resize based on how we set this so if I set one tick to a thousand well now our graph kind of like not too good but it's nice that you can easily do that for is better but and you can do the same thing with why I'd say when do they make the last one 100 as you can see it changes up the sizing of the graph one thing that's also cool though is find it even if I didn't even lis space these out if I did like seven here and then 7.5 as you can see it properly puts those at the right spot in the graph I'll leave it like this I'll leave it a little bit weird but yeah that looks good to me okay so we have our first graph let's uh add a legend and make this line a little bit more exciting color wise so if we wanted to add a legend we can do and I would actually kind of like showing how the documentation is helpful if I looked up legend Figg legend that might be work just this legend place a legend on the axes like by looking up legend I have figured out that the call is just legend and it gives me some examples so I always like to refer to this documentation okay so PLT dot legend and what happens when I do that no handles with labels fanned put in legends so it's complaining because we don't have anything to label what it's saying is how do we label this line and the way we do that is by passing in a label to our plot function so in this case our x and y we plotted X to be or Y to be 2 times X so I'm going to call the label here 2x and as you can see we get 2x right there okay let's say now that we wanted to change up the color of this line maybe make it thicker do some other things to it if we go to plot whereas plot will see all sorts of properties that we can do and plot so what I'm seeing right here is you can pass in all of these different parameters to our plot and it probably lists off what we can put maybe not it's not super specific but if you look hard enough you can see all these properties that you can pass into the plot function so one thing we could plot pass in is color so if I passed in color equals red will work and it will note I think the common color so if I did yellow if I did like yellow which is not a color it's gonna yell at me might even work with y yeah cool and we also can pass in hexadecimal colors so I could do like a b a b a b and we got like a grayish color you get this is helpful because you can pick use like a color picker tool and pick pretty much any color you want here but we'll stay with red for now the other parameters I could pass into that let's see what else we had I could do I think the line size equals let's say 12 oh that is not a prat parameter not remembered either go back to my documentation size marker size maybe that's it more precise oh I also see you lying with here so line width equals 2 ohmygosh line with equals 12 makes this big line maybe two it's a bit bigger than I think what we had we can also do we can label a marker so let's say I wanted to add dots into this as you can see you can't really see it too too well for me if I made the marker size a little bit bigger and I'm just kind of passing this in so you could kind of see what you can do oh that didn't work let's say 10 yeah as you can see nicely big dots on my graph I can also do marker edge color there's all sorts of properties I'm just like continually passing these in but now you see a different type of dot and whatnot so this is pretty cool that we can have all this customization sometimes takes a little while to get what we want but it's usually it just is nice to have this power and one final thing I'll pass in is line style so there's all sorts of line styles we can pass it and you can read all into the different ways you can do this in the documentation one thing that's pretty cool is that instead of listing all of these keyword arguments sometimes we just want to make a different type of line quickly so there's actually a shorthand that you can use to kind of do pretty much the same thing so I comment this out real quick we have no graph what you can do is there's a shorthand notation that allows you to kind of have a pretty good amount of customization quickly so the shorthand notation is color marker line style I guess so if we go and copy this line from above let's say we just passed in this now what we can do is before we add our label we can pass in the shorthand notation so I can do color will say read it I think just accepts letters you can look into the documentation see exactly what it does marker will do a dot and then line will do a dash so watch what happens when I do this gives us nice line with dots in it if I do two dashes gives us the dotted line if I do like a different type of marker you can pass in like a caret like that gives us a line with carrots in it it's kind of cool that you can do this shorthand notation and get different types of lines very easily just to follow up on the whole shorthand notation pulling in the docs for the plot function it shows all the different markers you can use and the different line Styles supported and the different colors supported so check out the plot documentation to see all that all right let's move on to our next thing and that will be I guess let's just out another line real quick to our graph so we have our first line let's add line number two and this one will make a little bit more interesting and the thing is like here we had a very straightforward like you have X any other Y but this is not always easy to do especially if you have like a function like sign where you want to plot it at like a bunch of values but those values are all like you know crazy decimals so I'm gonna show you how you can handle something like that so this is where we use numpy so nobody call this x2 I'm gonna say that x2 equals NP a range 0 to 4 and we'll go by 0.5 as our tick so if I print out x2 real quick you see that this gives us a numpy array with zero 0.5 1 1.5 to 2.5 3 to 3.5 I'll actually make it good a 4.5 so it goes at the same spot as our other graph because this is a exclusive here so we have that so that's gonna be our exes and so what I can do here is I can go ahead and plot that and I'm going to plot the square function for it so I'm gonna pass in x2 and then instead of passing in a why I'm just gonna do x2 and I'm gonna do squared what happens here so now you see we get x2 squared it goes a little bit higher than our original axis was set so I'm gonna change up the ticks or maybe I'll just kind of comment this out and see what happens for a tick marks yeah I'm fine with just leaving the default that it gave us looks good to me and now we have two blue colors so let's make this a different color maybe you make it red we want to give it a label as well so I'm going to do red I'm gonna say the label is equal to x-squared and one thing that's cool is that it automatically moved this legend to the top left because the positioning was better now that this goes up to the top right okay so we have two two lines up there and from the original image I showed there's some stuff that's still different one thing that's kind of cool that you could do is let's say you had a graph that stopped but you wanted to kind of show the projection of it not in the future so what I did to show that type of a phenomenon is I did like X to take the first four values here it'll plot that what did I do oh shoot first four so what I want I think that will work take the first floor and plot that and then for the last values so from let's say five or three are this make this a little bigger make this six or five bear with me here from four onward we'll make it a dash line and I had a little bit of overlap because I think they'll look better you'll see in a sec four - make this still the same function but this time we're gonna make it a dashed line so there you see and I'm gonna actually make this a little bit different there you see like maybe something ended here and then you make it - the rest of the way you could do something like that using the format I just showed all right what else do we have probably clean this code up a little bit another thing that I showed in the original graph that I showed when I was a introducing this video was a resize so let's say we wanted to resize our graph well we should do that by near the top of our graph so I'm going to go ahead and do resize your graph I'm going to go ahead and do plot figure pass in fig size and we're gonna say let's make the dimensions 5 by 3 it's kind of an arbitrary 5 by 3 that will give you kind of the ratio of your X to Y or Y but to specify how many pixels it is you're gonna want to pass in a second parameter which is dpi which basically is pixels per inch so I recommend using a value of around 300 here if you do smaller values you'll have more pixelated graphs so if you can afford having a bigger image having a bigger dpi is often nice so in this case we have pixels per inch of 300 so this is going to actually be 5 inches by 3 inches so that Tolle pixels will be 1500 by 900 here in this graph so now it's much much bigger maybe that's a little bit too big I didn't I'm gonna be blocking this graph so I'm gonna make it a little bit smaller but you get the idea then here so we'll make it like two by 1.5 that's not a good dimensions now though I mean just play around with this the the biggest issue I have right now is the graph looks so big because I have my screen super-high resolution or super the view is like very up close because I want to make sure you guys and see my code but yeah this would be a 1500 by 900 graph I'm gonna just for the sake of the graph decrease the DPI and make it more reasonable that the issue you can't really tell from this image but if you really zoom into the graph and maybe if you like printed the graph out it would look maybe a little bit pixelated with a dpi of 100 so probably try to keep this value higher if possible and then another thing you want to do is you'll want to save your graph so to say we can do plot dot savefig and when you do say buy graph dot PNG and one thing that's nice too is like it passing the DPI parameter here as well so let's say when I actually see if my graph wanted to be bigger but for the sake of being able to show you guys it in a smaller format I wanted the 100 above I can still go ahead and save it with 300 and then kind of solves both of my problems and so this then my graph top P&G will save in the current directory that this MATLAB matplotlib tutorial is in it was yeah well saving that current the current directory what ever fought whatever directory your file not lib tutorial as in this graph will also save there when we run this cool now we have that saved all right let me clean this up a little bit and just to note the reason I did this is because this is exclusive the six here so when I do five onwards it picks up this actually ends at five because it doesn't include six so it actually covers everything here all right now that we've shown line graphs a bit let's go and do quickly do bar charts and after bar charts I think we're going to just end this video short and I'll do the real-world examples in a video that I'll post next week I just think this video might get a bit too long if I include everything in just one video so all right so I want to do bar chart okay so bar charts are pretty straight for it as well let's say we had some labels a a B and C and some values that say 1 4 & 2 well if we wanted to do a bar chart where you just do plot dot bar of labels comma values at Friday they're wrong it's values comma labels and we get not what I was looking for okay let's see it is actually labels first then values ABC cool so that was pretty straightforward and I can do the plot touch show we're gonna do all the adding of titles and whatnot the same way as before in the line graph example let's skip over that for now it could also resize it let's say so I could do plot figure fig size equals it's a six by four it's gonna use whatever the default dpi is and then one thing that it's cool that you can do with bar charts is you could add different patterns to these so to do that and you can you can really play around with the documentation do all sorts of different I do some kind of following the graphs that I was showing the inner intro of my video so I wanted to just show kind of what different hash values look like so I can make first one have gonna say bars equal plug up ours there you go now I do bars zero set hatch that's gonna give me the lines that you see down here I can do the same thing with the second value let's make this circles and you can find all the hatch values in the documentation as well let's do the third value we'll do stars so now you get kind of a cool little bar chart I can also add a legend to this very easily and this will tell me right away we have a B and C but I mean their label right here some legends probably not necessary in this case alright let's see what else do I want to do with this and then if you wanted to make this a little bit neater if you had like many more I might get tiring to do this so you could do something like patterns equals \/o and star and you could do instead of this notation you could do yeah for a bar and Baris bar dot set patch I guess we want an index as well we'll just do actually patterns dot pop first item off so this would get us our right one for each one should yeah look at that if I didn't pop regular I think it would take off the last so this will be stars instead of yep look at that yeah so basically what it did is it just popped off the first item for the first bar popped up the second item for the second bar and then popped off the final item for the third bar as you can see there so that's bar charts really quickly I think I'm going to end this video here at this the the real-world examples video will be very very useful and I'll post that next week I just want to like make this video too too long let me know your feedback hopefully this helped you a bit I'm happy to be back happy to be making videos just just trying to ease back into it with this if you enjoy this video make sure to throw a big thumbs up and subscribe if you don't mind yeah but yeah look look out for the real world examples video I'll be posting in the near future and let me know if you want to see anything else related to this library after that alright thanks guys for watching and peace out [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Matplotlib for Data Visualization",
        "Video Title":"7 Python Data Visualization Libraries in 15 minutes",
        "URL":"https:\/\/www.youtube.com\/watch?v=4O_o53ag3ag",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/4O_o53ag3ag\/hqdefault.jpg",
        "ID":"4O_o53ag3ag",
        "Publish Time":"2022-01-03T20:24:04Z",
        "Channel":"Rob Mulla",
        "Channel ID":"UCxladMszXan-jfgzyeIMyvw",
        "Transcript":"so you're working with some data in python and you want to make some visualizations well i've got news for you there's a lot of data visualization packages out there i mean a lot it can be a little overwhelming but no need to worry i'm gonna step through every single package known to man okay just the main packages used for plotting in python and by the end of this video you should have idea of what each of them do and how you can use them all right let's start checking out packages that doesn't sound right and here we are in our data vis kaggle notebook up first is the og of plotting in python yeah you know it matplotlib this package was initially released in 2003. were you born in 2003 because it's so old a lot of other things are built on it and there's a ton you can do first the imports import matplotlib import pi plot as plt this is just how you do it let's say we want to plot a line plot looks pretty nice kind of boring but nice wanna up the stakes why not your standard scatter plot just a few lines of code and we have colored dots ooh run border if you say rob i hate circles i got the solution for you matplotlib has tons of functionality you can change the points of the plot you could do a ton of stuff but rob i want to do some statistics well built into matplotlib you can make a histogram super easy look at these aardvark lengths oh wait no it's fake data [Music] but this is just the surface of what matplotlib can do it's basically a pen and paper for plotting you can make almost anything check out this awesome heat mat mesh grid [Music] not impressed with matplotlib i created this function that creates an entire football field if you're not impressed i don't know what will impress you so to summarize matplotlib one of the oldest libraries in python customization out the wazoo tons of other packages are built off of it but the downsides are it's hard to learn at first complex plots are going to be code heavy and even though it has the functionality it's not really meant for interactive plots next up we have seaborne little known fact did you know that seabourn was named after the character from west wing samuel norman seabourn that's why we import it as sns seabourn is great if you want to make some plots out of the box for statistical analysis stats major and what's the distribution you're just p hacking here we can use the seaborne rel plot function to show the difference between two groups in our data set wow not as much code as in matplotlib switch the style type to line and we have a beautiful line plot are those confidence intervals i see one of the great things about seaborn is you can look at the difference between different categories in your data without having to actually change the data itself time saver check out this swarm plot each stop represents an observation in our group and it split between different days of the week nifty and what about a violin plot well a violin plot's a great way to see the distribution compared between groups and even split within a group interested in just a normal old bar plot we got you covered seabourn can make those too with confidence intervals want to go beyond just a normal boring scatter plot seaborn can do a joint plot you can see distributions on the x and y axis of each different grouping and them colored in between that's pretty cool and one of my personal favorites is the pair plot have a bunch of numeric features that you want to compare you have kde plots on the diagonals scatter plots everywhere else what more could you ask for oh coloring by the different groups it's got that too and it may not seem like a big deal but in seabourn one of the features i love is that you can use the hue variable to add color to your plots so to summarize seaborne standard plots for statistical analysis easy to use out of the box it is built on matplotlib so it's really just a fancy matte plot lib there's much less ability to customize next up [Music] bouquet or boca is it bokeh or boca tell me what you think in the comments below i'm just gonna call it bouquet when we import bokeh we can set it up to work in a notebook just like that super simple bouquet specializes in interactive plots your standard line plot here but wait i can select things i can move it around this is amazing one line not enough for you how about multiple lines very cool okay let's pick it up a notch with bouquet layouts we could put multiple plots side by side but it goes even deeper we can plot two things at the same time linked look with this code if i select here it also selects it on the other side a lot of cool stuff you can do with these linked plots with a little bit more work you can make some pretty amazing plots in this plot we've added a bunch of circles but the size of the circles and the color are based on features in our data but wait there's more interactive plots are just the start with bokeh you can actually interact with the data live by adding things like a range slider check out this code a bunch of dots but we can filter based on this slider want to change the circle size on the fly why not the world's your oyster and of course the standard bar plot is always there if you need it we create a figure and use the bar to make something beautiful um looking at this plot makes me hungry once you become a pro with bouquet you can write really long plots like this that show unemployment numbers throughout the years i'm not gonna lie this heat map is pretty beautiful and you can even use bokeh to display those awesome network x graphs that you've been creating whoa when you hover over a circle you can actually see what it's linked to awesome so to summarize bouquet interactive plots almost infinite ways you can customize bokeh plots for me bokeh reminds me of the map plot lib equivalent but for interactive plots the downside though is it's like matplotlib so it requires a lot of code and the time has come we're gonna talk about plotly express i know you've been holding your breath so just let it go now you can breathe i'm really actually surprised plotly express only has 657 github stars go and give it a star importing plotly express is as simple as import as px plotley express like bokeh allows you to create interactive plots but the difference is they're a lot easier to create using plotly express scatter we can create a scatter plot with just a few lines of code oh look at these petal widths but i want a grid of plots you say well look no further just provide a facet column and facet row variable and you've got yourself a grid of scatter plots what about line plots we got you covered uh check out australia and new zealand oh australia is winning all this in just one line of code sign me up and it wouldn't be complete without some bar plots just like bokeh it's fully interactive so we can turn things off if we don't like it oh but i can't turn them both off because i kind of don't want to see this plot at all remember seaborne's pair plot well plotly express has the scatter plot matrix not a lot of code here and we see the comparison so this has the upside of being interactive but i tend to prefer seaborn for this type of plot there are also a handful of custom plots that are just gorgeous check out this parallel coordinates plot and one of my personal favorites the parallel categories plot huh different groupings and how they link oh you can hover over it amazing i'm sold i'm sold i'm sold i'm sold i'm sold here's a perfect example of using plotly express to make a scatter plot colors sizes all of them depending on the data whoa let's only look at oceania australia and new zealand again and for those of you who prefer pie charts the sunburst plot is sort of like a pie chart kind of just don't make pie charts just like seabourn again plotly express can do different comparison between categories check out these violin plots not too much code here to create it too and something you might not always use but if you ever have a data set with latitude and longitude the scatter map box function can make some beautiful maps two dimensions not enough for you well we can go 3d with the scattered 3d plot with plotly express i feel like i'm in the matrix so to summarize plotly express two thumbs up for interactive plots it's kind of like seaborne but interactive and those maps i mean i don't know what else to say if you're not impressed by that map just close the video right now just close it i don't want you here also similar to seabourn it's going to be hard to customize your plots there is the plotly back end and dash but that's for another video the next two libraries are slightly lesser known so let's talk about plot nine if you've used r before you probably know gg plot two it can make some gorgeous charts so plot nine is basically gg plot and python the way you write the plots is different than anything else that i've seen but it's very similar to what you would do in r so if you're familiar with r this might be the package for you we got scatter plots with regression lines and standard error can't be beat one thing i gotta say is the default colors in plot9 and ggplot are really nice with these few lines of code you can make this bar plot with some lines hey check out want to do some analysis of greek letters you can make a pretty bar plot just a few lines of code i like it so to summarize plot nine basically gg plot two positives the plots are pretty the syntax is a little unique but if you're used to r you might like it downside is if you're not used to it it takes a little bit of work to understand and i gotta say the docks aren't that great so if you're looking to do anything custom you might be up creek without a paddle let's talk about alteir to be honest i haven't used altair that much and i don't really understand why it's different but it is different and maybe if you understand it you can explain it to me so the positives are the positives are that it has declarative visualization and the negatives are that it has declarative visualization and last up we have pandas you didn't think i would get through a video without talking about pandas did you that's right pandas can do plots just take your data frame use the plot method and you can make it make a cool visualization like this in milliseconds but rob you say this is just matplotlib i know but it saves you time because it's already in pandas show me a scatter plot there it is pandas can even do box plots these leave something to be desired area plots are actually pretty cool and i use these a lot it's basically a line plot filled in underneath so there you have it as quickly and hopefully entertainingly as i could i showed you every python package commonly used for visualization if i missed one please let me know in the comments below we talked about matplotlib seaborn bokeh plotly express plot altair and pandas everything you would ever ask for for plotting with python my name is rob i'm a data scientist and kaggle grandmaster if you enjoyed this video please pretty please subscribe and like the video too oh also you can find me on twitch where i stream time to time okay that's it see ya bye using plotly expl using pr plotly exploit using plot leaks"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Seaborn for Data Visualization",
        "Video Title":"Seaborn Is The Easier Matplotlib",
        "URL":"https:\/\/www.youtube.com\/watch?v=ooqXQ37XHMM",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/ooqXQ37XHMM\/hqdefault.jpg",
        "ID":"ooqXQ37XHMM",
        "Publish Time":"2022-04-17T14:53:34Z",
        "Channel":"NeuralNine",
        "Channel ID":"UC8wZnXYK_CGKlBcZp-GxYPA",
        "Transcript":"[Music] what is going on guys welcome back in today's that i'm going to give you a brief introduction into the seabourn module in python and the seabourn module is a wrapper around matplotlib so it uses matplotlib and it allows you to design to create attractive and good-looking statistical graphs that are quite complex so it provides a level interface it makes it easier for you to create such graphs and this is what we're going to take a look at today so let's get right into it all right now for today's tutorial i'm going to use an ipython notebook or more specifically a jupiter notebook and i recommend you do so as well because that allows you to execute individual cells of code so you don't have to run the whole script when you change something or add something you can just run individual cells and all the variables or data sets are still stored in the ram so let me show you quickly an example here if i say a equals 10 now i'm in a new cell and i can just say print a and i can go down here and say print a plus one and i don't have to constantly execute all of the statements that come before which is particularly useful if we work with data sets and visualizations so i don't have to look at all the graphs that i have plotted before um in order to see the newest graph and i don't have to delete code in order to be faster i can just run individual cells which makes a lot of sense when working with data sets however if you don't want to use an ipython notebook you can also just use pycharm vs code idle vim whatever you can just run the same python code that we write today in the jupyter notebook also in another development environment but it's more convenient to use an ipython notebook so having said that the first thing we want to do is we want to install seaburn and for that we open up a command line and we type pip install seaborn if you are using an anaconda environment i assume you already know how to install packages usually with conda install seaborn uh even though you can also use pip there if you want to once we have that we can start by importing seaborne sns which is the usual alias and then we can just um get started with some data sets because for the visualization we need data sets and you can use whatever data set you want i'm just gonna talk about general visualization functions here you can use a data set from kaggle you can use a csv file that you have on your computer you can use stock data from the pandas data reader if you want to or you can also just go ahead and say sns get underscore data set underscore names and you can pick one of those data sets that are provided by seaborne automatically or built in here um and we're going to just load a couple of them here we're going to say uh tips equals sns load underscore data set tips then we're gonna say iris equals load iris and then titanic load titanic and then um planets load planets just so we have some data sets here and the first one that we're going to look at is going to be tips so we can just type tips and we're going to see here as a pandas data frame what this looks like we have the total bill we have the tip we have the sex we have the smoker yes no we have the day of the week we have the time when when this meal was consumed and then we have the size of the meal at the restaurant so this can be used for tip prediction whatever we're not going to do any machine learning today we're just going to visualize the data and the first thing that we can do here is we can plot a simple scatter plot by saying sns scatter plot so basically just the individual data points and we're going to say that the x value that we want to plot here is the tip so how much was tipped whereas the y is the value of the total bill the data set is the tips data set that we loaded here and then we're going to also first of all let's let's just do it like that so we can see a very simple graph like this one here nothing fancy about it but now we can do something like uh hue and this is going to be the day so this year and now we have categories represented in colors so now you can see okay if it's saturday it's green if it's thursday it's blue and so on and we can add some more information we can say for example the size of the individual data points is the size of the data set so depending on the size of the meal we're going to change the size of the individual data points so this is a very small meal this is a larger meal [Music] and then we can also change the color palette i hope this is how it's pronounced um and this is going to be yellow green blue like that and now we can see this is already quite an informative visualization and we didn't have to really do anything we just said okay x value is a tip which is numeric then the y value is the total bill which is also numeric so quite simple to plot on a coordinate system and then we just passed uh the day which is a categorical value here and it's now um determining the color and then we pass the size which is a numerical value to determine the size so we didn't have to really think about how to do something we didn't really have to spend a lot of time looking up certain conventions or anything or certain functions that we have to use we just pass the individual fields and seaborne automatically generates a very informative scatter plot now we have different types of plots so this is probably the most simple one for me a scatter plot is always the most simple plot possible because we basically just take two coordinates and we point we plot a single point a single data point and then we do that for uh all the rows but we also have some more um statistical type of plots like histograms or distribution plots and for that we can for example say sns.hist plot so histogram plot and we pass your tips tip so we're interested in the tip of the tips and we're going to say kde equals true to get the line as well and we can specify the bins of the histogram so in this case here this is the distribution of the tips very few people um give a tip around that value so now i think tip is in dollars right so we don't have a lot of people tipping ten dollars we have very uh many people tipping around two dollars or three or something like that between two and four basically um and we can see here the distribution function we can also see more if i say bins equals 30 we can see more bins if i say bins equals five we're going to get less information here i think 15 is quite a good value and if i say kde equals true is no longer the case we don't have this line here this function so this is a very simple one we can also plot it in a different way though so i can also say um sns dist plot for distribution plot and i can pass the same value so tips tip kde equals true and bins equals 15 and this is almost the same function even though what does it say here future oh yeah it's a deprecated function that's why we have the same function so don't use the disk plot function use the uh hist plot but right now i recognize actually the t is something i didn't want to have here because we have the disc plot which is deprecated we have the hist plot which is not deprecated and we also have the dis plot without a t which is essentially very similar to the his plot so i can actually copy this here and change this back to an h and add a t and you're going to see that they're quite similar this one is a little bit larger when it comes to the vertical line but essentially they're the same plot from the information now then we also have bar plots bar plots are very very uh simple plots as well we just say sns bar plot and then we can say okay on the x-axis i want to have the sex so male or female on the y-axis i want to have the tip so we can see if there's a difference between the genders um and then we can say the data is tips and the palette is gonna be yellow green blue like that so this gives us some information we can see that on average we have a slight um slightly higher bar on male so males seem to give more tips usually but this could also be because males maybe eat larger meals we don't know yet so this is not something that we can see in that visualization that's a very very simple bar chart a more complicated statistical chart would be a box plot which can easily be plotted with seaborne as well by just saying sns.box plot and here we're going to say okay now we want to see what the distribution of tipping is on particular days so on saturday sunday friday and so on um compared to the total bill data is tips or actually we want to in this case let's change this to tips um in this case we'll look at the tips otherwise we'll look at the meal size or actually the total the total bill amount and the color is gonna be the gender and then we're going to choose the same color scheme here yellow blue green actually green blue sorry and we have a problem here tip i think tip without an s right there you go so you can see here that on the different days we have this different distributions we can also look at the total bill which is probably uh not too different but we can see for example that the the center line here for those of you who don't know how to read a box plot this is the median so the central value uh those are the quartiles and um so basically the quartiles all the are the four sections of the box plot this is the maximum this is the minimum and then we have some outliers that are not considered um but here you can see how easily we can plot the distribution also blue meaning uh female and green meaning male that is quite simple in matplotlib to get this plot with that information would be more complicated so seaborn makes this way easier for us we can also plot something similar even though it's not exactly the same as a box plot we can plot a strip plot so it doesn't have information about the quartiles and the medians but we can see the distribution of the data points easier so we can say x equals day y equals tip for example and then data equals tips again and we're going to say dodge equals true dodge equals true is important because let me show you what happens if we don't do that and then we're going to set the same color scheme so yellow green blue so this is what happens if you don't dodge and if we now set dodge equal to true we can see that the genders are separated and now you can see the distribution of tipping you can see that males usually um are higher you could say so on saturdays we have a lot of high tips that are coming from males um here as well actually for for each weekday this is the case even though we have also some males that don't really tip a lot which is yeah at least on friday and sunday seems like this is not the case for females we have fewer females down here even though they always occupy i'm not sure about saturday but other than saturday they always occupy the minimum position so one could uh further examine that if we were doing some data science work here um now let's get to some more complicated plots because those are still quite simple let's do some joint plots which are essentially a scatter plot and a distribution plot at the same time so what we do here is we say s and s joint plot and the x value is for example the tip the y value is the total bill and the data is tips and then we can just plot this joint plot here and what you see is that we have a scatter plot and also we have 40 individual features so four tip and four total bill here the distribution function this is quite interesting um of a plot to look at because it's a combined plot and again the main focus on seabourn is always it makes it easy for you everything you do here with seaborn can be done in matplotlib as well the main emphasis here is how easy it is to do that you just take a data set you just set them set some um values here and then you get a very good looking and very informative plots now we can add some more stuff to that we can also say kind equals rec for regression and then we see here a regression line and also uh the distribution function here as well so this is also quite simple now i haven't played around with that but maybe we can also determine the color here i'm not sure no doesn't work in this case um maybe there's a different keyword for that but usually you just look up the documentation you see a bunch of different options and usually it's enough to just specify um a column of of some of the features here so basically just taking something like size or time and this is gonna already be translated automatically without you having to turn it into numerical values first or something into a color into a size into something like that now we can also change the kind here from regression to kde and this then turns it into something like that this is more like a a three-dimensional uh plot here where you can see okay the main concentration is here and then the further out you go the less instances you have here now if you want to see this better or more obvious you can also set the shade to true then you can see where the concentration of values is so here we have a lot of values here we have less values and here we have no values basically and that again can be influenced by setting a color map so color map equals yellow green blue again with a lowercase u and you can see here that we have a pretty good looking plot that shows us that most values are here now we can also change that slightly by changing the kind here to hex now we have hexagons actually what's the problem here uh we don't have shade in hexagons and hex plots so this is basically the same thing we have most values here here here here here but now we have this as hexagons so this is also quite interesting all sorts of different plots here now one of the more complicated plots or one of the more um i know bigger plots is a pair plot basically combining the individual features in the pair plot how can this be done we can just say s s dot pair plot and then we can pass a data set for this one it probably makes sense to not use the tips let's see what the titanic data set looks like yeah this this looks like something that can be quite interesting so pair sns pair plot and then titanic dot and we're going to just select the numeric values because we cannot uh use categorical values here so select underscore d types number to just get the numerical values and then the color is going to be determined by p class for those of you who have watched my titanic video uh the data set analysis here they know that the uh class of the person is very highly correlated with the survival so if we do that we can see here a pier plot which is quite a large plot you can see here the different features plotted against each other so we can see survived and survived whenever we have the same value so the value plotted against itself it would be just a straight line so a correlation of one um because of that we get a distribution function here distribution plot and for the other values we have the values plotted against against each other which is quite cool now then we get to one of my favorite plots which is one that i use in a lot of videos and whenever i explore a data set for prediction of something i always use that because that is really something that's very important whenever you have a data set like the titanic data set for example where you want to know how can i best predict the survival you want to look at correlations and when you look at correlations when you have a data set like titanic for example you can call the core function to get the correlations between the individual uh values and this is fine because here you already have all the information you need but it's very hard to find the values especially if you have more features than that um it is not a good overview because you just have numbers and you you really have to look for numbers here um it makes more sense to put that into a heat map a heat map is based basically showing you where you have high values by showing you colors so let me show you what that looks like we can just say sns.heatmap and we're going to pass your titanic dot core for the correlation we're going to set not equals true so the annotations uh this basically just means we're going to also see the numbers and then we're going to say the c map is going to be yellow green blue again and then you have this very beautiful heat map whatever is closer to dark blue is highly correlated um with each other so if we have for example uh something what is a very high correlation something like 0.41 this means that the siblings and what was p arch i think parents children is highly correlated so if we have someone with siblings they probably also have parents uh or children or something like that uh on on board and negative correlations are also important so when something is highly negatively correlated it's also interesting because that does not mean it's irrelevant irrelevance is close to zero that basically means there's no correlation negative correlation also gives us information so for example we have something like 0 5 8 here and this is negatively correlated to a loan so when you have parents or children you're probably not alone obviously or something like that so we can also use other color maps like cool warm here which might make more sense the hotter something is the more correlated it is the colder it is uh so the more blue it is uh the less the more negatively it is correlated and the more white it is or gray uh the more it is close to having not any correlation at all and we also have different color maps like ice fire or something like that and yeah this is one of my favorite plots this is one i actually use very often whenever i look into a data set and i want to predict something i always look okay which features are correlated especially if i want to predict the survival i want to know which of the features is highly correlated with survival so here you can see what is that adult male if you are an adult male you're probably not going to survive or the probability of you surviving is not very high as we can see here um now last but not least i want to show you a plot that i'm not actually quite sure i understand so i don't want to talk too much about how it works here um but i want to just show you that plot because it is essentially a dendogram it is a cluster map sns dot cluster map and now we can take i don't know let's take the iris data set we're going to take um i think we cannot just plot the iris data set i think we need to drop the features that are not numeric so the species we're going to drop the species axis one and now we have this cluster map here essentially this is clustering the individual instances um obviously into clusters and this is indicated by colors again don't ask me about any details about this plot but it can be quite useful uh if you're dealing with unsupervised learning and if you want to visualize clusters probably it makes more sense for smaller plots so it doesn't have to look as chaotic as that but the individual colors here are representing clusters so those are definitely not all the plot types that you can find in seabourn i recommend you check out the documentation there are a lot of interesting and more advanced examples you can do much more with seaborne if you go into the different parameters if you go into different settings but this is a quite simple thing to do this is a very easy to plot something like this which already gives us a lot of information about where is the data how is it distributed and especially i again emphasize it heat maps are very useful when you first look into a data set to see which values which features are highly correlated so that's it for today's video i hope you enjoyed it and i hope you'll learn something if so let me know by hitting the like button leaving a comment in the comment section down below and of course don't forget to subscribe to this channel and hit the notification bell to not miss a single future video for free other than that thank you much for watching see you next video and bye [Music] you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Seaborn for Data Visualization",
        "Video Title":"Introduction to Seaborn (Python) for Data Visualization",
        "URL":"https:\/\/www.youtube.com\/watch?v=0TNyVBdE2JE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/0TNyVBdE2JE\/hqdefault.jpg",
        "ID":"0TNyVBdE2JE",
        "Publish Time":"2022-09-08T03:07:32Z",
        "Channel":"Cody Baldwin",
        "Channel ID":"UCHPHVCq_Giziio_y8QEcHyA",
        "Transcript":"seaborn is an extremely popular visualization library for python it makes it really easy to create great visuals even with a single line of code so what we're going to do is take a look at some examples in seaborn and if you want to follow along with the code a link will be on this page so in this jupyter notebook i've got several examples of seabourn that we're going to walk through and if you want to go beyond this to learn more about seabourn a good place to go is to their official documentation which is linked to here all right so we're going to do first is we're going to import the libraries that we need so we're going to use pandas in this case another python library to load in our data and then we've also got to import seaborn and the way that i'm going to import this is to say okay i want to pull in seaborn but i'm going to refer to it as this alias sns so anytime i need to refer to seaborn later in the code i just use that also at the start here what i'm going to do is i'm going to use set a seaborn style you can think of this as like setting a template in powerpoint or microsoft word and the style that i like is dark grid this is not something you have to do again it's just like adding a template so what i'm going to start with is i'm going to go ahead and run this cell of code so i load in those two libraries now what i'm going to do is i'm going to read in my data i'm going to use pandas to do that and i've got a separate video on pandas which provides you a good overview of that now this data is data about customer churn so we have information about all our customers and whether or not they churned churn means whether they left they're no longer using our service what i want to do before i start visualizing this data with seaborne is to preview the first few records so i get an idea of what it looks like i got to know what i'm working with so i've got customer ids the gender of the customer whether they're married or not whether they have dependents or children whether they're a senior citizen they're above a certain age what their tenure is so the number of months that they've been a customer with us i've got whether or not they have phone service with us it's yes or no the type of internet service they have if they do it's either dsl fiber or it'll say no if there's no internet service whether they have paperless billing what their contract type is so this could be monthly so month-to-month annual or bi-annual the type of payment method that they use their monthly charges and whether or not they churned yes as they churned and they left the company ideally we'd like all of our customers to stay with us as long as possible so let's try first to use distribution plots in seabourn so the way that i'm going to refer to seaborn plots is i'm going to start with sns because that's how i import a library i use that alias and the distribution plot is dis plot okay and then what i'm going to tell seaborn is that my data frame is df churn when i loaded my data in i put it in that data frame it's a pandas data frame and what i'm saying is that i want to plot monthly charges it's going to give me the distribution of monthly charges so i'm going to go ahead and run this and i want to mention too that i've commented out several other examples and so you can kind of see what small adjustments are the options of these charts how that changes the way it looks so i'll go ahead and run this and i see for monthly charges which is on the x-axis i see the spread or distribution of them on the y-axis we're looking at the number of customers we've got a lot of customers that have fairly small bills kind of like in the 20 to 30 range and also a lot that are sort of in the 75 to 110 range okay so give us an idea of the spread of the data now i could i could adjust this distribution plot so that i change the kind of plot so in this case i'm going to try kde which is kernel density estimation it's going to represent the probability distribution per curve the continuous probability distribution curve and so if i run this it's going to look like a smoothed out curve somewhat similar to the last plot we still have monthly charges on the x-axis but as the density on the y-axis now if i change this even further what i want to do is add a fill in so if i say fill equals true that's the only adjustment that i'm making here it's just going to fill in underneath that curve i can also make a different adjustment here to add some dimension to my plot and what i'm going to do is i'm going to use what's called hue so hue is for color it's going to color my plot based on some other thing in this case we're going to use a category we want to color based on their category of internet service whether they have dsl fiber or no service with us at all and so i'm going to go ahead and run this and here's what it looks like so i still see the distribution of monthly charges but it's now added color for me so those who do not have internet service they tend to have much lower monthly bills which makes sense they maybe just have phone service with us customers who have dsl that's in blue they have higher bills than those without internet service but lower bills and those who have fiber which is this final color here so it gives us an additional dimension there we can look at the color or the hue based on some category in this case internet service okay what i want to do now is maybe make one more adjustment so i'm just going to use still monthly charges hue is going to be internet service like it is down below there i'm going to change the kind though to kde for kernel density estimation and the fill is going to be true so it's going to look like one of my previous charts i'm just coloring it out based on the type of internet service so that's some examples of the distribution plot okay now let's try count plots so account plots are going to count categories okay categories of data they're not it's not numeric we're counting categories so with the contract type the different types we have are monthly annual or bi-annual and so maybe i want to count up the number of customers that have each of those contract types so if i go ahead and run this i've got uh now counts for every contract type there's a large percentage of my customers that are month to month or monthly i wanted to mention here too that the actual syntax looks a little bit different for this plot it's not like you have to memorize this if you're looking for a specific plot you can go into their documentation just kind of make sure you got it right they're all not too different but anyway okay so now let's try the next count plot i just want to make a couple adjustments to this so i'm going to add a hue like i did with my distribution plot but i'm going to color it based on whether or not they churned so what i want to know is by contract type how many customers churned maybe there's one contract type where they tend to churn more often yeah this is interesting you can tell with annual and biannual there's a lower percentage of customers that churn and the reason for that is they only have one opportunity per year or every two years to get out of that contract with monthly customers who are month to month there's much higher churn because they can leave after every month and so that hue is based on churn there that's what you see in the legend we still got a contract type on the x-axis count on the y-axis but it's just adding that additional color there okay i can also change this a little bit so instead of vertical bars i can have horizontal bars so contract type is on the y-axis so all i've done is i've changed x equals contract type to y equals contract type and when i run that i'll see horizontal bars instead so it kind of depends on how you want to look at it i can add one more additional item here too i could say that i want to add a palette a color palette so seaborne if you look in their documentation they have lots of possible color palettes this is kind of like we have in microsoft word or powerpoint i'm going to use the palette that's called set 2 and this just gives me a different color i can change the the color scheme if i if i'd like to do that all right so those are account plots counting categories now let's try box plots and what i like to do is just go ahead and display this box plot so you get an idea of what it looks like and then we can start talking through it so i'm telling seaborne okay use the box plot i want that type of visual on the x-axis i want the payment method that's some category i've got to have a category in a box plot in addition to numeric data and then on my y-axis i'm going to have monthly charges okay right over here now what this is showing us is this is showing us kind of shape and variation in a set of distributions not just one so monthly charges was one distribution we're looking at several because we split it up by payment method okay now i can adjust this slightly to use something called a violin plot there's several plots that are somewhat similar to this and i get an idea if i look at it sort of in a different way there i want to go back to the box plot though for a second so to talk about what some of these things mean so the line in the middle of the box represents the median so the median monthly charges for customers who pay by check is like 37 or 38 dollars maybe and that median is far lower than the median for customers who pay with e-check okay it's interesting and then the size of the box represents the spread or the variation in the data and it looks like there's more variation and customers who pay using automated credit than those who pay with e-check it's a wider box when it comes to credit automated credit okay so i can also adjust this box plot a little bit so that maybe i'll use phone service instead and i'll still stick with monthly charges but i want my category to be phone service instead of payment method so it looks like customers who have phone service their media monthly charges are much higher and i see more variation than the customers who do not have phone service maybe they just have internet with us dsl or fiber i can also adjust the box pod a little bit further so that i add some additional color to it another dimension whether they're a senior citizen or not so i've used hue to designate that like we've done in a previous chart so go ahead and run this and what this is showing me now is i'm still seeing my monthly charges i'm also seeing phone service yes or no but within each of those phone service categories i see additional breakouts by whether they're a senior citizen or not whether of a certain age and so it looks like senior citizens who do have phone service there's less variation in monthly bills customers who are not senior citizens and do have phone service they have a lot more variation there a lower median too it looks like anyway that's another way to kind of look at the box plot now to try a couple other plots i want to actually pull in a different data set so i'm going to look at data for advertising spend and what i'm doing is i'm storing that data in a data frame called df ads it's a pandas data frame and so when i refer to when i refer to the data up above it was df churn that's the name that i gave it my pandas data frame with my churn data when i pull in this advertising data i'm going to store it in this data frame and so when i refer to when i generate charts later i'm going to use that name but what i first want to do is just preview the first few records in the data so i get an idea of what it looks like and i it approves my improves my ability to chart it so i see in in this data set tv radio and newspaper ad spend and that's in thousands of dollars and i see sales and millions of dollars at the end of this and so the first three fields you can think of them as like my inputs when i tweak and then sales is what my output is hopefully and each row maybe represents a different week or month or different advertising campaign or something like that okay so what i want to do now is illustrate some scatter plots okay let me go ahead and run this so we can talk about it so scatter plots show us the relationship between two variables numeric variables so what i did was i said okay seaborn i want to use scatterplot and on my x-axis is going to be tv advertising spend on my y-axis it's going to be sales in millions the ad spend was in thousands and here's going to be my data that's the data frame the pandas data frame that i loaded loaded my data into and it looks like there is sort of some relationship between these two variables it looks like as tv advertising spend goes up sales tends to go up as well and this is showing us correlation not showing us causation just because there's a relationship doesn't mean that the tv advertising spend is causing that increase in sales there could be other things happening okay let's do this let's try to adjust our scatter plot a little bit so in addition to showing tv ad spend and sales i also want to add radio ad spend and the way that i'm going to do it is i'm going to change the size of the bubble based on the amount of radio spend and let me run this so it makes a little bit more sense so each of these dots represents a different week or a different campaign and i look at a dot and i can see the tv ad spend i can see the sales but based on the size i can also see radio advertising spend it adds that additional dimension and maybe even a better way to look at this is to also color those dots to get a better sense of how much radio ad spend there is and so what i see is this still the size is radio spend and the hue is radio spend as well and so a darker dot represents more radio spend it's the same with a larger dot more radio advertising spend okay all right we could also look at uh i could change this so i look at newspaper ad spend instead of radio spend and just see how that changes things let's try one more plot the pair plot and so what i want to do is first just run this to get an idea of show you what it looks like it typically takes a few seconds because it's generating multiple plots not just one and so this is going to show us several scatter plots and several histograms and so i'm using my ads data again and i'm going to go down to the bottom of this so i can kind of explain this more easily but what this is showing us at the bottom is for all of these three charts actually all four of them sales are on the y-axis and something else is on the x-axis so tv advertising spend radio spend newspaper spend and at the end here it's just showing me the the spread of sales so this gives me like makes it easier to generate scatter plots maybe i want to look at a lot of scatter plots at once to be able to compare them and i just want to write them with one line of code now one issue you may run into as you're generating the pair plot is you can only feed into it numeric data so if that's the case what you can do is just adjust your your code here so you designate a specific position so what i'm going to say is i want a specific position in my data set in my ads data and in this first portion on the left hand side i'm just going to designate my rows and i've left this just as a colon because i want all my rows i don't want a specific subset of them and then what i'm saying is maybe i want column 1 and column 2. now what's a little bit confusing about this is it's actually going to give us column 2 and column 3 because this index starts at zero but the way that i can do this is i can designate specific columns that are numeric because if i try to feed it or throw it in columns that have text data in it like whether they have internet service or not it's going to throw an error so you may have to designate the columns you want in your pair plot so if i go ahead and run this i should see just two columns and it's actually the second and third column again because when i'm referring to it it starts at zero the index starts at zero all right now if you want some additional ideas of seaborne plots go ahead and refer to their documentation it gives you a lot of great examples there and it gives you the syntax you need for each of them"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Seaborn for Data Visualization",
        "Video Title":"How to Visualize Data in Python Using Seaborn | Seaborn Tutorial.",
        "URL":"https:\/\/www.youtube.com\/watch?v=LnGz20B3nTU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/LnGz20B3nTU\/hqdefault.jpg",
        "ID":"LnGz20B3nTU",
        "Publish Time":"2022-08-27T23:17:40Z",
        "Channel":"Absent Data",
        "Channel ID":"UCSQvwTdavISOusGhJW6H0Vg",
        "Transcript":"hi i'm going to show you how to make a whole bunch of different visuals in seabourn in just a few minutes with very little effort please don't pay for any seabourn tutorials you can learn this package in minutes and you'll be able to make a visual similar to what we see here which is a modified scatter plot so let's dive in so the first thing we want to be able to do is import our seaborn package and we're importing that and saving it as a variable s b once we have that variable we're able to use some of the functions with in that package for example we can look at all the data sets that we have available in the seaborne package and you can see all them here and we're going to use quite a few of them next let me tell you about the basic structure of a seaborn plot where we're bringing in the seaborn package we saved ours as sb we're using a particular plot function we're passing in the data that we are concerned with we're defining the x and y variables and then we may use a grouping variable and there are a whole host of different parameters within this function but i want to stick to the basics at first so let's make your first plot so let's get some data so we want to be able to use that sb but we want to be able to save it as the variable data or any variable you like df and then i'm going to do load data sets and i'm going to load in my titanic data set and let's look at the first five rows of that data set so if i run that we can see that we have all these different variables that we can bring in i am going to create my first graph and i'm going to just create a count plot so account plot is just going to count your categorical variables so i'm going to look for things that are categorical so i'm going to use sb which is our function and then i'm going to use count plot i'm going to pass in data equals data but i can shift and tab and show you this so the first thing we want to be able to pass in as our data i'm going to define my x which i am going to count this column which is sex and run this and now you can see a count plot just that easy so it's a very easy way to create a visual of course we can orient this by changing it to y and changing it to a bar a bar plot which is more on the horizontal end we can also use that categorical grouping that we talked about with hue so we can look for another categorical here so i can look at something like who survived and we can see a live yes and no we can pass that in with our hue so i run this and now we have a different grouping so let's put on a hyper speed boots and we're going to go through this very quickly on how to create a whole bunch of different charts so let's focus on univariate analysis where we're looking at continuous and categorical plots we can see all the different continuous plots for one variable which is univariate analysis we got histogram box plots boxing plots rug plots violin plots kde plots strip plots and we were able to create a categorical plot with our count plot just like we did above so i'm going to do that process again over i'm going to load in my data set i'm using the exercise data set we can see the data set here with the data set head the first five rows i created a histogram by using the his plot and we can see all i did was pass in data equals data define my x variable which was the pulse of the individual based on that data we can create a box plot just as easily a boxing plot which is a modified box plot which gives us a similar distribution like a box plot but just gives us a little bit more quartile information we have a violin plot and the only thing that we're changing is the first section of our function so you can really copy and paste that you all you're doing is changing the name of the actual graph so we can go down and look at rug plot all i do is change violin plot to rogue plot none of the internals change and the road plot's not that interesting we can see that most it's a distribution plot but we'll see how we can combine these to get a little bit more bang for our buck when we are using these visuals so i can change that to a kde plot and of course each one of these visuals have their own parameters for styling so you can see if i click shift tab we can see this has a shade parameter we can add so let's just add that equals true we can see that we have that shaded now we can use a strip plot which also gives us a distribution all we're doing is changing the first part of that of course you can continue to style this plot but we'll see about this a little bit later we can use a swarm plot which gets rid of some of what we call the jitter and makes this a little bit tighter ecdf plots which allows us also to see the distribution similar to a histogram where we can see the proportion of the data here like using that grouping variable hue you can see that we can get a lot of different information here where we're looking at the low-fat diet and the non-fat diet and if we use the hue we can group our data a little bit differently so we can see the proportions a little bit better so we talked about combining charts so what i've done here is i've combined the kde plot with our hue parameter and then i've used the rug plot also to show the the distribution at the bottom it's not that fantastic but i'm going to show you how to combine charts a little bit more when we jump into bivariate analysis so let's make some plots focusing on two variables so let's make some plots we can make scatter plots lmp plots rig plots hex plots pair plots and another type of kde plot which is bivariate and for categorical we can use line plots bar plots and point plots with where we're looking at categorical and continuous so we're going to do that same thing where we load in our data set and we look at the head we're looking at the passenger data set so let's dive into some categoricals so we can see that the year is here and if i look at the year as a category and the x-axis and passengers as continuous we can get a nice line plot by just changing the first part of that structure then we can get a point plot here which also shows us a similar structure but just where the line has the variations there we can also use a bar plot which groups it continuously and gets the sum of passengers for each year so let's load in our diamonds data set and we are going to start looking at some other data now i sampled this data because it's quite big i think it's a 15 000 row data set or 59 000 row data set so i just took the first 3 000 rows with the sample and then i am creating a bivariate chart which is a scatter plot just changing scatter but now you see we've added another variable to our structure we load in our data we get x y and so we're defining x as carrot and y as price and we are able to get the scatter plot we can add other parameters to that scatter plot such as the marker so it's the same scatter plot i just changed the marker here now we can use kde plots as a scatter plot where we get a different form where we can see the density is much more dense here which is similar here where you see the darkness in the scatter plot of course we can fill that kde plot with a parameter here and use a color mapping which is a gradation which gives you quite a dynamic way to see a bivariate analysis between carrot and price bivariate relationship we can also use a his plot and we can create a scatter plot that looks more like a a digitized or histogram but in a bivariate fashion so we can actually combine those two to make something a little bit interesting where we can see the density of our scatter plot here and we can also see the the map across that we could fill that scatter plot but i thought this was quite interesting so that's what combining different statistical charts will give us we can use a joint plot that also takes that x and y and it gives us the histogram on the sides of each one of our variable in their scatter plot we can also use the type of joint plot that we want we can pass in the hex that is similar to our histogram where we're able to see the scatter plot focused in this manner so you can get quite creative next we get our lmp plot which is our kind of regression plot we pass in our x and y variables i'm using a marker as a point just to get that scatter plot a little bit more focused and then i'm using the line keyword here so we can see that regression line and i made that red so plotting relationships so now we can start looking at the relationship or grid that is available to us sometime in some of our plots so i'm using a relationship a rail plot which is a relationship plot using that same structure passing in our data x and y this time i'm out adding a column for cut which is a categorical so we can see the different cuts for each one of our scatters so we are already adding an additional relationship to that scatter plot let's load in the data set tips look at the first five rows and what we're going to do is start using a little bit more of that grid that we have access to and that grid is called facet grid so in the facet grid we can define the columns and rows so i define the columns as a smoker and the and the row as sex and we can map any type of plot we want there so i've mapped box plots and i've used the total bill and we're able to create this visual so the mapping function here you pass in the plot with your seaborne variable and then you have your x or your variable that you want to analyze pair plot will give you a lot of that where you're just passing your whole data set to your pair plot and it will give you all the visuals for categorical and univariate and bivariate analysis the last thing we want to look at is correlations i'm bringing in that diamonds data set again getting the head this time i'm bringing in everything so here is our data i want to be able to look at correlation so i pass in my data set give it the correlation function and we get a correlation heat map which is the heat map function here and we're able to get this heat map we can stylize that heat map to make it look a lot better by bringing in annotations which are the actual numbers in the line widths and finally we can isolate a heat map by just saying okay i don't want to see each one of the variables i want to see how they're related to one of those variables which is price so you can create your heat map in the same fashion you've done above but just put in price as a double bracket and you will be able to see how everything is related to price and how well correlated it is i hope that gave you a very quick and easy way to use seaborne i would love to see some of your later visuals thank you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Data Visualization with Python",
        "Topic":"Seaborn for Data Visualization",
        "Video Title":"Python Seaborn Tutorial | Data Visualization in Python Using Seaborn | Edureka",
        "URL":"https:\/\/www.youtube.com\/watch?v=TLdXM0A7SR8",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/TLdXM0A7SR8\/hqdefault.jpg",
        "ID":"TLdXM0A7SR8",
        "Publish Time":"2019-07-10T15:04:13Z",
        "Channel":"edureka!",
        "Channel ID":"UCkw4JCwteGrDHIsyIIKo4tQ",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Git Basics: Cloning, Branching, Merging",
        "Video Title":"Git Explained in 100 Seconds",
        "URL":"https:\/\/www.youtube.com\/watch?v=hwP7WQkmECE",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/hwP7WQkmECE\/hqdefault.jpg",
        "ID":"hwP7WQkmECE",
        "Publish Time":"2020-03-02T14:40:10Z",
        "Channel":"Fireship",
        "Channel ID":"UCsBjURrPoezykLs9EqgamOA",
        "Transcript":"get a system for keeping track of changes that happen across a set of files open a directory on your local system with an editor like vs code then run get an it from the command line you just created a git repository or repo it lives in this hidden get directory and keeps track of all the changes that happen to these files as you work on a codebase you take snapshots or commits of the current state of these files every commit has a unique ID and is linked to its parent and this means we can travel back in time to a previous version of our files notice how our source control icon is lit up currently all of our files are untracked because we need to add them to the repo run get add to include or stage these files in the repo then create a snapshot of their current state by running git commit along with a message about what you did to these files congratulations you just created the first commit on the head of the master branch in this repo the changed files disappeared and you're now on a clean working directory the head represents the most recent commit if we make some changes commit them to the repo the head moves forward but we still have a reference to our previous commits so we can always go back to it but the thing about software is that it's developed in a nonlinear fashion you might have multiple teams working on different features for the same codebase simultaneously it makes that possible by branching create one by running git branch and then rank it check out to move into that branch you can now safely work on your feature in this branch without affecting the code or files in the master branch the commits you make here live in an alternate universe with its own unique history at some point though you'll likely want to merge this history with the history and the master branch when you're ready go back to the master branch by running git checkout then run git merge on your alternate-universe the tip of your feature branch now becomes the head of the master branch where in other words our fragmented universe has become one unless he ran into a merge conflict in which case you'll just have to wait for the sequel this has been get explained in 100 seconds if you want to see more short videos like this make sure to hit the like button subscribe and let me know what you think in the comments thanks for watching and I will see you in the next one you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Git Basics: Cloning, Branching, Merging",
        "Video Title":"How Git Works: Explained in 4 Minutes",
        "URL":"https:\/\/www.youtube.com\/watch?v=e9lnsKot_SQ",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/e9lnsKot_SQ\/hqdefault.jpg",
        "ID":"e9lnsKot_SQ",
        "Publish Time":"2023-11-28T16:30:11Z",
        "Channel":"ByteByteGo",
        "Channel ID":"UCZgt6AzoyjslHTC9dz0UoTw",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Git Basics: Cloning, Branching, Merging",
        "Video Title":"Git MERGE vs REBASE: Everything You Need to Know",
        "URL":"https:\/\/www.youtube.com\/watch?v=0chZFIZLR_0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/0chZFIZLR_0\/hqdefault.jpg",
        "ID":"0chZFIZLR_0",
        "Publish Time":"2023-08-10T15:30:00Z",
        "Channel":"ByteByteGo",
        "Channel ID":"UCZgt6AzoyjslHTC9dz0UoTw",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Git Basics: Cloning, Branching, Merging",
        "Video Title":"Git Branching and Merging - Detailed Tutorial",
        "URL":"https:\/\/www.youtube.com\/watch?v=Q1kHG842HoI",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Q1kHG842HoI\/hqdefault.jpg",
        "ID":"Q1kHG842HoI",
        "Publish Time":"2021-06-13T16:47:27Z",
        "Channel":"SuperSimpleDev",
        "Channel ID":"UCB6dvaWu0N8uVq2yKsZ5s5g",
        "Transcript":"In this tutorial we're going to learn the three skills that will get us to a professional level of git. And these skills are branching, merging, and the feature branch workflow. In order to follow along you'll need to know the basics of git and github. I go over that in part one and two of this tutorial, but you don't need to watch them, these are optional. You just need to know the basics of git and github to follow along with part three. So here's a situation that will come up when you're working professionally on a team, that you usually don't run into when you're working alone. Let's say that you're working on a feature and this is a pretty big feature so you decide to split up your feature into multiple commits. So you write some code, then you create a commit, so that it's saved in your version history in case you mess up. You write some more code, then you create another commit, and one day your manager comes to you and they say: hey, we actually have a bug in our website, and we need you to fix this bug. So what do you do? You don't actually want to fix this bug and then put it in your version history, because your version history contains the two commits that you made that are sort of work in progress, you're not really sure if they work, you're not really done your feature. So git has a solution for us, which is branching. So in branching we're going to create another branch of commits, that will branch off a master, so think of this as like a tree branch. master is sort of the trunk and then you have a branch coming out of the trunk. And the great thing about creating a branch like this is that if you have a bug fix, you can put that bug fix directly on your main branch and you can continue working on your feature that you're working on until you're done. So that's how git solves this problem of working on multiple things at the same time. For this part of the tutorial we're actually going to start fresh. We're going to create a new git repository, and a new version history to practice with, just so that it's easier for us to see what's going on. Let's go into our computer, and we're going to create a new folder that's going to contain all of our code. I'm going to call this folder git tutorial 3. Feel free to call it whatever you want. Now I'm going to open this folder in my code editor, file, open. I'm going to find this folder on my desktop. We're going to create a version history with three commits in it. Feel free to pause the video if you want to try that out yourself for practice, otherwise we're going to do it together. We're going to open our command line, and remember that the command line has to be running inside the folder that contains our code, which is this folder. So first we have to change directory to tilde slash desktop slash git tutorial 3 and now we're going to initialize git so that it's going to start tracking all of our changes. git init As a reminder there is a cheat sheet of all the git commands that i teach in this tutorial so that you don't have to write notes while you're watching, and you can find that cheat sheet in the description below. And now we're going to add some changes, and then add that to our version history. So we're going to keep this really simple, we're going to create a new file let's just call it hello, and we're going to call this version 1. Very simple. And to create a new version in our version history, remember we're going to do git add dot. So git add picks which changes we want in our version but it doesn't actually create a version, and dot is a special character that represents the current folder which is this folder. So we're going to commit, create a commit and let's just say this is version 1. And now let's keep going and create three versions in our version history. So let's create version two, again, git add dot git commit dash m version two. And then finally version three git add dot, git commit dash m version three. Okay, and now let's check our work by running git log dash dash all dash dash graph. And you can see that we have a version history, with three versions or three commits of our code. Now let's look at the situation that we described earlier, which is, let's say that we want to work on a new feature, and this is a pretty big feature so we're creating some commits along the way. But then our manager comes and asks us to add a bug fix for the website. The way to solve this problem is to use a feature of git called branching. You can think of branching as you're sort of creating a copy of your version history, but then you can add commits to the copy instead of your main version history that you had before. And the advantage of this is that you can add all the commits that you want to the copy while you're working on the feature, before your feature is done, and while you're still working on your feature you can add bug fixes to your original version history. This lets you create bug fixes and lets you put the bug fixes on your real website, without having your new feature and your work in progress code getting in the way. Let's see how we do this using git commands. So the first thing we need to do is we need to create a new branch, so remember a branch is sort of like creating a new copy of your version history that you can work on on the side. To do that, the git command for creating a branch is git branch and then we're going to give this branch a name. Usually you would name your branch based on what you're working on. Let's say that you're working on social login, so you would name your branch social login. But for our example, let's just keep it really simple, we're just going to call this branch feature one. And now to check our work, we're going to run git log dash dash all dash dash graph to see our history. And now you can see that we essentially have two branches over here. So we have the master branch, yours can be called the main branch. So this was our original version history and now we sort of have a copy of our version history, and this copy is called the feature one branch. So now what we want to do is we want to put our commits for a new feature onto our new branch instead of our main branch, because this main branch is usually used as the final copy of your code for the website. So you generally don't want to put in progress, or work in progress code onto your main branch, so how do we switch to working on the feature one branch. The git command for switching to a different branch is git checkout, and then the branch that we want to switch to. So we're going to switch to feature one. Now let's run git log dash dash all dash dash graph to check our work. If we look at our version history, we can see that we have this word HEAD, and it's pointing to feature one, so head basically tells us that we are currently working on the feature one branch, any commits that we create are going to be added to the feature one branch. Notice before, that head was pointing to master, and we were working on master before. And then we used git checkout to switch to the feature one branch. So now let's go ahead and add the code for our feature. We're going to make this really simple, we're just going to create a new file called feature, and let's say that this is the first commit for our feature. So our feature is really big, we're going to split it up into several commits. And now let's go back into our command line, and create a new commit for our feature. Let's call this feature commit one, and let's check our work by running git log dash dash all dash dash graph, and now you can see that we have our master branch that we had before, but now we're working on our feature one branch. So this essentially separates our new work in progress code, from our original version history. Now let's get some more practice, we're going to create another commit for our feature pause the video if you want to do it yourself for practice, otherwise we're going to do it together. Let's go back in here, I'm going to create commit 2 for our feature, I'm going to create the commit now so git add dot, git commit dash m feature commit two, and now let's check our work again with git log dash dash all dash dash graph. Now you can see that our feature 1 branch now has two additional commits. And our master branch is still the same. So this is how we work on something without disrupting our original code. Now let's say that our manager comes to us, and they say that they need a bug fix for our website. Let's say that this bug fix is a relatively simple fix, so we're just going to create the fix, we're going to test the fix, and then we're going to add it to master. And then master is going to go up to our real website, and it's going to fix the bug. So how do we do that? Well the first thing you have to realize is that we're currently working on feature one, so remember the head tells us which branch we're working on, and right now it's pointing to feature one so we essentially want to go back to master, and then start adding commits to master. So how do we switch back to our master branch? So let's quit out of this view by pressing q if you need to. And the command for switching branches, remember, is git checkout and the branch name. So we're going to switch back to our master branch, and let's just run git log dash dash all dash dash graph to see that it worked. So now you can see that head is now pointing to master, which is what we want and you can also see that our code has gone back to the master branch and this new file that we created in our feature branch has been deleted. Now let's create our bug fix. We're just going to really simplify this, we're going to create a new file, and we're going to call it bug fix, and let's just pretend this is our bug fix. And now we want to put this fix into our master branch. So let's go back into our command line, and because we are working on the master branch, we just have to create a commit. Let's press q if you need to. git add dot, git commit m bug fix. Now that we created the commit, let's check our work with git log dash dash all dash dash graph. Now you can see that there's actually a branching effect that's happening in our history, so we have our feature 1 branch, which contains our new feature and it contains our work in progress code, and we also have a bug fix in our original branch. So by using the branching feature of git, it allows us to work on multiple things at the same time, whether that is a feature and a bug fix, or two features at the same time, or even more than two features and a bug fix at the same time. So that is an introduction to branching, and how we use branching and what kind of problems it solves. You can see that we're using branching to work on multiple features at the same time, but now we also have another problem. Here, we eventually want to combine all of our changes together, so let's say that we're working on a feature in a separate branch just like this. We don't really want this feature to be in this separate branch forever right? we eventually want to put this feature, as well as a bug fix, all into our code. So how do we do that? Well git provides us another tool that helps us combine all of these separate branches. And this tool is called merging. So don't worry, merging is actually pretty easy to understand, I'm gonna give you a pop quiz here to show you what I mean. Let's say that we have two branches. On the first branch, we have a new file with this content, and on the second branch we have another new file with this content. Now we're gonna merge the two branches together, and I want you to let me know what is going to be the result of this merge. So feel free to pause the video if you need to think for a bit, otherwise I'm going to show you the answer now. For this question is actually pretty simple. The result of the merge is that we're going to have both of these new files now let's try another question. This one's a little bit more tricky let's say that we have one branch where we changed this line in the file, and then we have another branch where we changed another line of the file. What's going to be the result of this merge? Feel free to pause the video if you need to. The answer to this question is also pretty simple, the result of the merge is that in this file we're going to contain the change from branch 1, and we're going to have the change from branch 2. So this file is going to contain both the changes, from both the branches. And that's the result of the merge. So as you can see merging is actually pretty intuitive to understand you're just taking changes from one branch, and changes from another branch, and you're just combining the changes together. That's what merging is. So basically in git, we're gonna do this process, but git automates this for us so instead of us going through each file of the code and figuring out what's changed, and combining all of the changes, git is just automating this process for us. It's actually pretty intuitive once you get the hang of it. So let's go back into our code, and let's say that for the feature we're working on we're going to finish up this feature by adding the third and final commit. So the first thing we need to do is right now we're working on the master branch let's go back to working on our feature branch. We're going to press q to quit if you need. To I'm going to run git checkout feature 1 to switch to this branch and let's run git log dash dash all dash dash graph to check our work. And now we're working on our feature one branch again, so now let's finish up this feature. So as we said I'm just going to make it really simple, let's say that we're going to create commit 3 and this is the end of our feature. feature done. And now let's run log dash dash all dash dash graph just to see what's going on. So now you can see that we have finished our feature, and our master branch is over here with the bug fix, and now we essentially want to combine all of them together. We want to merge this branch with this branch, so that we have all of our changes. So one question you might have is: where does the result of the merge go? Does it go on top of the feature one branch, or does it go on top of the massive branch? Or does it go somewhere else entirely? So the answer to this question is that when you merge two branches together, the results will go on to the branch that you're currently working on. So remember we're currently working on the feature one branch, that's where HEAD is pointing to. So if we merge feature one and master together, then the result of that is going to be another commit on top of feature one. The next question we have is where should we put our merge result? Should the merge result go on top of the feature one branch or should it go on top of the master branch? So there's really nothing that enforces you to put the merge results on either branch, so git doesn't really have any rules here, but generally within a company if you're working on a team, they like to use the main branch or the master branch as sort of a final copy of the code that's eventually going to go to the website. So that's why we want to put all of our changes, we want to merge all of our changes back into the master branch. This is sort of the final copy of our code. So let's learn how we can merge everything we have in feature one back to master. So the way to do this is that, press q to quit, we are going to first switch to the master branch, and we're going to merge feature one into master. Let's take a look at how we do this. Let's switch to master first by using git checkout master, remember your branch can be called main, and now let's again always check our work git log dash dash all dash dash graph. Now we're on the master branch. Now we want to merge feature one into our master branch, and to do that we just have to give this command, git merge feature 1. So the way that git merge works is that you're going to give it a branch name and it's going to merge that branch into your current branch. So right now head is on master so we're working on master and this is going to merge feature 1 into master, and then it's going to put a new commit on top of master with the merged result. So remember the merged result is basically you're taking all the changes from the branch and all the changes from another branch and you're just combining all the changes together. There's not really much magic going on, but git automates this process for us. So one other thing that I forgot to mention here is that when we merge these two branches together, the result is going to be saved in a commit, so that commit has to have a message, and it's a little easier for us to write the message here. So we're going to do dash m and we're going to give a message. So usually you don't really need the dash m, you can just run git merge feature one, but this might require you to have a little bit of knowledge about vim or emacs or whatever editor you're using in your command line. I'm gonna assume that you don't have that knowledge so we're just gonna do it the easy way, which is giving the message here. So let's just give a very simple message, which is merge feature one and now we're going to press enter to run this merge. And now we can check our work by running git log again so git log dash dash all dash dash graph and now we can clearly see that the new branch we created has been merged into our master branch here. So our master branch contains both our bug fix from down here as well as the feature that we were working on in this branch. So we essentially combined all of those changes together, and now the final copy of our code has both our new feature, and our bug fix. So we learned how to use branching to work on multiple things at the same time and now we learned how to merge all of our work back together into the same code. Now we're going to learn about merge conflicts, which is when git doesn't know what the result of the merge should be so this is actually also pretty straightforward to understand. I'm going to give you another pop quiz to show you what I mean. Let's say that we have two branches again, and we want to merge these two branches together. In the first branch we have a file changed and this is the change, and in the second branch we have the same file changed, and here is our second change. So now what is the result of this merge? And the answer here is, we don't know. In this situation it's not clear whether we should take the change from branch one or if we should take the change from branch two. You might think that the combined result of the merge result should be that we have both of these changes, but the problem here is that the author of branch one wanted to do one thing, the author of branch two also wanted to do one thing, and if the code, and the combined code does two things, then it's obviously not the right answer. None of the authors wanted to do two things. So essentially we have to pick between branch one or branch two, we don't know what the answer is, and neither does git. So that's what a merge conflict is. It's when git tries to merge these two changes togethe,r and it just doesn't know which change we should take, and it just asks us which change that we want. So let's take a look at a merge conflict in practice. To create a merge conflict to practice with, we're going to create two branches and on each of the branches we're going to change the same file on the same line. So let's go ahead and do that in git right now. So first let's create another branch. So remember git branch creates a branch and this is the branch name, now let's check git log. You can see we have two branches master and conflict. So now let's switch over to the conflict branch, git checkout conflict and let's change one of our files. Let's change the feature file, and we're going to change this to conflict one, just to keep it simple. And now we're going to save this change into our version history, so we're just going to create a commit conflict 1, and as always we're going to check our code or check our work with git log. And now we can see that our new conflict branch has our commit, so now let's go back to our master branch and change the same file in the same line. Let's go back to git checkout master and now we're back on the master branch. You can see that the code is also back to the master branch, and we're going to change this to conflict 2. And now we're going to add another commit so we're going to change, we're going to save this change into our version history, on the master branch conflict two. And now finally let's check our work one last time git log dash dash all dash dash graph. And now you can see that we have this branching going on. On the master branch we changed this line of code, and on our conflict branch we changed the same line of code. So if we were to merge these two branches together, we will get a merge conflict because it's not really clear which change we should take, or which change from which branch we should take. So now let's demonstrate that by running git merge, and remember when you run git merge we're essentially taking another branch and merging it into our current branch. So right now our current branch is master, and you can tell that by the HEAD and the arrow. So we're going to merge conflict into master, and we're going to save the result on master. So that's what we're going to do here. And let's just give a commit message just to keep things simple, so merge conflict and press enter to run that. And now you can see that git is telling us that we have a merge conflict, which is basically what we did in the exercise before. Remember that we didn't know which line of code we should take, git in this situation also doesn't know which line of code we should take, and that's just what it's telling us. So now if we go back into our code, you can see that git added a lot of stuff here, so what does this mean? So basically git is saying that: hey, these are the lines that I'm confused about. So this is the version on the current branch so if we go back to our log, so remember that we were working on master so head is pointing to master. So over here this is saying that on the master branch this, is the code that we have. And on the conflict branch which is the other branch that we had this is the code that we have. And git is saying I don't know which line you want, and you got to tell me which line that you want. So git is basically saying that here are the two lines of code that I'm confused about, and you as a developer have to decide which one you want. And to tell git what we want the final code should be, we just have to have the final code, and then delete everything else. So let's say that we want the final code to be this line, we just have to delete everything else, so we're going to delete all this stuff, and that's going to be our final code. Now on the other hand, let's say that instead of this line from the master branch, we actually want this line from our conflict branch to be the final code. We just have to leave this line in place, and delete everything else. So that's pretty simple we just have to tell git what the final code should be. And one interesting thing about this is that if we go back to what we had before, You actually don't need to pick one of these lines, you can actually just delete everything, and write something entirely different. And git doesn't really care, it just wants you to tell it what the final line of code should be. So I can write anything that I want and git doesn't care, it'll just take whatever I wrote and put it in the version history. So for this example, let's just keep it simple and we're just going to go back to what we had before, and we're going to pick one of these branches to be our final code, so let's say that we want this branch to be our final code. We just delete everything else, and keep that line. So just to summarize, to resolve a conflict, you just tell git what the final code should be, and you delete everything else. And now we can finish the merge by going back into our command line, and to finish the merge, we just have to create a new commit. So we're going to git add dot I'm going to create a commit merge conflict resolved, and now if we run git log to check our work, so now you can see that we have successfully merged our branch into master, even though there was a merge conflict. So to summarize, a merge conflict is when git doesn't know which change to take, and it just tells us hey I don't know which change to take, here's the change from branch one here's the change from branch two, now you as a developer, you have to tell me which change you want. So we go in, we tell git what the final code should be, and then we create a commit to finish the merge. So that's how you merge and that's how you resolve merge conflicts. The last skill we're going to learn is called feature branches. So this is going to take everything that we learned in this tutorial and it's going to combine it all together into a sort of process of how we should use git and github. Once we learn feature branches we're going to be at that professional level of git, which means we're going to be good enough to work at a company as a professional engineer in terms of our git skills. So just as a reference, every team that I've worked on has used feature branches. Now what are feature branches? So feature branch is something that we call a workflow, it's a step-by-step process that we follow when we're using git and github, and we just need to learn what this process is, and how to follow this process, so let's get started. We'll start with an overview of the steps in the feature branch workflow, and then we're going to learn how to follow these steps by doing a hands-on example. So we actually know a little bit about feature branches already. When we first learned about branching, we said that branches allow us to work on two different things at the same time. So when we create a new feature, we create a branch for that feature first, and then we put all of our commits for that feature on the new branch. So we typically call this new branch a feature branch, and that's where we get the name of the workflow from. So there's one other problem that we haven't solved here, and that problem is code reviews. Basically when you're working on a new feature, before that feature goes into your website, you need another software engineer to look at your code. It's helpful for them to spot maybe mistakes that you made, or if there are any bugs in your code. So how do we use git and github to do code reviews? This is part of the feature branch workflow, that's going to solve this problem. So we already learned the first part of the workflow, which is creating a branch for our feature. We call this the feature branch. And the next thing we're going to do is we're going to upload this branch to github. Remember that github is our remote repository, it not only contains a copy of our code it also contains a copy of our version history. This means that we can also upload part of our version history on our computer to github. So after uploading our branch to github, our remote repository is going to look like this. It's going to have our master branch, and it's going to have a new branch that contains our feature. The reason that we're uploading it to github is that now all the other engineers on our team can see our code, and that's going to help us do code reviews. So once our branch is on github, there's a process on github that allows us to do code reviews. It allows us to do tests on our feature branch if we need to, and then once all of those pass, we can merge our feature branch into master, and that's going to go into our real website. So in the previous section you'll notice that we merged two branches on our computer, this time we're going to merge the branches on github. So that's how we're going to manage our merges. Let's take a look at a specific example of the feature branch workflow. We're going to go through it step by step. So let's pretend that we're making a new feature, we're going to keep this really simple, we're just going to create a new file called new feature. And just make this really simple. Now remember that we want this feature to be on a feature branch. So the first thing that we're going to do before we create a commit, is we're going to create our feature branch. So let's create a branch here using git branch and let's just call this new feature, and let's run git log dash dash all graph to check that it worked. So now we have both a master branch and a new feature branch, but notice that we're still working on master. So instead, we want to be working on our new feature branch. To do that remember we can do git checkout and the branch that we want to switch to. And let's run git log just in case. And now we can see that we are now working on the new feature branch. So the last thing we have to do is to add our commit to the feature branch, so git add dot, git commit dash m new feature. Now to push this branch up to github, first we need a github repository so let's go into our github account. We're going to create a new repository that we can upload to. So we're going to go in here and we're going to click your repositories, and we're going to click new. And now to name this repository, I'm going to give it the same name as what I have on my computer so I'm going to call this git tutorial 3. I'll keep it as public and I'll click create repository. Now remember to upload to a github repository, we first have to add a link to our github repository. So we have to add a link to this repository in our local repository. So let's take the url of our github repository and add a link to it. So to do that we can use git remote add and we have to give a nickname to our remote repository, so let's call it origin, this is the most common name that people use. And we're going to paste the url to our github repository. Let's press enter, and now the first thing that we want to do is we actually want to upload our master branch first. If you're at work, usually the master branch would be the default branch, you usually have it on github already, but because we started off our git repository on our computer, we actually don't have a default master branch here. So the first thing we're going to do is we're going to switch to our master branch, and we're going to upload that to github and then we're going to switch back to our new feature branch and upload our feature branch to github just so that it's consistent, with what you would have if you're working at a real company. So to switch to our master branch we're going to git checkout master and remember the git command to push this to github is git push and we're going to push to origin which is this github repository and we're going to push the branch, which is master. And now if we go back to github and we refresh, you'll see that we now have our git history uploaded to github, and we have the master branch. Now the second thing we're going to do is this is actually part of the feature branch workflow, is we're going to upload our feature branch to github. So to do that we're going to do git check out new feature, we're gonna switch to that branch first, and then we're going to upload it. So git push origin new feature. We're gonna push to origin which is github, and we're going to push our new feature branch. And now if we go back to github and we refresh the page. In this drop down you can see that we have both a master branch, and a new feature branch you might also see this message saying that it's giving you an option to create a pull request right now. That's exactly what we need to do to initiate a code review, but sometimes you might not see this option so we're going to create a pull request manually. To create a pull request you can either click this button, or we can go into this pull request tab and we're going to create a new pull request. So pull request basically takes your branch, your feature branch, it compares it to master and it initiates a code review. So it lets other people look at your code see what changed, and it lets them add comments just in case you have any bugs or mistakes in your code. So we're going to take a look at what that process looks like. We're going to create a new pull request and we're essentially going to be merging our new feature branch into master. So this is the same thing as merging except we're doing this on github this time. So you have to make sure that we have the right direction here, and the way to do that is to look at this arrow. So this arrow means that we're taking all of the code changes in our feature branch and we're going to put it back into master. So that's what we want because master is sort of the final copy of our code that's going to go on our website. So once we have this set, we can click create pull request, and we can write a description describing our changes if we want. I'll just give, I'll just give a pretty simple description here. This is a new feature. And finally we can click create pull request, and that initiates a code review. So what happens here is that you give this url to your teammates, and then they're gonna go open this pull request on github, they can go to this file changed tab and they can see all the changes that you made. If they don't like a change, they can say um bug and essentially they can start commenting on your code and telling you what they want to fix, or something that they want to improve. And now if you go back to our conversations tab, you can see all of the comments that the code reviewer has left, and once we resolved all of these comments, we're now ready to merge our feature into our main branch. So this is what we learned when we learned merging earlier, except we're going to do this in github. And to do that all we have to do is press this merge pull request button, confirm merge, and that's it. Because we've done a bunch of stuff on github, and we've merged the branches on github, we want to go back and sync those changes back to our local repository. So remember the command for doing that is git pull. So let's go back into our local repository, and let's actually see what happened on github. So the command to get all the updates from our remote repository is git fetch. And now let's check our git log to see what everything looks like. And this is a little bit hard to read so we're going to go through it step by step. So in our local repository on our computer, we have a master branch and we have a feature branch. So this hasn't changed the other thing that we did is that we uploaded this feature branch to github so now origin has a branch called new feature. So this is the result of uploading our local feature branch onto github. And you can also see that on github the master branch contains not only our local master branch, but also the result of the merge, so that's why origin slash master is ahead of our local master. In order to update our local master branch up to here, all we have to do is first switch to master, git checkout master, and now to pull changes from github we're going to run git pull. Actually we have to give the name of the remote repository to pull from, as well as the branch. So we're going to pull the master branch from origin, so we're going to pull the master branch from our github repository and press enter. And now we run git log dash dash all dash dash graph. You can see that our local master branch is now in sync with what is on github. So that is the feature branch workflow. As you can see it's basically just a step-by-step process that you follow when you're using git and github and this is what allows companies to have a team of engineers working on a single code base. Now once you get the hang of the future branch workflow, this means that we are at a professional level of git because the majority of companies use this workflow in their projects. So we're going to look at an overview of a very common situation. So there are two engineers and they're both working on different features. So engineer one is going to create a feature branch called feature one, and engineer two creates a feature branch called feature two. Now in these branches let's say that they both change the same file and the same line, so this is going to create a merge conflict. So engineer one uploads their branch to github, engineer two also uploads their branch to github, now engineer one is going to create the pull request, as we explained in the feature branch workflow. That's going to get reviewed and then they're going to merge their branch into master. There's not going to be a conflict here because master doesn't have any new changes so there are no merge conflicts. But now when engineer 2 tries to merge their branch into master there's going to be a merge conflict because there's a new change that changes the same file and the same line as their own branch, and that's going to result in a conflict. So this is where a merge conflict can occur in the feature branch workflow, so we're going to take a look at a hands-on example. So first let's try to simulate that situation, we're going to start off with our master branch and we're going to create a feature one branch and a feature two branch, and they're going to change the same file on the same line to create a merge conflict. So let's go ahead and do that so right now. We're already working on the master branch so what we're going to do is we're going to create two new branches, so let's start with feature one. Actually feature one already exists so what we can do is we're gonna delete that branch, using git branch dash capital d feature one, and we're going to recreate that branch. So essentially when we create a branch that new branch is going to be created wherever HEAD is. So right now HEAD is at master, we're going to create a new branch right beside master. So git checkout, we're going to run git log dash dash all dash dash graph, you can see that right beside master we have a new feature one branch. So according to our example we're going to change the same file in the same line. Let's go back into our code and pick one of the files, let's say this file, so we're going to change this to feature one and we're going to commit this change onto the feature one branch. So remember right now we're working on master, we want to switch to feature one, so git checkout feature one, and now let's add a commit. Now the second part of our scenario is that we have a another branch that changes the same file the same line, so let's create that right now. So if we run git log dash dash all dash dash graph again you'll see that head is now pointing to feature one. We actually want to start a new branch from master, so we have to switch to master first, and then create a feature two branch. So let's git check out master to switch to master, and then we're going to run git branch feature 2 to create our second feature branch. And now remember we have to switch to our second feature branch, and we have to change the same file and the same line. So let's take this file which is the same file as we changed in the other branch, I'm going to change this to feature two, and we're going to save that change in a commit. Now let's run git log all graph to check our work. So now you can see that we have our master branch here, and we sort of have a feature one branch and a feature two branch branching out and they both change the same file in the same line. Now what we're going to do is we're going to upload both of these to github, and we're going to create a merge conflict. First since we're already on feature 2, we can upload that to github so git push, we're gonna push to origin, and we're gonna push the feature two branch. Okay, once that's done let's go into github and make sure it worked. So let's click this link to our repository, and if we click this drop down here, we can see that we now successfully uploaded our feature two branch. Next we're going to upload our feature one branch so we first have to check out, and then we're going to push our feature one branch to origin, which is github. All right so let's refresh, and now you can see that we have both of our branches on github, we're ready to create pull requests, do code reviews and merge both of these. So let's start with feature one first, I'm going to go to the pull request tab and we're going to create a new pull request. This is going to request to merge feature 1 into master, and so we want to merge feature 1 into master, be careful of the arrow. And now we're going to click create pull request, create pull request. And let's also create another pull request for feature two, So that this is something that happens a lot at work is when you have one pull request and you're working on a feature, and another engineer creates another pull request at the same time, and then the resulting merging creates a merge conflict. So let's actually create another pull request here for feature two so in this pull request we're going to merge all the changes from the feature two branch into master. We're gonna create. Great okay so now we have two branches that want to be merged into master, there are pull requests that are open people are reviewing their code, and let's say that feature one finishes code review first. So they merge their features into master first, we're going to click merge pull request to merge this. And now if we go back to the pull request for feature two, you'll notice that we now have a merge conflict. So the reason we have a merge conflict is remember that in our github repository, our master branch now has a new change, and our feature 2 branch also has a change, and these two changes basically modify the same file and the same line. git is not sure which line to pick. One of the trickier parts of this scenario is that the merge conflict is on github, so you can either use the web editor, which essentially does the same thing as we had in our local repository that we learned when we learned about merge conflicts. So once we decided what we want the final code should be, let's say that we want this to be the final code, we're going to delete everything else and we're going to click mark as resolved and after that we're going to click commit merge. So that will resolve the merge conflict and it will allow us to merge this feature 2 branch into master. We just learned how to resolve merge conflicts in the feature branch workflow, but notice how we use github's web editor to resolve these conflicts. Sometimes we actually want to resolve these conflicts on our own computer, because we can run the app we can use our code editor, basically we have more tools to help us with these conflicts. So in this section we're going to do exactly, that we're going to take these merge conflicts from the feature branch workflow, and we're going to bring them to our computer, and we're going to resolve them on our computer. But first we need to set up our git history in order to practice this scenario. We're going to set up the same scenario that we had before, first we need to go check out master and then run git pull origin master, just so that we have the latest updates from github. We're going to have two branches that modify the same file on the same line, and that's going to create a merge conflict, and then we're going to push both of these branches to github. So instead of naming these branches feature 1 and feature 2 like previously, let's name these feature 3 and feature 4. So I'll let you do that as an exercise and I'll see you back when you're ready. I basically created the same scenario that we had before, except this time we're gonna call the branches feature three and feature four. First we're going to merge in feature three, which is going to create a merge conflict on feature four. Let's go back, open the feature four pull request, and now we can see that we have a merge conflict. So how do we resolve this on our local computer without using this web editor? So if we look back to the previous pull request, you can see that to resolve the merge conflict, we have to merge master into feature two. So this time we just have to merge master into feature 4, but we're going to do it on our computer. So I'm going to go to the command line, the first thing I have to do is I have to update my master branch so to do that I'm going to check out master, and I'm going to git pull any updates from github, which is origin back to my master branch. And now I'm going to git checkout feature four. So remember, as a reminder we're going to merge master into our feature branch. So remember that when we run git merge, we're essentially taking another branch and merging it into our current branch. So first we're gonna switch to the feature four branch, and we're gonna merge master into this branch. So now we're going to git merge master and now we can see that we are in the same scenario that we had before when we were first learning about merge conflicts. So let's go into our code and fix these conflicts. And you can see that git says I don't know which of these lines you want, for convenience here's the line from HEAD which is feature four and here's the line from the master branch, which is feature three. We can take this line, we can take this line, or we can take or we can write something completely different, git doesn't care it just wants us to tell it what the final code should be. So let's say that the final code should be feature four. So let's delete everything else and remember to resolve a conflict we're going to add it, and we're going to commit everything in the end. So let's go back to our command line. We're going to add the changes that we made, or the resolution that we made, and we're going to commit this change, and this will resolve the merge conflict. So git commit conflict resolved, and now we just merge master into future four. So we resolve the merge conflict, we have to push these results back up to github, so we're going to push origin feature four. We go back into github and go back to this pull request, you can see that we just resolved the pull request. Of course I gave the message of conflict resolved, but what we really did here was we took the master branch and merged it into our feature branch. So that is how you resolve merge conflicts in the feature branch workflow if you want to do that on your computer and how you do that on the github web editor. And that is the end of this tutorial, we went from zero experience in part one to a professional level of git and github in part 3. I do realize that I did leave out some skills such as git rebase. I actually did record them but I didn't feel like I did a really good job explaining them. However this tutorial is meant to give you just a foundational overview of git and github and how we use these tools in a professional workflow. So I'm going to leave that up to you now that you have this foundation, it's a lot easier to learn these other git skills incrementally. Thank you so much for watching my name is Simon from supersimple.dev I want to make a tech career possible for anyone. If you have any questions or comments please leave them down in the comments, as always you can contact me at super simple.dev feedback I'll see you in the next one"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"GitHub for Collaborative Projects: Pull Requests and Commit History",
        "Video Title":"GitHub | Working with multiple developers on same project",
        "URL":"https:\/\/www.youtube.com\/watch?v=k5D37W6h56o",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/k5D37W6h56o\/hqdefault.jpg",
        "ID":"k5D37W6h56o",
        "Publish Time":"2020-08-25T12:22:52Z",
        "Channel":"ThatAIGuy",
        "Channel ID":"UCIUfGgjNYHS-U547JUs2_eQ",
        "Transcript":"hello and welcome to my channel my name is kanav bansal and in this video i will be talking about how to work with multiple developers on a single code base so in order to understand github collaboration we have to understand how to generate a pull request and how an owner can merge those pull requests so let's try to understand it theoretically first and then we will see the practical implementation of the same concept so if we talk about github github is nothing but a place where you can store your files similar to google drive now the difference between google drive and github is on github you are supposed to store your code files and with multiple developers that are on github you can collaborate with those developers as well as those developers if they want they can contribute to your source code as well now let's try to talk about this scenario where this person is having an account with this username on github.com let's say this person wants to create or host some project on github.com the name of this project on github.com is 200 lead code questions now this person is the owner of this repository right now let's try to understand how any other person in the world can collaborate and contribute to this source code now let's assume this is another person with this username on github let's say this person is interested in this code that was written by person one he can't directly change the source code in this repository so first of all he has to create a copy of this code on his account now this process is called as forking a github repository right now after this person has copied the complete source code he can do all the required changes on this code and after that he can simply request the owner of the original repository to update the source code with all changes so this kind of request is called as pull request now this owner can simply review and update the code with the desired changes if it thinks all the changes are good all right so this is the complete workflow of how github collaboration works now let's try to understand this complete concept again with this diagram so let's say person one who was the owner of the repository hosts a project on github or basically stores a project on github now let's say person2 is interested in contributing towards that project so he can simply go ahead and copy that project we call it forking the project then he will make all the desired changes after making all the desired changes he can request the owner to update the code base so this concept this thing is called as generating the pull request now person one the owner of the repository he will get the notification with the changes that were made by person two now this person the owner of the repository he can go ahead and review the code changes that were made and he can merge the pull request basically he can make the changes to the original code base now let's try to understand it practically now let's consider this scenario where we have these two persons person one on the left hand side and person two on the right hand side so let's say this person one is having an account on github.com with this username bunsel let's say second person is having the account on github with this username the technologist all right now let's say technologist is interested in the code written by bansal khanna so first step is to copy this complete code in order to copy this complete code we just need to fork this repository so once we fork this repository you can clearly see that this repository now resides inside this account right and it is formed or copied from bunsel khanov's original repository now let's say i have solved this question on lead code lead code problem number 42 trapping rainwater now i want to update this code for example let's say i go to 200 lead code questions folder and let me find lead code problem number 42 so as you can see this is lead code problem number 42 so let me open c plus plus 5 from here so i just want to edit this file as soon as i click on this edit button i will see this editor over here and i just need to copy this code to this file as soon as i do this i can simply go ahead and commit the changes that i've made after committing these changes i can go back to the repository right i need to pull the request to make owner know that these are the changes that i did as soon as i click on pull request github will automatically detect all the changes that were made by me on this file lead code problem number 42.cpp i did all these changes so i can go ahead and create a pull request all right so i can simply write some comment okay and then i just need to create a pull request now as soon as i do this the owner is going to get notified with the changes that the technologist made all right so let's go to the owner's account so as you can see there is a notification right so let's let's refresh this page first of all so as soon as i refresh this page i will get this pulled request right i will go to this pull request i will click on this and as you can see the technologist had made some changes right so let let me check the file changes that were made so i just need to go to file changes i will review that okay this looks good so i just need to go back to the conversation and i will simply click on this merge pull request button and i just need to confirm the merge okay now as soon as i do that this code that was written by the technologist is going to get merged with the original repository original code base all right so this is a complete process of how multiple developers can collaborate on github platform all right so thank you for watching guys if you need anything else just let me know in the comment section below thank you and have a nice day"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"GitHub for Collaborative Projects: Pull Requests and Commit History",
        "Video Title":"GitHub Pull Request in 100 Seconds - Git a FREE sticker \ud83d\udd25",
        "URL":"https:\/\/www.youtube.com\/watch?v=8lGpZkjnkt4",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/8lGpZkjnkt4\/hqdefault.jpg",
        "ID":"8lGpZkjnkt4",
        "Publish Time":"2020-03-17T14:40:32Z",
        "Channel":"Fireship",
        "Channel ID":"UCsBjURrPoezykLs9EqgamOA",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"GitHub for Collaborative Projects: Pull Requests and Commit History",
        "Video Title":"How Git Works: Explained in 4 Minutes",
        "URL":"https:\/\/www.youtube.com\/watch?v=e9lnsKot_SQ",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/e9lnsKot_SQ\/hqdefault.jpg",
        "ID":"e9lnsKot_SQ",
        "Publish Time":"2023-11-28T16:30:11Z",
        "Channel":"ByteByteGo",
        "Channel ID":"UCZgt6AzoyjslHTC9dz0UoTw",
        "Transcript":""
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"GitHub for Collaborative Projects: Pull Requests and Commit History",
        "Video Title":"How to create a pull request in 4 min | GitHub for Beginners 2024",
        "URL":"https:\/\/www.youtube.com\/watch?v=nCKdihvneS0",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/nCKdihvneS0\/hqdefault.jpg",
        "ID":"nCKdihvneS0",
        "Publish Time":"2024-08-12T13:00:59Z",
        "Channel":"GitHub",
        "Channel ID":"UC7c3Kb6jYCRj4JOHHZTxKsQ",
        "Transcript":"today I'll show you how to create your first pool request on GitHub step by step I'm kadaa and I'm so happy you're here with me today in this video I'm going to show you how to create your first pool request on GitHub a pool request or a PR is a proposal to merge a set of changes from one branch into another you can collaborate with others to review and discuss the proposed set of changes before they're integrated into the main code basee PRS visually display the differences or diffs between the content in the source Branch the branch with your changes and the content in the Target Branch the branch you want to merge into you can create a pool request on github.com with GitHub desktop in GitHub Cod spaces on GitHub mobile and when using the GitHub CLI you can also create a pool request right from your terminal with Git and that's what we'll be doing today on GitHub navigate to your reposit clone it and create a new Branch get checkout DB update name open up the repository in your editor and make a change stage and commit your changes with Git ad and git commit DM update game name now run good status to ensure that your changes were successfully committed awesome we can now do G push origin Branch name to push our changes to the GitHub repository in my case I'll do git push origin update name navigate to your repo on GitHub and you'll see a message that says update name had recent pushes and a green compare and pull request button click on the button to start creating your first pull request this will take you to the pull request page where you're able to use the base Branch dropdown menu to select the branch you'd like to merge into and then use the compare Branch drop down menu to choose the branch you made your changes add a title and a description of the changes that you've made in your branch you can choose to create a draft pull request if it's not ready to be reviewed or you can create a pull request that's ready for a review after you create your PR you can ask someone on your team to review your proposed changes once your PR has been reviewed you can merge it into the main branch and that's how you create a pool request that wasn't too bad right I want you to keep these three things in mind when creating pull requests going forward number one write small PRS smaller pull requests are easier and faster to review and merge leave less rooms introduce bugs and provide a clearer history of changes number two review your own pull request first review build and test your own PR before submitting it this will allow you to catch errors or typos that that you may have missed before number three provide context and guidance write clear titles and descriptions for your pool request so that reviewers can quickly understand what the pool request does in the PR's body include the purpose of the pr an overview of what changed links to any additional context such as tracking issues tickets or previous conversations go to this repository to practice creating your very own P request on Hub I hope you found this video helpful and if you have any questions be sure to drop them Below in the comments until next time happy coding [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Experiment Tracking with Jupyter Notebooks and Python Scripts",
        "Video Title":"Jupyter Notebooks or Standalone Scripts?",
        "URL":"https:\/\/www.youtube.com\/watch?v=Yua0ual77RU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Yua0ual77RU\/hqdefault.jpg",
        "ID":"Yua0ual77RU",
        "Publish Time":"2020-01-06T11:00:06Z",
        "Channel":"Andreas Kretz",
        "Channel ID":"UCY8mzqqGwl5_bTpBY9qLMAA",
        "Transcript":"I'm also not a huge fan of tubular notebooks and the whole notebooks creation because I'm I'm I think that when you're when you want to create something for production and do it in production then tubular notebooks they're there yeah they're not optimal super notebooks are nice to do some exploration to do some nessam some testing or some prototyping but I'm guessing or from my experience when you want to when you want to really bring something into production you create code and don't do it in notebooks and so what they said here sorry so once you have a notebook how do you how do you basically create this or change this from a notebook to something else you run it you make a copy convert it to a Python file and then remove all the print statements and then basically you're going basically you are you're creating the whole the whole thing your writing unit tests make them pass and then recycle and refract during cycle and then you test the whole thing it shows I teach future data and lists and and they always do their stuff in notebooks I forced them to learn how to make real PI app yeah because that's that's what that's exactly the thing most people think when you have when you when you can do stuff in notebooks you're ready for production you're you're not ready for production because really in production what you handling notebooks isn't this isn't the way that you automate stuff so it's good for X data it's good for exploration for trying out things for doing a a master's thesis or a PhD or whatever but if you want to run it in production and run it on on on the the systems that are that are available then you will go and we will create a standalone script Python or whatever or Scala if you're if you're thinking about SPARC these are the these are the the tools that you or this is the the normal cycle you start with a with a notebook because that is absolutely that makes sense that's easy you get direct feedback this is why I was why I like Zeppelin first first back so much you can try it out very very easily you can load in today loading data you can manipulate data and look at the results but if I would not use this in production I mean maybe for a for a quick batch chop to to to look into some or to explore some data and try some stuff out but not of a thing [Music] [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Experiment Tracking with Jupyter Notebooks and Python Scripts",
        "Video Title":"How To Use Jupyter NoteBook For Data Analysis (Beginner Tutorial)",
        "URL":"https:\/\/www.youtube.com\/watch?v=IMrxB8Mq5KU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/IMrxB8Mq5KU\/hqdefault.jpg",
        "ID":"IMrxB8Mq5KU",
        "Publish Time":"2023-06-26T10:05:51Z",
        "Channel":"Indently",
        "Channel ID":"UCuudpdbKmQWq2PPzYgVCWlA",
        "Transcript":"in this video I'm going to be showing you how you can get started with using jupyter notebook in a matter of minutes so the very first step is to either download pycharm or to download Anaconda now both of these are completely free although the pycharm alternative is going to cost money for the professional version and that will allow you to use jupyter notebook inside pycharm but to get started we're going to download Anaconda and you can choose whether to download that for MacBook or Windows and you can do that for free at anaconda.com download but as soon as you download it you should get a window like this there's not really any setup to be done it might take a moment to download it but as soon as you open it for the first time you should get a window such as this one and it's going to give you a lot of tools that you can use for data science but what we're going to do is open up the terminal and here we will type in Jupiter notebook and that's going to start a Jupiter notebook for us and I can't remember if you have to install it here or not but if you have an install button here install it first otherwise just use the command or you can even tap on launch anyways the first thing it's going to do is take us to this tree of all of our directories so as you can see I have my desktop my documents and so on in this example I'm just going to tap on my desktop and we're going to create a new notebook here so here you can tap on new and then click on Python 3 and this will start a new notebook for us and you can even give it a title at the top we can say notebook example and we will be inside our first notebook so the first thing we're going to do inside this notebook is document a line of code so we're going to tap on this tab here and we're going to change it to markdown so now everything we enter inside this box is going to be considered markdown so we can say first program and we will add a description that says this is our first program that prints a message so that's the documentation we're going to add but to actually execute this markdown so we can see it you're going to have to tab on run and then it's going to execute it and leave the message but at any point during this program you can double click on it and edit it and re-run it now we're back inside the code mode so we have something that says in and we have some empty square brackets and the empty square brackets are going to contain how many times we ran this code so for example if we type in print hello world we can now tap on run and it's going to execute it and it's going to create a new line for us immediately after if you want to change something here you can say print hello world print seconds world and if you run this again it will say we ran this block two times but now we have this output here then we can add some more documentation we can say markdown this is some more documentation here is one item here is another item and I believe you can hold down shift plus enter to execute it and you will get some more documentation for the next code that you decide to use now the pros of using Anaconda instead of pycharm is that you have a lot of data science packages installed by default so for example if you want to import pandas as PD and you tap on shift plus enter we can now use pandas in our project without having to install it and here we can just print PD and you'll see that we have this module imported from pandas now at any moment if you don't like what a line does for example if we type in print bad code if at any moment you have this line of code and you don't want it anymore you can tap on the box here and you'll notice that we're going to be in this blue mode and this blue mode is command mode once you tap on a box it turns green and that means you are in editor mode which means you can edit code or you can add some text that is editor mode but tap on the box and get into the command mode and double tap on D and that will delete a line in command mode you can also tap on Zed and it will undo the delete to add a box above a block in command mode you can tap on a and it will add one above now we're going to tap on this one that says import pandas as PD and in command mode we're going to tap on B and it's going to add a box below so those are just some of the shortcuts that you can use with Jupiter notebook but for more details about all the shortcuts tap on this keyboard here and it's going to give you all the commands for jupyter Notebook and you'll notice that there's a separate one for command mode and they will have these parentheses that say command mode otherwise it will say edit as you become more proficient with this you'll start moving around with the keyboard so up and down arrow keys go up and down if you tap on enter you enter editing mode if you tap on Escape you exit editing mode you can also move blocks up and down using these arrow keys so if you want to move print up just tap on this Arrow here and it will move it closer to pandas so we don't have all these random lines in between them also you might notice that we have this text here that says last checkpoint and it says it auto saved three minutes ago but at any point you can also manually save it by holding command or Control Plus s and then it's going to say that a checkpoint was created and that we managed to save it and I should have mentioned but whatever kind of expression you enter inside here will be evaluated and returned as the output so now if we have this and we type in shift plus enter it will say out and we'll get two so those were the basics of how you can use jupyter notebook now we're going to log out and stop this session so we're going to say exit out of the page we successfully logged out and I did mention that you could do this in pycharm and the reason I would recommend using pycharm is that you get a lot more powerful tools a lot more hints and it's just dedicated to doing things with python so just like with the web version we can now run this inside pychon and actually you're not going to get this by default so to get it you're going to have to open up pycharm professional Edition and you're going to want to create a new file and you will see that they will have a jupyter notebook and here you can call it whatever you want you can say new notebook and it will give you this page that looks just like the web version except I'm using dark mode which is a lot more pleasant on my eyes and it has all the features that I love that come with pycharm so here we can type in something such as import pandas as PD and we don't have that installed so here we can type in install package pandas so just like that we can now run this and it's going to start a Jupiter server and that's usually where it hosts the notebook and the first time you run it it might take a while it just takes some time to perform all of this so you're going to have to be patient maybe for a minute or so but in the meanwhile we can add a new cell and as you can see you still have the green mode and the blue mode for editing mode and command mode in command mode you can tap a and it will add a new row above or you can tap b and it will add a new row below but now pandas was imported so we can do something such as data equals one two three and we can say PD dot series and the data is going to equal the data so we have all the help from pycharm that we would usually get except inside a jupyter notebook and if we run that we're going to get this graph here which is a series from Panda and at any time you want to see this in the browser you can do that by tapping on this small Earth over here and it will take us to the web version that we were just using so I mean it's up to you which one you use of course you don't have to use money on pycharm to do this I probably will use the pychon version because it's so much more pleasant on my eyes but I also really do do like the web version of Jupiter notebook so that was pretty much all you need to know about getting started with Jupiter notebook the rest is for you to explore and play around with such as you do have this button here that runs everything and if you want to run everything over and over you can tap on that that exists in pycharm and that also exists in jupyter Notebook here it's going to restart and run all cells which is perfectly fine we now rerun everything and it worked just as it did before but anyways that's actually all I wanted to cover in today's lesson so as always thanks for watching and I'll see you in the next video"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Experiment Tracking with Jupyter Notebooks and Python Scripts",
        "Video Title":"&quot;Intro to PAWS\/Jupyter notebooks for Python beginners&quot; by Chico Venancio",
        "URL":"https:\/\/www.youtube.com\/watch?v=AUZkioRI-aA",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/AUZkioRI-aA\/hqdefault.jpg",
        "ID":"AUZkioRI-aA",
        "Publish Time":"2021-06-01T17:22:17Z",
        "Channel":"MediaWiki",
        "Channel ID":"UCg4wlhlN8RjP6_e_vMC4CTA",
        "Transcript":"and so i'm sheikh van anter or do you want to go first and introduce her yeah i'm happy to introduce so we have shiko here and he's landing on introductory cause for fights and beginners and he'll also be taking questions in the end so you can drop them into youtube chat and talk to pre-fix it with you know question two speakers check your questions so let's get started cool um i'm shikha vanansu i'm a volunteer from brazil i've been editing wikipedia for the last 15 years somewhere along 2017 i started maintaining paws and i'm here to talk about how can it be used for beginners and hopefully for advanced use cases as well if those are interesting to you and i'm also generally available for the hackathon if anyone wants to go into a more specific question i can take it right now or i can take it later in private if you want either in work adventure or telegram or irc i'm whatever i think most channels so get into pulse why was it created um uv was one of the main uh drivers for this and and boss is a very oriented to ease the way that wikipedians and wikimedians can use more advanced tools can use spots and scripts to do their edits and get things to work we have other alternatives uh like two forge and cloud bps for that before we we had with media cloud services we had two server and you can always do the same things that you do on paws on other cloud providers or other notebook providers notebook providers we have collab we have mybinder.org and you can always just spin something up in aws or azure or gct or wherever you want but that does take effort that does mean you need to understand how these things work you need to get used to that environment and usually that means using the command line in a at least medium way it's not easy for everyone and for pause it's just there you already have authentication with video wikis uh you can just start coding right away if you don't know how to code you can even just copy something that someone else wrote and just change it to be for your wiki just translate the strings so it's a lot easier you're trying we're trying to reduce the command line tax to get people to use advanced tools for wikis so starting up to forge which is the easiest of all those alternatives means you have to set up uh it's possible for experienced programmers but it means you have to set up a developer account for wikitech you need to set up an ssh key you need to upload that to striker um you have to learn what is the job grid and kubernetes or kubernetes i mean one of those is fine and for cloud vps you have to do second factor authentication and there are there are still weird edge cases uh though they've been improved a lot the last few years by the cloud team uh for pause you just go to the webpage you sign in with your wikimedia account that's it you can start a notebook you can start code immediately and everything that you do there is already open access anyone can access it under the public pause page um one thing that kind of shows this is that paul's has now 3487 users that have ever used pause while two-force had two thousand one hundred fifty i mean obviously two four users the medium the average two port user is more active on two force than the the pause user is active on pause but this means that more people have at least some contact with advanced uh editing capabilities and you can see the growth is a lot higher for paul's the last time i did a talk like this was in 2019 and we've had a thousand and two hundred something uh new pulse users and only about a little bit less than four hundred new two four users how does pause work this is a bit advanced but i just wanna get this out of the way pause is kubernetes back to the hub instance so every time that a user gets into pause well a pod is created a server is created for them inside of kubernetes pulse cluster and storage there is handled by nfs and authentication not only to get in and define who you are but also to get access to the api is done with mediawiki meta this is the general technical one of the general technical diagrams for that users get into the proxy the proxy sends us to the hub with authentication and then you have a user pod separated for each user there um i can go to more detail if anyone wants but this is not the main focus of this so what can pause do a lot of use cases are endless because it's a server and you can do anything you want with it but use cases are usually quick data exploration this is something that i do myself a lot even for before writing tools i'll go into pause and i'll write something to understand what's actually possible and that means that i don't have to get into tool forge and try to query databases or to use pi wikibot into forge i can just do that a lot easier in the web interface with boss creating dashboards this is a very cool use case for paws because the the dashboards can be updated and you just create a notebook and instead of having something that you copy and run on tool for every time you you have a web page with the results and and it's a lot easier to share and show that to other people and making bot edits on wiki that's a very common use case you can do that both on the terminal and from the notebook uh the current limitations for pause is that we don't yet have a way to schedule execution so it's just something that you're running while the while the browser is open after an hour the the server that is open there will be kill so you can get away from your computer and the browser is there that's fine it will still run but if you shut down the internet or your browser after one hour that will be killed and it won't run anymore using pause is easy this is a 30 second demonstration of that i just input the page there sign in with mediawiki he already gets my username and i allow it and i'm in my server and i can create a python notebook from there or i can create a terminal and that's that's it i mean that 30 seconds there four killing pause is almost easy hopefully we can get something a little bit better on this hackathon but as i said and as can hopefully be seen over here at the end of the video once once we create a notebook we immediately get this public link over here so this is just a link to the past public uh instance with this notebook even though this empty notebook will be there um and forking means that you can actually go to this public link for other users and then download the notebook and upload it into your own paw server so this is the workflow for that you go into the public link you add format equal raw at the end of your url and then you can save that and i have it almost here exactly because it's not as easy as we wanted to make so i'm choosing one notebook here my first notebook and i can kind of show that just adding the format raw and you can save yeah windows messes with the extension so you need to save this all files there and then we have notebook locally and i can upload that to my server using pause is very easy i mean we have notebooks and the three things that i like to teach people about notebooks is that we're using cells the notebooks itself is not the the context of what you're executing you're executing each cell each cell can be code or it can be marked down and cells can be run in any order this is a print screen from that my first notebook um and it shows that this was run on the seventh thing that was run and the first one of import was run as the 18th thing that was run and this usually happens because you're changing something on the top sound and then you run it again and then you go down to another cell and run it so it's a very interactive way of running code but in the end the order does matter in terms of presentation so you can also have these markdown cells like a first glimpse into power pulse it's a markdown cell let me show you that live on my first notebook over here so this is something that i forked and you saw the video of me forking this a few minutes ago and as you can see this is a markdown cell and i can double click it to have it as the brawl markdown and i could for example make this a level two heading instead of a level one and it will as soon as i run it um now be a level two heading instead of a level one and the same if i run this this is from the forked instance i have never run any of these cells so if i run it again it will now be level one and if i can continue down it will be level two level three level four um that let me show you this other um this other notebook that has more interesting examples of how you can use python notebooks to do things in in wikis this notebook is very comprehensive it has getting started with apis and all kinds of ways to interact with the different media wiki apis and even with outside apis apparently but it's interesting like how you could use requests which is a popular python library and the page that you want and here's an interesting way to interact with it and this since it's not even authenticated should work out of the box you get it and we can get the response from the rest api here pi wikibot is very interesting because we already insert we already insert authentication for it so this is not an authenticated request because we're just uh getting the text we're not saving but we could uh then say page and i won't do it page.text equals something else and if i then go page.save it will actually and i run this it will actually make the edit for me as paul as my user that has logged in and i'm not going to run this because vandalism is not nice but as you can see it's a very interesting way and it's the most common way that i use uh paws and pirikipot um this notebook is very interesting has lots of um lots of instructions in markdown and it's a very good practice to have to not only have your notebooks but also have documentation inside the notebooks and let me go back to that table of contents it also has the the the same instruction how to fork a notebook and these are not working those these links inside but they do work on the public on the public option and you can also use outside apis because this is again open service open server that you can use anything on it you can run anything one thing that i want to stress also is that most of the uses of paws are python notebooks but these don't have to be python notebooks i could have here this is running as a python3 kernel and what we already have installed in paws is python and r and bash kernels and soon we'll install julia kernel because that was asked for but we could have several things over here we could have node we could have uh i mean the possibilities really are fast so if anyone wants a new kernel running for boss please ask and we can take a look at how that's possible um where can we take pause jupiter hub is a project that is being developed very quickly and that the whole jupiter notebook also develops quickly and has lots of releases and new features so we can incorporate that into pause one of the one one one of the interesting ones that already is there is jupiter lab and if we that's not what i wanted i'm sorry we have 10 minutes left chico just letting you know thank you that was a perfect moment to say that so we're here on the the traditional um interface but if we change over here we have a secret interface that's called jupiter lab and it should be a little bit nicer and this will be fixing but has very different interface and more modern i think and this is what's actually currently maintained by the jupiter lab team a lot more than the jupiter interface one of the reasons that we don't have this as default yet is that if we open it here the same book as you can see it's already running because i was running it over there we don't have the same public link uh that's one of the extensions that we need to figure out how to do for jupyter lab but it's a very interesting interface for for people to use and the public link can be figured out just by changing this to public or changing the link over here we can copy shareable link and as if we just go public should yeah yeah i did not yeah there's some url hacking there to get it that's the main reason that we haven't switched yet but it's a nicer interface overall um so as i mentioned adding new languages to be used is very uh possibilities are very vast we probably add julia hopefully by the end of the hackathon and i mean it's just a very long list of possible kernels over here we're not adding them because maintaining this is not free not free of effort so whenever we have a request we'll probably add it we also need some extensions that could be used to solve these issues i mean allow scheduling of execution has been a dream of mine for a few years um drafts and publishing would be nice as well to have jupiter notebooks have by default a a versioning system that is being marked as checkpoints and we had all the versions of the previous versions of the notebook also stored but a way of presenting that to all the users would be very nice so kind of like have drafts and publishing so that public could have a more polished view of the notebooks and have some kind of source control like get would be very nice as well because right now it's kind of hard to even for advanced users to understand what's going on on the versions of their notebooks um were there any questions for me this is the end not yet i don't see any questions but people are free to feel just feel free to ask any in the youtube chat i also have the youtube chat open so i can respond to anything and well so um i'll be available as i said in the beginning for all anyone that wants to hasn't tested pause yet and want to use it i mean i'm not the only one who knows how to use it so you can ask other people in telegram irc or wework adventure there's lots of people that can help and i'm available as well i can do a session to help with your particular notebook or script um suzanna is asking if there are any challenges with uploading images for example i've done a few image uploads from pause but the bigger challenge that you have is to use this interface to get images here so what i usually use to upload images to comments when i'm doing pause i don't know if i have any yeah i'm not sure that i'll have one here but what i use is something that i'm getting images from some other source because sending images to pause is not easy in this interface so getting images from like scraping a website into pause and then sending it to uh to have some here uh now this was just xlm xml and sending it directly to commas is something that i've done in the past but doing it directly with um images on your notebook it's not as easy it wouldn't be my tool my tool choice any other questions there's only three minutes left i think let's it and then we can wrap up yes i think so no other questions you do have one question or two first is can you improvise and modulate system um yes yes you can it's actually let me share my screen again for this um uv actually made some magic that we can import things that other users wrote in the file system and you can definitely import things that you yourself wrote so i it's not i mean this is just a python so there's a python kernel running the back so you can really port anything that you have over here i don't normally use this so i don't quite remember the syntax that you've created for this but i i can look it up and send people because looking what's the it's more of a callout right the susanna's mentioning that we're meeting the mad burns in work adventure after this workshop for jupiter notebooks and i'll be there as well i'm not sure how useful i'll be because there will be plenty of people to help but let's go over there as well awesome so i think we're dying and we can wrap up thank you so much thank you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Experiment Tracking with Jupyter Notebooks and Python Scripts",
        "Video Title":"Talk - Antoine Toubhans: Flexible ML Experiment Tracking System for Python Coders with DVC and St...",
        "URL":"https:\/\/www.youtube.com\/watch?v=EGIzJIfAy7g",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/EGIzJIfAy7g\/hqdefault.jpg",
        "ID":"EGIzJIfAy7g",
        "Publish Time":"2022-05-23T18:21:59Z",
        "Channel":"PyCon US",
        "Channel ID":"UCMjMBMGt0WJQLeluw6qNJuA",
        "Transcript":"hello and welcome um so our next presentation and the last one before lunch is uh we have antoine tubong who is going to be talking about flexible machine learning experiment tracking system for python coders with the vcm streamlit let's work on antoine with a round of applause [Applause] hi everybody thank you for being here today i'm going to talk about ml experiment tracking system and a few words about me my name is antoine bonsai i'm french i live and work in paris in i work in a consulting firm called sikara and what we do is that we we build a telematics solution for our clients ai solutions mostly i am a data scientist for four years five years now and i mostly work on computer vision problems so today i'm going to talk about machine learning engineering at the official job title is data scientists but actually what we do is more machine learning engineer because we do data science we read the research paper we implement models we run experiments but we also build what is around we build apis we integrate models in mobile help or stuff like that so it's in between data science and software engineering and in software engineering we have a lot of tools i mean the software engineering it's very mature and you have a you can leverage on existing best tools and best practices so on the other end machine learning engineering is more than just software engineering there is a lot of things that you you need to do you need to to track the data alongside the code it's more an exploratory work you have to try and test things and as you train models you you need tools to to investigate them to touch them to see how it works so today i'm going to talk about ml experiment tracking system in most machine learning projects you have this loop when some somehow you you have some data and you want to try some models so you train your model then you evaluate it and it provides you with feedbacks so either you modify the data or the model you change the ip parameters or things like that and you do it again and for these reasons you need an experiment tracking systems that allows you to track your experiments so you want to to have a record of which data did you use which code which parameters you want to be able to compare experiments and as the project is going on you are going to have more and more experiments so you need to organize them so that it's easy to search and reproducibility it's very important because when you you have a model who proved to be good you want to be able to rebuild it in order to be able to iterate over it and finally it's teamwork so you need tools to [Music] share the knowledge that you you have when you run these experiments so today i'm not going to talk about all these solutions which are great but i call them monolithics because they they provide you with all you need to do um ml project but it's not very easy to customize them instead i see cara i think we are a good titan developer so instead i propose to to build an ml experiment tracking system with smaller bridge bricks which are dvc and streamlets and it will allows you to to build a system that is fully customizable so let's do machine learning for the purpose of this talk i will i will use these cats and dogs image classification problem it's adapted from a tensorflow tutorial and basically it's the goal is to build a model that given an input image says whether it's a cat or a dog a few words about the dataset it's available in tensorflow datasets it's 3000 images and here you can see some examples of cats and dogs so how how do we do this um we are going to build a training pipeline the which which are which has four steps the the first step is to download the data set then we have to prepare the data set we need to split the data set in three parts a trend validation and test set and then i need to train a model over the train on val sets and finally i need to evaluate this model so that i get a metric to to know if it's working good i'm going quickly over the scripts basically it's adapted from the tensorflow tutorial you can find online so the train trick basically what it does is it imports parameters it loads the data it defines a model here and then it's trained here [Music] the the training there is two steps during the training first the backbone is frozen and then it's unfrozen [Music] so let's say we we want to run an experiment so what do we need to do first we need to set up the experiment so we need to define which model we want to use on which data define the parameters and so on and to do that i can track whatever i do with using github because it's code basically it's code or it's a configuration files that i i can track with git so i'm happy with this step then i need to run the pipeline to do that i need to run the scripts in the in the right order which is i'm not super happy with that because it's easy to to mix step steps and then i need to save the result because when i execute the training pipeline it will produce files for instance the model weights the matrix files and so on so i need to put it somewhere and finally i need to keep track of the experiments itself which model did they use which parameters which data and so on and [Music] i need tools to do it to do this properly so the it's time to introduce dvc uh dvc stands for uh data version control it's um it's a python library so you can just pip install it and what it does is that um it allows you to to to track huge files that you you don't want to version with git for because it's too heavy and it will replace this huge file by small metadata files that you can track with it so it's very similar to a git lfs for instance and the api is very similar to git so if you know how to use git it's pretty much the same with dvc instead of git add your file you just dvc add your file and there is also a remote data storage mechanism so you can dvc push pull to save your your results what is really good with dvc it's this reproducible pipeline feature so in dvc you can track the data but you can also track the way you produce data say for instance here i have a two-stage pipeline that will consume file fail file a b c and in the end we'll compute a file e so all i need to do is to define the pipeline in a ml file i just defined the two stages to do that i give the command and i declare the dependencies and the output and whenever i want to execute the pipeline i just run dvc repro and this will resolve the dag so that he knows in which order to execute the stage it will execute the stages and it will track the input and put data with dbc and there is also a caching mechanism so that whenever a stage the dependencies of a stage didn't change it will restore automatically the output so that it speed up a little bit the training the pipeline execution so let's go back to to our training pipeline just as before we have two more files now i have a dvc.tml file that sorry in which i defined the the fourth stage of my pipelines and i have a parameter file where i defined all the parameters from my training pipeline and this parameter i directly injected in the pipeline definition for instance here road d or sub gear so on so let's say i want to give a second try to run my experiment so the first step it's pretty much the same [Music] but to modify the pipeline or parameters i directly modify the dvc.tml and params.tml files to run the pipeline it's much more easy now i just run dvc repo and that's it and to save the results i have nothing to do because dvc will automatically track the the output data now regarding the experiment tracking is not very i'm still not happy with that because whenever you execute a pipeline it will create a metadata file that you can track with git so the experiment its track you can access it with git log but what you will get is only the commit names and you see all commits in your project you see experiment commits together with code commits so it's not very convenient the data is tracked but it's not very easy to access and another difference between classical software engineering is that when you do machine learning it's not a linear workflow when you do classical software engineering it's mostly linear you have branches but when you code in your branch you do one commit after the user and it's linear in data science you whenever you train a model usually you train it with a lot of different epa parameters so it's not linear in dvc there is an another feature which is called experiment that allows you to to track experiment in a non-linear way i will not enter into details but what you need to to see here is that it will create commits whenever you execute a pipeline and you will track them these commits with custom git references and it's not linear and since you have references for your experiment commits you also have commands to access them so let's say i want to [Music] see all the experiments from my repository i can run this command dvcxplist and it will give me something like that so here you see the the this is the parent commit and here you have all the experiments that derives from it so now if i want to access the details of this experiment i just run dvcx show and i can provide the commit hash sorry so i need to go by front first it goes and now i have the the details of all the experiments that derive from this git commit so you have the the matrix the accuracy i have all the parameters and so on so let's get back to um to running an experiment and now the it's whenever i want to to set up an experiment uh i just create um a new run of the pipeline by overriding some parameters so instead of running dvc repro i run dvc x prime and i use this set params option to override whatever params parameter i want to override and there is a queue mechanism so i can flash the queue and execute all the experiment in it by running dvc x run renault and in the end the the output data will be automatically tracked by dvc and regarding the experiment tracking i can access all the experiment details by running dvcx show so it's much better not let's take a step back and let's have a look at the the main experiment tracking system features so with dvc we are very good at logging experiment data on tracking the the produce data it's also very good for reproducibility because whenever i want to rerun an experiment i just have to check out the the the commit and run dvc repro and it will re-execute the experiment the same way regarding the other features comparing experiments organizing experiments and collaboration i can do it in command line but it's not very convenient i need i could improve it with a ui so it's time to to introduce streamlets i streamlet as they say in their website it's a faster way to build and share data apps so it's a it's a python library you can you can just pip install it and use it and what it does is that it allows you to build an app without knowledge of how to build a web application it's only python and it's very simply simple to to understand how it works so um as you you may have noticed the slides i am showing you are dynamic it's because i made the the slice with we streamlit so let's have a quick demo and in streamlit you can display whatever you want so you can write text like that so here you see the rendering you can have more complex rendering for instance i don't know latex formula you can render images like that and you can render more complex data for instance let's say i have a data frame here you just run st.dataframe and it will show you this nice table so it's very easy to to show whatever data you want to show in your web app and it's also easy to to make interaction for instance let's say let's say i want a slider so here i define a slider between 0 and 100 and whenever i change the slider you see here the chosen value gets updated to 35 and i write the result here which is here so whenever i change it it gets updated here so it's very easy to to build interaction and it allows you to build things like that let's say let's say i want to to to investigate my model and i want to to see on what on which images the the model is not sure so the model it puts a probability between 0 and 1 of being a cat or dog 0 being it's a cat and one it's a dog so let's say i want to see images where the model is pretty sure it's a cat so here i have such images and let's say i want to see images where the model is natural so close to 50 and here you can see there are three images that correspond to the slider values and this one is uh is interesting because there is a cat and a dog on the same image so to to build this uh streamlined application in the right part it's only a few line of codes that are here so what i do is that i load the predictions from a csv file then i define a slider with a double entry here and finally i get the the two thresholds and i use them to filter the prediction and i use st.image to plot the the corresponding images so very easy to use and i can do a lot more for instance i can directly test the model on whatever image i want so for instance here i have an upload widget so let's say i want to to try it on a cat and here the model says it's a cat and it's pretty sure it's a cut so it's working well now let's say i want to try my model on edge cases let's take this one for instance so obviously i don't have lion in nissan the train or the test sets and with streamlight it's very easy to build a ui to test the model on whatever image you want so here i get the image and the model says surprisingly that it's pretty sure it's a dog how do i do that the the code is a bit longer but not that long [Music] i have a function that loads the model with tensorflow i get the upload widget with sd.file uploader i get the uploaded image in here it's a pillow image and if i uploaded a file then i open the file and i pass it to the model and print the prediction and that's it so [Music] what if now we combine strengths of both tools on one hand the dvc is very good at tracking the data but it doesn't it does not provide any tool to build complex visualization on the other hand thrimit is very good at building an interactive web app on complex data visualization so let's combine them to build something like that so here it's a table of experiments application here you have a table with all experiments it's very similar to what you get when you run dvcx show but it's in stimulate so since it's in streamlight i can do whatever i want with it for instance i can sort the experiment by accuracy and since this data is available i can easily plot whatever i want so this is the accuracy across experiments but i can print the number of frozen epochs and i can have more complex plots so here for instance i plot the number of unfrozen epochs against the accuracy but i can change dynamically this so all these interface it's um the code is here so it's it's a bit longer but it's not that long and the the most important part in this card is these three lines because they are the ones where i fetch the experiment information so let's see how it works first i i create a dvc repo in python it's very similar to the git python api and then i retrieve all the experiment commits by running this that ls it's uh the it's similar to dvcx list command but it's in python and what it gets you it's this dictionary where you have the the parent commit here and the list of experiments that derive from that commit now that i have this i can run dvc x show that in python providing the references here and what i will get is anything i need here i have the two parent commits and for each of them i have for each experiment the list of used parameters the dependencies the output the matrix and the experience name so once i get that it's very easy to build the table of experiment apps because all i need to do is to uh use streamlets to to to to show the data the way i want so here i retrieve the experiment metadata i just flatten the data and put it in a data frame i use a hd grid streamlit library hd grid it's originally a javascript library and there is a streamlined component that wraps it and i saw the table here and after that it's very easy to to build the the plots with streamlets something else i could do is is a diffing app it's similar to uh when when you code you you want to compare branches when you do a pull request for for instance to see the difference between your your code here it's the same you want to compare to model so let's say i want to to see the the images on which two models disagree so here i have two selectors to select the experiment i want to compare so let's say i take this one okay it seems they agree okay so this one is very interesting because as you can see the accuracy is the same but there is two images on which the model disagrees so the true label are cats and dogs and the first model is is wrong on the first image and the second model is wrong on the second image and here i see the the two images so this is the code to to build this diving app and what is important in here is the way i load the data because to to get [Music] to to build to know on which images the model disagree i need to load the predictions that are tracked on different commits so the predictions file it's not on my current raw space it's a store in another commit so to do that i use the dvc open function which is very similar to to the core open python function except that it takes a commit revision as an argument and what will what it will do is that it will yield a file descriptor that you can use to do whatever you want here i just read the csv files with with pandas so once i have this it's very easy to to build this because all i need to do is to to retrieve um the the two commits i selected from the select box here this is the first commit revision and then i load the prediction providing the commit and once i have the the data frame i simply can merge them and compute which images the both models disagree and that's it so to sum up if we take a step back as i show you streamlight allows to to build a very custom web application that allows you to compare experiment organize your experiments and it's also very convenient for collaboration because as a streamlined it's just python script you can just version them you can share them across the team and you can improve them during the the project lifetime lifetime so to sum up the the main advantages of this approach is that you can do whatever you want with the ui it's very customizable customizable you can you can make evolve the the ui and there is practically no limit to what you can do whenever streamlit allows you to to do it and it's close to zero uh setup time because you just pip install division streamlit and you you can go there is no infrastructure behind it you you don't need kubernetes or whatever on the other hand it requires that you have some software engineering skills because if in your team you have data scientists that are not comfortable with software engineering it might not be a good idea probably a better idea to to go with ml flow or framework like that and since it's it's code you have to maintain that code and to deal with technical depth and the next step here i just show you a few examples of streamlit apps but it's local you have to start it locally and the next step is to to deploy them in a remote server so that anyone can access them including non-technical team members and there are many other tools that are provided with streamlined dvc for instance with dvc you have a cml that stands for continuous machine learning it allows you to to branch your pipeline the execution with your ci cd so say whenever you push on some branches it will automatically trigger a training or something like that so that's that's it for me thank you for your attention and you can find the code for the the pipelines on the slides on this repo and you can find me on twitter on github thank you very much [Applause] and for the questions if you have any antoine will be out on the corridor to see with your questions and thank you antoine very much thank you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Logging Hyperparameters and Results for Machine Learning Experiments",
        "Video Title":"MLOps in Practice: Experiment Tracking &amp; Hyperparameter Tuning",
        "URL":"https:\/\/www.youtube.com\/watch?v=aiqxOvBiRWU",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/aiqxOvBiRWU\/hqdefault.jpg",
        "ID":"aiqxOvBiRWU",
        "Publish Time":"2020-10-19T13:24:34Z",
        "Channel":"phData",
        "Channel ID":"UC2Z1y0PgaPOHMpglE3oZN0A",
        "Transcript":"[Music] welcome back everyone every day we like to check in and see how our attendees and speakers are doing so let us know your thoughts and questions in the dss leg channel or on social media tag us and share your biggest takeaway of the day you can also tweet straight from the event console and our event hashtags will be included automatically our next speaker is dominique rocco he is a data scientist add ph data and we'll be talking about mlops in practice experiment tracking and hyperparameter tuning welcome dominic take it away hi i'm here to talk about how to put ml ops into practice uh specifically i'm going to talk about integrating machine learning operations into data science workflows through experiment tracking and i'm going to talk about that in the context of hyperparameter tuning so i will start by defining machine learning operations what it is what it means on why it's important i'll move on to talk about experiment tracking within machine learning operations uh and how to make research reproducible then i'm going to talk about a specific library called ml flow and how it helps us track experiments and then i'll take mlflow and i'll show how to integrate it into complex data science workflows like hyperparameter optimization so machine learning operations or mlops the reality is that machine learning models are software and creating great software requires great care so ml ops is to machine learning as devops is to software in the ideal world the machine learning model life cycle looks something like this so we start with data discovery where we gather our data we explore what's going on in those in the data and create features and really try to understand the business case when we have that we train models we run experiments to find the best model and we validate our hypotheses for modeling we have a model we like we move on to deployment so this means serving up the inferences or predictions of that model and integrating it into our systems and once we've done that we need to be monitoring which means logging the behavior of our models visualizing what's going on and alerting when there are errors now in reality this tends to go very wrong we've all seen this many times a data scientist pulls some data down to their laptop and they create this series of jupiter notebooks to do different functions they might do some filtering of the data and then send that over and do another notebook with some feature exploration and analysis exploratory then they learn some things they do some more filtering and now you've got who knows what data set and then we use a data set to make some models and we like them so we throw them over the fence to some engineers and the engineer receives a stack of notebooks and some data that they don't know where it came from and confusion ensues and the engineers struggle to reproduce results and the deployment ultimately takes several months there's a lot of consequences of this pattern you might lose the original training set because it got deleted and or you might lose the source code for training uh as i mentioned the deployment can take a lot longer maybe you get to production and the accuracy of the model doesn't match what you saw in the lab uh or the performance degrades over time and you're unable to train new models and most significantly the proposed business value that was uncovered by data science might never be realized so when we get to mlaps we have some core principles and this is really an interplay between data science machine learning engineering and operations it starts with data science when we're exploring and creating models we need to do reproducible research that means we're always preparing for a transfer to engineering it means we're preserving artifacts to do further research later and we're allowing for retraining if needed uh on the engineering side when we deploy we want to streamline that process and we want to use repeatable architectures to get there deploy continuously and automate model retraining and finally once we're operating we need to be excellent we're monitoring for drift alerting on failures and being prepared to roll back so for data scientists the important thing to think about is experiment tracking this is the foundation of reproducible research and it gets us ready for streamlined deployments later when i talk about tracking there's four key elements that come to mind we need to be tracking our software which means all custom code is in version control and we're keeping track of our external dependencies we need to track our data which means making copies or snapshots of data we need to track metrics which means the input parameters as well as the performance metrics of our training jobs and we need to track the models themselves uh which would commonly be serialized model archive artifacts so that we can compare and deploy later and if we track these things our experiments will be reproducible and results will be available for study at any point so with software this lets us iterate and refine uh and gets us ready to transfer things to engineering teams so we always have to be thinking about keeping our custom code in version control throughout the whole development process and making sure that our environments are understood and tracked so if you're using python for instance and you have a requirements.txt or if you're running out of a docker container and you have a dockerfile you want to keep those things in version control too so that when an engineer needs to have an environment or another data science needs data scientists needs an environment later they're ready to run this code uh retaining copies of our data lets us ask follow-up questions and retrain models ideally you take snapshots of data so that's not the whole data set but we keep track of what's changing so we don't have to duplicate the data over and over again and different data stores let you do that uh it's also important to set appropriate retention policies that we're cleaning up our data when necessary uh if a model doesn't go to production we don't need to keep that data around forever for metrics uh the real key here is to get everything to go to a common location so that we can make comparisons and optimize as we run more and more experiments so we want to log all of the input parameters to our training jobs so that we know what we how we configured things and we want to log the performance metrics for analysis and comparison finally we want to restore or track our models so we're going to output serialized versions of our models most libraries have a recommended way to do this and we're going to track the dependencies necessary so that we can load those models later now all of that sounds like a lot of work and the good news is uh that there are libraries like mlflow that make this straightforward for data scientists to integrate into their workflows mlflow is an open source platform for the machine learning life cycle it lets us track our experiments uh with simple api calls and it supports all common machine learning languages and frameworks mlflow helps us analyze our results with a graphical usable user interface as well as an api that lets us go through the history of results um and you can also search into previous results and finally mlflow helps us deploy our models there's a toolkit to track deployments using docker or conda and this lets us trace our workflows all the way back to model creation now tracking in ml flow is simple there are api functions for logging metrics or parameters which are just key value pairs so you have a a value which is the metric and then it has a name which is the string or the key you call a function to do the logging uh it automatically integrates with git to capture the git revision that you're currently running your experiment under and it tracks environments too it actually integrates with uh conda or docker to set up the environments in which experiments are run uh so i'm gonna do a quick little demo uh of what you see in the ml flow gui or graphical usable user interface uh so this is the home page i'm running inside of databricks here where mlflow is built in so every databricks notebook has an mlflow experiment tied to it and so this is the name of the notebook i was running in in databricks you can see down here all of the history of experiment runs that i have launched uh and i can see the metrics that i logged here in this table so it shows me the the parameters that were input to the jobs and then the performance metrics that came out uh if i click on one of those front oh i'll point out one more thing before i move on so this is also searchable so a user can type in some search parameters here and select runs that they want to look at more closely now this is a particular run where i can see the listing of all the parameters that i've talked about and i can see the metrics that i've recorded and also the artifacts associated that so here i'm training models using light gbm for gradient boosting uh so the serialized model is right here that's automatic and built in to ml flow and it has also captured feature importance so i can start to interpret what's going on with my model now i've showed you that ml flow has a lot of features for tracking and now what i want to show is that it doesn't take a lot to integrate this for a data scientist so this is a block of code that i use for the analysis uh that was shown previously i don't want to go through this code line by line but i do want to use as a prop to show just how little of it is related to ml flow so in this block of code i fit a model i do k-fold cross validation and i measure test metrics but only three lines of this are related to ml flow i have one line to register an experiment and start tracking i have another line that enables auto logging for light gbm which enables the capture of the parameters as well as the artifacts of the feature importance and the model artifact itself and finally there's one line below to record metrics so i have a python dictionary metrics and i make one function call to ship all of those metrics off and be logged so ultimately in summary i believe that strong mlaps is key for project success in data science and machine learning engineering it starts in the data science workflows and all data scientists should be thinking about experiment tracking so that they can do reproducible research and ammo flow is a library that makes tracking easy and i'd encourage any data scientists to give it a try uh if you want to learn more we have an upcoming webinar in this topic uh we'll share out the links in slack and we hope that you join us thank you thank you dominique that was a great presentation uh we have now time for a few questions that came through and the first question is does the crisis you describe make a case for operational rules like project and product managers who act as middleware between the data science team and the engineering team these roles will be data science literate but focused on project completion to address what you highlighted do these roles exist currently so i think that these roles exist and there are you know managers and project managers in involved in data science projects and whenever there are they should be driving reproducibility concerns and raising those from the beginning of a project but really it's data scientists who need to get invested in using technology such as ml flow while it may deliver short-term results it to ignore reproducibility because you might get things done a little bit quicker by just banging it out in the long term uh projects will fail to deliver success and business value if you don't do the tracking um so i think the data scientists are the ones who need to stay up on the technology to get this done uh and product managers can't really force specific technologies so much great answer thanks dominique another question that came in is how different is ml flow from other ml platforms like azure ml sure um azure ml and the other sort of automl tools are really more involved in creating the models they'll do the feature engineering and they'll train the models and do model selection or optimization ml flow doesn't do that actual science work or date you know data manipulation it's really just a bystander to help you track the work you do so when you use mlflow you can use whatever tools you want and you're really free to innovate uh and drive the process ml flow just tracks what you're doing and aids in the operational aspects thanks for answering that question another one is what is the most important first step a data scientist can make to improve mlops um the most important thing is to always leave breadcrumbs or a paper trail for yourself and for your team uh you want to make sure that you're documenting what steps you're taking from the beginning and always thinking about you know three months from now how am i going to reproduce what i did and by applying that mindset you'll start to use tools like ml flow uh to make it easier for you to track what you're doing great thanks another one is how do you see machine learning operations changing in the next few years i think uh in the next few years uh there's the biggest change is just that it's gonna be talked about a lot more and there's gonna be more demand uh data science is in a phase now where it really needs to grow up a few years ago data science teams could get by creep by just creating powerpoint presentations that look really good and showing the results and promising business values but in the next few years data science projects and machine learning applications are really going to have to deliver val business value and if teams are deploying broken workflows and broken applications because they don't have good reproducibility then they're not going to deliver business value their applications are going to fall down and and leadership is going to get frustrated um so that's going to create a demand for just more engineering and operations and really up the game in terms of excellence great answers thank you dominic the final question before we go into the break is how can you compare ml flow to safe maker sure um i mean sagemaker is a lot of things sagemaker includes some of those automl tools that i was talking about before it also includes some tracking um and it's really a whole ecosystem and tracking is one part of that so i think sagemaker has similar tools for for logging results and i it has a dashboard that's similar i think uh that one piece the tracking part of sagemaker is a competitor to ml flow sagemaker also has tools for deployments where you know once you train a model you can flip it over and deploy it so a lot of the concepts there uh are the same at the same time stage maker is a much bigger umbrella and part of stage maker is actually to do some of that auto ml and the feature engineering and model development in addition i again you know the biggest takeaway from my talk is the principles and the mindset of tracking and being ready for deployment awesome thank you so much for being here dominic and answering all these questions um i'll put the others in slack and tag you so you can keep the conversation going there thank you very we much have a 60 minutes sponsored thank you we now have a 15 minute sponsor break um take some time to check out our awesome virtual sponsor booth they have creatively adapted and provided a lot of great takeaways you can enter all booths via a virtual lobby everyone who visits the booth is entered into a raffle for 25 pairs of dss talks that i actually really like so make sure to stop by and we will be back at 2 25 eastern for an exciting talk about automatic content marketing messages enjoy your break and see you all in a bit you"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Logging Hyperparameters and Results for Machine Learning Experiments",
        "Video Title":"Managing Machine Learning Experiments with DVC",
        "URL":"https:\/\/www.youtube.com\/watch?v=FHQq_zZz5ms",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/FHQq_zZz5ms\/hqdefault.jpg",
        "ID":"FHQq_zZz5ms",
        "Publish Time":"2021-07-28T18:03:17Z",
        "Channel":"DVCorg",
        "Channel ID":"UC37rp97Go-xIX3aNFVHhXfQ",
        "Transcript":"hi everyone my name is melisha and in this video we'll be continuing our get started example and introducing dvc experiments so experiments are a feature that's only available in dvc 2.0 and higher of course so make sure you're running the latest version of dvc so just a little background on experiments we all know that we run a lot of experiments in machine learning projects where there are a lot of parameters to tune or just a lot of permutations of the code usually we track this through git commits but with dvc experiments we can organize our projects and really keep only what we need and do all of that without polluting our repo with a bunch of git commits so once you have the parameters tuned to your liking or you have the code at the right iteration you want you can discard all of your experiments and not have to worry about a lot of commits still staying in your repo of course if you want more details about how experiments work you can head over to our docs website and take a look at all of the details there but for this part remember that last time we learned how to tune our ml pipelines and compare those changes so now we're going to increase the number of features in our featurize stage and see what difference that makes so this time we'll be using the dvc exp run command and this makes it really easy to change our hyper parameters and run a new experiment so in your terminal we're going to run dvc exp run and we're going to use this set param flag i'll explain that in just a bit and we'll update our featurize dot max features and we'll set that equal to three thousand so this is going to start a new experiment run and this is very similar to what happens when we run dvc repro it just has a few more added conveniences for experiments so that dash dash set param flag it sets the value for our parameters and you'll see that's been updated in our params.yaml here so once this has finished running we'll be able to compare any changes and again any edits that we make to dependencies whether it's parameters or the source code it'll be reflected in our experiment run but let's go ahead and take a look at that diff so if we run dvc exp diff you'll see the change in our values you'll see the change in our parameters and all of this is related to what we have updated in our experiment with just that simple dash dash set param flag now that you see how we use diffs in our experiments i want to introduce you to a really cool feature with dvc experiments so most of the time when you're working on a machine learning project you'll want to update multiple hyper parameters several times just to see how it affects the performance of your training model and we can do that very easily with cues in dvc experiments so far we've just been tuning the params in the featurized stage but there's also parameters for our train stage and this trains using a random forest classifier so what we want to do is set up several experiments with different hyper parameters and not run them quite yet so the way we're gonna do that is by setting up five different cues in our dvc experiments and i'm gonna go ahead and copy and paste a lot of commands from our docs so if you head over to our doc's site you'll see in this experiment there's this queuing experiment section and i'm going to be copying the commands just from this section here so first i'll take this dvc exp run with q and we update some parameters and i will come back to our terminal and paste that in here and you'll notice up here very briefly it will update the parameters in this train stage and i want to show you how that corresponds to the actual stage and here in our dvc yaml you'll see that inside of the train we have this param section with the parameters corresponding to our section here in the params.yamu but we have one queue set up so let's go ahead and set up the other four cues and i'll still be copying and pasting these commands from that page of the docs website so you'll still see just those parameters change as we're adding cues here i'm going to clear this so i make sure you can see the commands that are being run right now then we have three more to copy and paste in so i'll do that and again you can see the little changes in the params.yaml and we'll go ahead and wrap up with the other two commands so now we have our five cues set up and you can look at the values we have here so we've set up several cues now we're gonna run them all in parallel using a job with another command that i'm gonna copy and paste from our docs and this is how we'll run all of those experiments at the same time and you'll notice that it's running the train stage with all of those different parameter combinations okay now that we have all of those cute jobs and they've run let's look at how we compare all of these experiments if you remember in the previous section when we were looking at our plots we just ran dvc plots show there's a very similar command for experiments and it'll show us a table so in this case we'll run dvc exp show and this brings up a table with all of those experiments we had queued up and it has all of the different values but you see it goes just a little bit off screen so i'm going to close out of here and we're just going to add a few different flags to clean up this table a bit this is another thing that i'm going to copy and paste from our docs website so it's on that same page that we copied and pasted all of the cues from and i'm going to go ahead and paste that in here and you'll notice that we get rid of the timestamp and we only show a couple of the parameters here so i'll go ahead and hit enter and you'll see it brings up this table that's a little bit easier for us to see so this has all of the different params that we updated you'll see that we have our different nest values and our different min splits but if you take a look at our rock aucs experiment c68e0 gives us the best value so we know that these parameters here are the best params for our model now that we have this and we have a name for the experiment the cool thing that dvc lets us do is we can persist experiments so now that we know what the best parameters are we'll keep that experiment and ignore the rest and we will just apply this particular experiment to our workspace and continue working from there to do that we'll go ahead and clear out our terminal and now we're gonna run a new command but before you do that if you don't remember what your experiment id was go ahead and copy that from the table here because you're gonna need that so i'm gonna close that again and now we'll run dvc exp apply and then you can paste in that id and we'll get this little message saying that the changes from that experiment have been applied to our workspace so dvc exp apply is very similar to dvc checkout except it works with inspire experiments instead so dvc tracks everything in the pipeline for our experiments including the metrics the parameters dependencies and the outputs and it lets us retrieve things later as we need them so since our experiment has been applied to the workspace it's really no different from reproducing the result without dvc exp run so just to show you let's take a look at our scores json and you'll see we have those optimized values in here before we do anything else let's go ahead and commit our changes to get first let's check out what all has changed so we definitely want to commit these files and let's take a look at just a quick div so we're going to do git diff dash dash params dot not that with the space there and you'll see that this is the difference between our params you'll see the difference in our training params just to give you a quick check on what actually changed in our parameters but now that we know the files that have changed the parameters that have changed let's go ahead and add all of these changes to our workspace so i'm just going to run add dot and we can go ahead and commit these with the message of uh let's say preserve best random forest run okay now that we've added all of these changes to our git history let's talk about how we can do some cleanup for our experiments so i've cleared the terminal to make sure that you can see the commands on top of my little video over here and we're gonna go back a few commits a few um commands and show our table again now you'll see that all of the experiments we had before aren't showing don't worry they're still there but by default dvc exp show only shows experiments since the last commit so this is only showing the experiments we have in the latest commit it's not showing everything before that but it's okay because those previous experiments are still in the cache and we can show or apply them so one way to do that is with the dash in flag and we can use that to show our experiments from the previous however many commits we want so i'm gonna copy and paste another command from the docs but first i'll close out this and i'll paste that command in here and you'll see the dash in with two so this is going to take us back to our experiment results from two commits ago and you see we have all of those old values we have everything that we ran in our queues here it hasn't gone anywhere it's just in the cache now but eventually after you've run enough experiments all the experiments will probably start to clutter this table and we'll want to clean that up so to do that we want to use the dvc exp gc command and this removes all of the references to old experiments so to do that i'm gonna go ahead and get rid of that table clear the terminal again and we'll run dvc exp gc and we will add just this little workspace flag here and this is telling us is going to remove the experiments from our workspace of the current repo and i'll go ahead and say yes so those experiments have been removed and if i go up a couple of commands and look at our again we will see that all of those experiments have been removed that's exactly what we would expect to see and remember dvc expgc only removes the references to experiments it does not remove the cached objects associated with them if you want to clean up the cache you'll need to use dvc gc but that's it for this get started tutorial i hope it was helpful and you learned how to do some cool stuff with dvc and if you have any questions or you need more detail on anything you can always head over to the docs you can reach out to us on discord or you can reach out to us in the forums"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Logging Hyperparameters and Results for Machine Learning Experiments",
        "Video Title":"Catalyst experiments logging with Wandb",
        "URL":"https:\/\/www.youtube.com\/watch?v=Rs3Ne29ycgk",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/Rs3Ne29ycgk\/hqdefault.jpg",
        "ID":"Rs3Ne29ycgk",
        "Publish Time":"2021-05-30T17:57:31Z",
        "Channel":"catalyst",
        "Channel ID":"UC39Z1Cwr9n8DVpuXcsyi9FQ",
        "Transcript":"hey everyone this is a walkthrough of the catalyst and weights and biases integration by ivan and irish from weights and biases catalyst is a pythorg framework for deep learning research and development and weights and biases or simply 1db is a machine learning tools platform wnb helps you save and debug your models easily by tracking predictions model metadata datasets and model files and comparing all of your runs in a single dashboard [Music] here are a few interesting things about catalyst it is focused on reproducibility rapid experimentation and code based reuse that's designed to help you spend more time actually creating something new catalyst consists of the five core components that provide useful abstractions the first one is runner you can think of it as discussion of your deep learning experiment it contains the model you are training the batch handling logic the metrics to report and logging systems supported runners are listed under the runner api sections on the catalyst website the second is engine it defines the logic of hardware communication and the usage of different deep learning techniques like distributed or mixed precision training it supports python distributed setup nvidia apex setup or amp distributed setup support for deep speed horror vote and gpu are in the works the third is call back it is an abstraction that helps you customize the logic during your run once again you could do anything natively with python catalyst as a for loop wrapper the callback api repeats main for loops in our train loop abstraction we can modify the get callbacks function to include any number of callbacks you can find all supported callbacks under the callback api section [Music] the fourth is metric catalyst provides metric abstractions for convenient metric computation during an experiment run you can find all supported metrics under the metric api section and fifth last but not least logger with catalyst 21 release the monitor and system api support has been united into one abstraction catalyst already provides integrations with a number of experiment tracking tools and will focus on 1gb logger in this example here's how you can modify get loggers to use 1gb logger we'll run a call up notebook that uses catalyst for a simple mini classification example that utilizes all the components mentioned above [Music] with 1db logger enabled all the metrics and media of your experiment get automatically locked in your wnb dashboard here you can compare the performance of multiple experiments on various metrics across epochs and batches we also get confusion matrices comparing the performance of every experiment across all ebox this is because we used confusion matrix callback in our runner class which automatically locks all the media generated to the 1gb logger links for all of the resources mentioned will be in the video description and thank you for watching this video [Music]"
    },
    {
        "Domain":"Programming Fundamentals",
        "Sub Domain":"Version Control and Reproducibility",
        "Topic":"Logging Hyperparameters and Results for Machine Learning Experiments",
        "Video Title":"Advanced Hyperparameter Optimization for Deep Learning with MLflow - Maneesh Bhide Databricks",
        "URL":"https:\/\/www.youtube.com\/watch?v=8QL8N6BAREc",
        "Thumbnail":"https:\/\/i.ytimg.com\/vi\/8QL8N6BAREc\/hqdefault.jpg",
        "ID":"8QL8N6BAREc",
        "Publish Time":"2019-05-06T22:24:51Z",
        "Channel":"Databricks",
        "Channel ID":"UC3q8O3Bh2Le8Rj1-Q-_UUbA",
        "Transcript":"hi everybody my name is manish i'm with data bricks i'm a solution architect this talk is advanced hyper parameter optimization for deep learning I will preface this by saying this is not actually tato brick specific I do take advantage of ml flow but all the concepts and everything we talk about should be very extensible to really any environment in which you're working couple things how many people just show of hands attended the best practices for hyper parameter optimization with ml flow talk yesterday ok separate question how many people here are familiar with Bayesian optimization for hyper parameter optimization ok last thing and this is more of just for everybody's information I do like to wander as I speak and this is a very small stage there was a nonzero chance I'm gonna fall off at some point I will be ok just give me a minute all right let's get started so hopefully this slide is review for most of you but you know the kind of four approaches besides manual tuning which hopefully not have you were doing that people tend to use grid search random search both suffer from the curse of dimensionality random search has been proven to an expectation outperform grid search but you know it's still pretty expensive they do have the benefit that because you can calculate all of those points upfront you can run them essentially in one time step so from a wall clock perspective great from an everything else perspective pretty bad population-based algorithms try to take the the best parts of random search and then do like sort of inferred improvement they're great if you have lots of different Optima so for example if you're trying to build a trait a trading portfolio and you want multiple strategies having an optimizer that can go out and find like the six or seven best configurations that are some distance apart in the Piper parameter space will actually give you fundamentally different strategies so you can take those different Optima go deploy them and you have different trading strategies whereas if they're all kind of clustered in the same region you know now you have seven models that are all buying Apple and that doesn't really help you and then lots of there's Bayesian optimization which from a compute perspective is very very efficient because it is doing explicit predictions on what it wants to try next the downside is it does require sequential observations so from a wall clock perspective it's kind of the opposite of grid search where it doesn't suffer from the curse of dimensionality because it scales linearly but you can't run everything in one time step you actually have to run lots of linear things so some best practices also hopefully these were all came up in previous conversations you have tuned entire pipelines not individual models if you have a support vector machine that you are using to do feature ization before it goes into a gradient boosted method or a deep learning model you know tune the kernel and the C simultaneously with that second model or if any ensemble tune all of the parameters of that ensemble simultaneously not one model at a time at the end of the day you don't really care about the performance of any one of those models you care about the per\u00f3n's of the entire ensemble use transformations to your advantage of how you phrase your parameters you know give it some thought just trying to use if you just wanna use powers of two those are not categorical parameters they're actually integer parameters it's the range 1 to 5 with a time step of 1 with a step of 1 and then you exponentiate it and then you can also use transformations to your advantage so for example a learning rate which in deep learning generally behaves logarithmic Li you know all the interesting bits are down by 0 instead of giving it the range 0 to 1 which it'll eventually figure out it can actually learn it much faster if you give it like 10 to the 10 to 0 at negative 10 to 0 or like negative negative 5 to 0 and then raise it to the tenth power so that you're stretching out the entry part of the parameter space and then lastly don't restrict yourself just to traditional hyper parameters you can also optimize for things like what flavor of gradient descent should I use in the first place I know a lot of people will just go out there and say that well Adams really popular right now I'll just use Adam Adam might not be the best gradient descent for your problem rmsprop might do better out of Delta might do better so you want to be able to experiment with different flavors of gradient descent and then even with an architecture in a CNN you know do you want a kernel size of two by two or three by three or four by four these are all parameters that you can use a Bayesian optimizer to find the best values for so to kind of summarize some of the best practices they're neural networks specifically can benefit from the compute efficiency of Bayesian optimization because the parameter space does tend to explode you know something like a G BT or a GBM call I got four or five hyper parameters that you really care about neural network after you count for gradient descent after you account for potentially component of the architecture you can have nine ten eleven hyper parameters you know if you want to do something a grid search or a random search that's an exponential number of different combinations you'd be trying with Bayesian optimization scales linearly for the same ten hyper parameters you might only have to do a hundred to two hundred total optimizations so it's much more efficient training's much more efficient optimized more than just the hyper parameters that does create some chap the challenge though that you know now you have these dependencies not every gradient descent has the same hyper parameters so how do you sort of handle the fact that there are different hyper parameters depending on one of your other hyper parameters or parameters in this case and then often when you actually wanna take a model out into production you have competing metrics if you want to take a image classifier and put it behind a real-time API you don't just care about the accuracy of the model you also care about how fast the model is able to make an inference you don't want the user sitting there for two seconds while you models trying to make a decision if you can give up very little accuracy and get something much faster but again you have multiple metrics so this sets up the agenda what we're going to talk about so to talk about the challenge of sequential training and long training times that goes with Bayesian optimization and deep learning early termination is one of the methods that can address that for the challenge of parameters that then have dependencies for other other parameters we're gonna talk a little bit about conditional spaces and then finally for trading off between objectives there's multi metric optimization so how does an early termination work again show of hands how many people read the hyper band paper alright so this in a nutshell is how hyper band works you select an initial candidate configuration set you train for some number of epochs evaluate the performance preferably the objective metric not the loss use success of having to eliminate half continue the other half repeat and what this kind of looks like in in behavior is you know you start in this case we started out with eight candidates train them take the best-performing ones continue them take the best-performing ones continue and in each case you're also doubling the number of epochs in total that you trained for so in this case you train for you know let's call it 12.5 then 25 then 50 then 100 now there are some assumptions that go with this method especially when you're just sort of doing this naive random search as your initial candidate set and then successive having one of those assumptions that you have well-behaved learning curves if your learning curve stagnate you're lost curve stagnate then you may terminate something that's actually in the end going to perform very well the other component is that because your initial candidates that was randomly selected you're really trading performance for just to get something faster because you don't actually know how these things would have continued had you train them all the way through as you can see here you know it's possible that you know this green and this purple ultimately would have actually converged to a better performance than the purple one or sorry this green one else really did but it's all suppose with this green one who diverged completely so so there is this expectation that you're gonna have well-behaved learning curves and but to give you a sort of look a little bit of a walkthrough of how this can actually benefit you let's just walk through a scenario so let's take ResNet 50 on imagenet 9 hyper parameters we're gonna start with about 128 configurations you know like I said 10 to 20 so in this case we're just gonna pick you know for the sake of round number is 128 we're used 1 P 2 X large 90 cents an hour 12 hours training time so standard training you would just do 128 configurations 12 hours you know it's just simple math one 1500 hours roughly 1,400 dollars roughly with early termination or hyper band because now you only run you start with 128 and then you stop 24 so that you you those are sorry continue 64 the 64 that you've stopped you only ran for five point seven six hours then the remaining 64 you continue you stop half of them six hours so on and so forth in the end you actually use 54 hours of total compute to get to that last best model or last approximation of a best model so dramatically cheaper dramatically faster dramatically less compute maybe no that's totally dramatic faster if you did everything simultaneously you'd get the same thing but but you know and from a compute perspective far more efficient so fundamentally this is what early termination does for you now you can also combine hyper band or early termination with Bayesian optimization but it works a little bit differently in this case you articulate checkpoint so we're hyper band used success of having and said I'm going to take my best half and run them for you know 2x with Bayesian optimization what you're actually gonna do is run your initial candidates for some number you might even just you might even just do equal steps at 25 percent 50 percent 75 percent then 100 percent but you're gonna run all your initial candidates to 25 percent and then you're actually gonna use the surrogate and the acquisition function to go back and choose an entirely new candidate set and you're gonna run those to 50 percent and then you're gonna go back and choose an entirely new candidate set and run those to 75 percent and because the bayesian optimizer is learning from these cheaper versions of the model which he ran to fewer epochs it's making better and better decisions about what are the things you should run for longer and again I can go back to the same drawing but this time it what you can think about it is all of the ones that ran just to this point we then stopped selected a new collection of model of candidates to try ran them to here stopped shoes and you chose two new candidates stopped chose this candidate so instead of this sort of like freeze thaw model that early termination uses you're actually going back completely Rees electing using Bayesian optimization and then just running it longer because you now have a better candidate set now I know looking at these pictures and thinking about a little bit that it sounds like that would actually be more expected more expensive so have these little bit or sorry oh that would be more expensive than the hyper band but the trick is not random search which is the the primarily the sort of initial candidate selector for hyper band requires far more initial candidates than a bayesian optimizer does for these you know nine hyper parameters a Bayesian optimizer would really need about twenty maybe maybe forty initial in that first candidate set whereas with random search you'd probably something more on the order of the hundred and twenty-eight that I used in that original walkthrough so so in the end the way it nets out is Bayesian optimization is actually considerably fewer total calculations the other great thing is that instead of just blindly using successive having the Bayesian optimizer is using an acquisition function to make a decision about what to try next so it's making more intelligent decisions it's not just blindly saying what's doing well now we'll continue to do well and then as well you know with hyper band do you have to implement your own concept of regret so that idea that hey this model I ended up with it diverged how do I go back and re pick something that might actually do better with with hyper band you have to sort of implement that idea yourself with the Bayesian optimizer because it runs all of the candidates the same step and then goes back and picks a new set of candidates it's actually automatically implementing regret in its what it from what it learns as it progresses through the checkpoints and I don't want to jump back one of the other nice things is that with the Bayesian approach to hyper band is that it actually doesn't make any assumptions about the learning curves because it is adaptive and is a black box optimizer it will automatically account for regret like I just said but then it also allows you because you pick the check points and aren't just you're doing like you know 1 n 2 n 4 n 8 n you can account for stagnation so if you know that your model tends to stagnate in in the training loss you can say you know what I'm not going to even bother checking this until halfway through the training instead of having these predetermined points at which you're supposed to evaluate it so this drawing should make clear what I think I've kind of been saying all along the Bayesian version of the optimizer is actually better so random search is this black one out here GP based Bayesian optimization is this red one the reason that their curves start later is because these have to do a full training before you even get a result it there they're sort of lost curves or wall clock time curves start later whereas with the early termination implementations you start getting results much faster because you're training much less much faster because you're training less fewer epochs or if you were data or something like that the reason I say date whoops I I really went way out of my self if your data is there's all this also this method fabulous and it's conceptually similar in that what it does is instead of using epochs as the thing that it varies it actually uses what percentage of the data set it uses to do the training and then go back and select new candidates and yes this actually works you get you know a big speed-up and when you start actually learning how your model performs and then in the end you actually get much better results as well and in this case we regret is just a formulation of how much did it cost to learn something about how your model performs so that's why with these early termination versus full training methods regret is a common expression of how did my how did I progress through the model training so note any of you who've used Karis or tensorflow have probably seen that they have early stopping early stopping is different from early termination early stopping evaluates against a predetermined rate of loss or the improvement in the rate of loss for a single model it's not looking at the collection of models and saying what's working and what's not working so what it's really trying to say is like hey this model this this model configuration is stagnated there's no we're not going to keep training on it or it's gonna say like hey you to finish you're just now overtraining your model by continuing to run it with no real improvement in the loss so it is not the same thing as early termination so in summary hyper band and Bayesian optimization with hyper band attempts to optimize for resource allocation it will dramatically reduce the amount of compute and wall clock to converge to good configurations better implementations include a regret mechanism to recover configurations to recover from configurations that it has progressed but are diverging and then in expectation the Bayesian will outperform the random seed but in principle hyper band or this early termination method is compatible with any under lysing often underlying optimization technique so you could use a genetic algorithm with hyper band if you if you wanted to it's just a question of how are you generating the next candidate set and whether you go back to the beginning or use the freeze-thaw freeze-thaw approach i'm supposed to wait till the end to ask for questions but normally this is what i would ask if there any questions so that's that covers early termination I'm not showing code for this because there's a lot of different implementations for this and they all do a little work a little bit differently but some of the more popular open-source libraries out there that or libraries that do this there is HP band ster stands for a hyper band on steroids it comes from the same people who created the hyper opt library University of Fribourg so they have a pure hyper band implementation where you can use random searches the seed and it does success of having but what they also have is a hyper opt based approach where it doesn't use the success of housing and instead does the the candidate reese election and continue using budgets instead and then there is also Fabolous which like I said is not actually an optimizer it instead uses smaller sets of the data to progress through so you could actually combine Fabolous with hyper opt or even with HP pants there and sort of do both I would not recommend it just because now you're over here you're kind of sampling a little too much on different things and then there is a commercial product by company called cig opt I used to work there this is not a pitch I just happen to know it really well but they also have an implementation of this that is is very easy to use and there's plenty of code if these are things you're interested in trying that is available on the web I don't know if they make these slides available so for anybody who actually wants to go check out code go ahead and take a picture I'll pause here all right phones appear to be down so the next thing I want to talk about is awkward or conditional spaces and basically what this means is the range or existence of one hyper perimeter is dependent on the value of another hyper parameter so you can think about this as you want to optimize your gradient descent algorithm selection so you know different gradient descents have different hyper parameters optimizing the topology of a neural network one of the parameters you might create is how many hidden layers should I have in my in my neural network so and then if you also have well how many neurons should be in that hidden layer the number of neurons in hidden layer let's say number two depends on whether or not a second hidden layer exists so being able to say hey don't even worry about this or select a value for this unless this other parameter value is chosen can make your Bayesian optimizer much more efficient and just to make this a little more real you know these are some of the more popular gradient descent algorithms so rmsprop out of Delta out of grad Adam and you can kind of see that like it's a little bit all over the place which hyper parameters actually exist or don't exist for a given optimizer so so having the ability to say hey you know if my chosen gradient descent is outta grad then I don't really care about beta-1 beta-2 decay rate so on and so forth the reason this matters is because Bayesian optimizers learn from previous values it's going to take the optimizer some amount of time to learn all of these parameters that don't matter when they're not part of the selected set and the more of those you have the longer it will take for it to learn so by being able to go in and proactively say hey these parameters only exist in this case you can cut number of total evaluations that you need to get to a converged value this is more conceptual so I'm not going I don't really have any code to show on this it's available in hyper opt it's available in HP Bannister and then cig oft also supports it as well but it's really just sort of like hopefully intuitive that when you cut down the set of things something has to learn it can learn faster so finally I want to talk about multi metric optimization so lots of different applications that you might see in the real world you're often going to have competing objectives or multiple objectives so you know easy example fraud detection you both want to minimize the amount of fraudulent activity but you also want to minimize all the dollars lost you know if you minimize the activity but all the transactions that you allow to go through are like a million dollars each that's probably not a great for HUD you're still gonna lose a ton of money even though you've minimized the amount of fraud so being able to look for two things at once or optimize for two things at once is often valuable in production settings and and what this you're doing conceptually is you're trying to find the Pareto efficient frontier so this is the set of points that are strictly dominant to all the other points or results in the configuration space so the example here points KNN are both strictly dominated by points D E and C I cannot get them find a configuration that improves on both metrics relative to C D is better on one metric but not on the other and likewise B is better on one metric but not the other so this Pareto efficient frontier is what I'm trying to trace out and then go in and choose what's the configuration that makes the most sense for me so you know when you're deploying again going back to the example of a real-time API that is doing image classification how much of a trade-off do I want to meet you know let's say this is accuracy and this is inference time how much of a trade-off do I want to make on my accuracy to get a faster model that's what this Pareto efficient frontier is gonna help you try to understand so let's take a scenario so M NIST for real time so the the three kind of ways you can approach this using most methods is you know you can approach it naively you can say I'm just gonna optimize for accuracy and then I will also evaluate how fast those models are and just pick the one that is fastest and accurate but then you can also find ways to sort of include the the amount the idea of speed or inference time in the metric so you can use a custom objective function you might just say like all right I'm just gonna take my accuracy and I'm gonna subtract the inference time from it and then just try to find like what's the art max of those two things and then you might also try and find like some statistical method so in cognitive psychology there is this metric called the inverse efficiency score which is test time or or how fast how long it takes you to do something divided by how well you do it so taking something like M nest and now I actually am gonna jump out to some code if I can figure out how to do this and zoom in people in the back can you John can you read this all right so most of this is not gonna be very interesting it's kind of the standard stuff you've seen before if you've worked with Karis or tensorflow so you know load the libraries I'm gonna use hyper opt as my optimizer actually not used to God and then I'm gonna log everything to ml flow so that I can actually go look at it and try to evaluate how how does this trade-off happen so you know I created different ways of recording the objective objective metric naive is exactly what I said just optimized for accuracy but also recorded the inference time and what I actually do is I use test time as my proxy for inference time the faster I can evaluate my test set the faster the model is it's not perfect but it's pretty close I have a custom objective metric and then the inverse efficiency score so load the data set define the neural network in this case I also added that parameterised the the number of layers in the model I did not use the conditionals I wrote this this morning so sorry and then what you'll see is you know I log everything to ml flow and here's where I sort of calculate the different objective metrics depending on which one I've chosen for the run so I either use just sort of the naive method just used accuracy and you'll see that I negate it because hyper opt is always trying to minimize so I'm giving you the inverse of accuracy so that it will drive it to zero if I chose custom I just took score the accuracy subtracted the evaluation time negated it and then for inverse efficiency score because it's already inverted I can just calculate that directly and then pass it in and what you see when you go into ml flow is you know I'm gonna filter it down just to the inverse it in efficiency scores and what I can say now is okay I just want to compare these and I'm gonna scroll all the way to the bottom and I'm gonna say plot test duration versus accuracy so I can pretty quickly see that the configurations I'm most interested in are up here now this does not have a real like curve to its for data efficient frontier it's more of just a drop off you know these are not very accurate but a little bit faster and these are you know fast and you know just a little bit less less fast slower but now at least understand how the trade off I'm gonna make in terms of accuracy versus speed so I'm not I'm just I can just zoom in here these are probably my best candidates for both accurate and fast models so these are the ones that can now take against my my holdout set and say okay I'm gonna go value at these for to see which ones actually are gonna generalize the best and are fast so instead of just you know naively optimizing for accuracy and then hoping one of those is fast in this case I was able to give an objective metric that drove it to find something fast and if I compare the different methods let's see if I can figure out how to get back to my powerpoint right so by comparison I kind of see what I would expect because my custom objective function did include the concept of speed it is faster and then you know accuracy isn't that much better but it is quite a bit faster and then the statistical method again not much more accurate but again even faster so this isn't to say that statistical methods are inherently better than a custom objective metric or even the naive approach what this is say is that you should experiment with your objective function and especially if you have multiple metrics that you're trying to incorporate into your decision process you need to experiment and really figure out what is going to get you to the result that actually meets your business need and ml flow helps a lot with that experimentation as you saw I was able to just go in quickly make a plot zoom in on the area that met my needs and then make use that to make choices some of the challenges that come with these approaches are there can be unintended consequences to custom objective functions if you have wildly varying length scales in the different metrics then you can get a mess of a result that doesn't really change very much because you know some large number swamps the whole thing negative values can throw off your results and in the case I was using where I was subtracting the inference the test time from accuracy you know pretend I was using some other metric that could have had a negative value there would've been unintended consequence that when I went negative it actually would have made the thing better than when it was just a small positive number and then of course fractional values can also have weird unintended consequences so you just sort of have to think about could there be unintended consequences to the function I've created to represent my metrics and then the challenge with statistical methods is that you ultimately have to make an a priori assumption so with inverse efficiency score you know there's kind of a the function the function is response time divided by accuracy but there's an implicit weighting on both of those values that you kind of have to pick up front if I just do a straight division I'm essentially saying both of these metrics mean matter to me equally as opposed to having like a scale some sort of scale on one or the other to articulate that no one is actually more important to me than the other in the case of something like an F score F score is actually F beta score where beta is your way of articulating what the how you want to weight precision versus recall most people consider F score and their C is that what they mean is f1 score where they're basically saying precision and recall have equal weighting that's not always the case there's an example from the healthcare industry in the in the US when they use models there is a preference for false positives or sorry for false negatives because they figure they're gonna see you again in six months to a year and so if your test comes back positive again then okay they know it's real in third world countries they actually have a preference for false positives because they don't know if they're ever gonna see you again so if there's any chance that there's something there they want to flag it immediately so giving in in both of those cases how they would express a preference for beta is fundamentally different and again if you just used F score arbitrarily is your objective metric you have to make a decision up front what is that trade-off I want to make there is a fourth approach Sega app supports this again not a pitch what they do is you actually report both values and then they use the surrogate model and acquisition function to model the relationship between those two metrics and actually try to flush out the complete Pareto frontier treating them independently so using the example of precision and recall it would actually trace out a beta list plot of precision and recall and then effectively you each of those points on the frontier reflects a different value of beta so just to sort of summarize some of the different libraries we've talked about and what they support HP band stir fabulous egg ops all support early termination s is hanging off some of these libraries support conditionals we didn't talk about spearmint or G PI opt but these are two very popular Gaussian process based Bayesian optimizers in general they don't really support any of these more advanced features saying supports you know multi metric single yes that's because everything accepts one metric and for Fabolous I said n\/a for these things because again like I said earlier it's not actually an optimizer it's more a framework for cutting down the size of the datasets and doing what what they call multitask optimization and then all the libraries I talked about we're open are available in the open source except for Sagat which is a commercial product if anybody wants to go back and read literature again I don't if you're getting the slides feel free to take a picture but these are some of the papers that I talked about this is the original hyper band paper this is the paper that was the underlying for HP Bannister again that came out of a University of Fribourg and then this is one of many blog posts that Sagat has done but this one specifically talks about conditional parameter spaces and the the value of of using them so that's my talk with actually timed it perfectly five minutes left thank you for coming please fill out the survey and review the session I will now take questions [Applause] and if you do have a question please come up to the microphone in the front and if you don't have questions I get to go home I was wondering when your sorry yeah good when you're combining the were you doing the combined Bayesian and hyper band approach and it's using the values of the objective function for each of the previous runs to pick the next ones to sample does it also use how many box they ran for as variable so with with the Bayesian option it actually implicitly knows that the number the so what it's actually doing is it's injecting noise into the response surface and the more because it knows that checkpoints ahead of time the further along it is the less noise it injects so it says essentially what it's doing is it's decreasing its uncertainty as it progresses through the checkpoints okay how much do you know about the new parallel methods that are being investigated out at CMU a parallel methods have been actually in the in the literature for a long time there there's they're not new signal supports parallel optimization hyperope supports parallel suggestion surveying the trick with parallel suggestion serving is that you don't want to do synchronous because then you're just kind of waiting to challenge with asynchronous is you know you you've made your selections based on an acquisition function you get a new result back what do you do with the outstanding points and and there's lots of different methods people use some is just do some pre calculation assuming you were right with what you did in the first time some of them will just say pretend that these points do terribly then what would I do some of them choose liked to give like just a noisy stochastic value and say okay what would happen next I think it's kind of an unanswered question of like what's the right way because you're essentially trying to predict the future which is what all these things are trying to do in the first place so parallel suggestions serving for Bayesian optimization isn't anything new but it does exist it works the one thing I would say is that if you were gonna do ten sequential observations you can't just say like well I'll do two in parallel and five sequential you know if you follow that to its logical extreme you're just doing ten in parallel and one sequential and that's just grid search not a random search not Bayesian so it's more about like reducing the wall clock if you like let's say you went you're gonna do ten sequential and you went to two parallel I would actually say that it reduces you to having to do seven sequential so you do three fewer sequential but you're you're not really able to cut it in half because you still need some amount of sequence in order to actually learn so every week trains on your data do you think it's a best practice - yeah yeah now whatever it's what I would say is you can learn from what your previous models have done so you can cut down the parameter space potentially so for example something like the filter size a convolutional neural network that's probably not gonna change just because you got new data well the other hand the learning rate might the dropout might stuff like that so I you know if if you did a bunch of tests and you saw that hey all of my you know might my 10% my top 10% all used out of Delta you could probably just decide like a de Delta is the best optimizer for this model that's not gonna change much now that that's true assuming you have relatively stationary data if you have non stationary data like you know just pure time series like the stock market or the weather or something like that all bets are off you have to treat every model training as a brand new model training Hey so in the last example we were trying to optimize inference time in accuracy mm-hmm if you know that some of the parameters are unlikely to affect inference time is their way for you to specify conditionals from the parameters to one of the metrics when you're trying to find yeah I should have used conditionals on that example but I just wanted to get the code done this morning because I realized it would be good to actually show something and and in instead of trying to get the conditionals to work I just ripped through it and just did it but yeah I what you could have done is gone back and said or what I could have showed and I'm out of time so I'm not gonna be able to is shown like how did you know depending on my selection of I think it was number of full connect MFC like what was the impact on test duration and then you can start to get some intuition on like okay something like that that I think is gonna have an impact on inference time does it really have an impact on inference time I actually did look at it before the talk I gave the number of full connect layers one two and three it actually made no difference the best perform the fastest model actually had three full connect layers not what you expected I'm out of time but I will go out there and take questions"
    }
]